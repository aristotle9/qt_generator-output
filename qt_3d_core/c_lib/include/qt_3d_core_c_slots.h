#ifndef QT_3D_CORE_C_SLOTS_H
#define QT_3D_CORE_C_SLOTS_H

#include "qt_3d_core_c_global.h"

// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_core_c_SlotWrapper_const_QVector3D_ref : public QObject {
  Q_OBJECT
public:
  qt_3d_core_c_SlotWrapper_const_QVector3D_ref() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, const QVector3D*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(const QVector3D& arg0) {
    if (m_func) {
      m_func(m_data, &arg0);
    }
  }

private:
  void (*m_func)(void*, const QVector3D*);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode : public QObject {
  Q_OBJECT
public:
  qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, Qt3DCore::QNode::PropertyTrackingMode), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(Qt3DCore::QNode::PropertyTrackingMode arg0) {
    if (m_func) {
      m_func(m_data, arg0);
    }
  }

private:
  void (*m_func)(void*, Qt3DCore::QNode::PropertyTrackingMode);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr : public QObject {
  Q_OBJECT
public:
  qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, Qt3DCore::QEntity*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(Qt3DCore::QEntity* arg0) {
    if (m_func) {
      m_func(m_data, arg0);
    }
  }

private:
  void (*m_func)(void*, Qt3DCore::QEntity*);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_core_c_SlotWrapper_float : public QObject {
  Q_OBJECT
public:
  qt_3d_core_c_SlotWrapper_float() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, float), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(float arg0) {
    if (m_func) {
      m_func(m_data, arg0);
    }
  }

private:
  void (*m_func)(void*, float);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_core_c_SlotWrapper_const_QQuaternion_ref : public QObject {
  Q_OBJECT
public:
  qt_3d_core_c_SlotWrapper_const_QQuaternion_ref() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, const QQuaternion*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(const QQuaternion& arg0) {
    if (m_func) {
      m_func(m_data, &arg0);
    }
  }

private:
  void (*m_func)(void*, const QQuaternion*);
  void* m_data;
};
extern "C" {

QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr_custom_slot(qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr* this_ptr, Qt3DCore::QEntity* arg0);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr_delete(qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr* this_ptr);
QT_3D_CORE_C_EXPORT qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr* qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr_new();
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr_set(qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr* this_ptr, void (*func)(void*, Qt3DCore::QEntity*), void* data);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode_custom_slot(qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode* this_ptr, Qt3DCore::QNode::PropertyTrackingMode arg0);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode_delete(qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode* this_ptr);
QT_3D_CORE_C_EXPORT qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode* qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode_new();
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode_set(qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode* this_ptr, void (*func)(void*, Qt3DCore::QNode::PropertyTrackingMode), void* data);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QQuaternion_ref_custom_slot(qt_3d_core_c_SlotWrapper_const_QQuaternion_ref* this_ptr, const QQuaternion* arg0);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QQuaternion_ref_delete(qt_3d_core_c_SlotWrapper_const_QQuaternion_ref* this_ptr);
QT_3D_CORE_C_EXPORT qt_3d_core_c_SlotWrapper_const_QQuaternion_ref* qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QQuaternion_ref_new();
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QQuaternion_ref_set(qt_3d_core_c_SlotWrapper_const_QQuaternion_ref* this_ptr, void (*func)(void*, const QQuaternion*), void* data);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QVector3D_ref_custom_slot(qt_3d_core_c_SlotWrapper_const_QVector3D_ref* this_ptr, const QVector3D* arg0);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QVector3D_ref_delete(qt_3d_core_c_SlotWrapper_const_QVector3D_ref* this_ptr);
QT_3D_CORE_C_EXPORT qt_3d_core_c_SlotWrapper_const_QVector3D_ref* qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QVector3D_ref_new();
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_const_QVector3D_ref_set(qt_3d_core_c_SlotWrapper_const_QVector3D_ref* this_ptr, void (*func)(void*, const QVector3D*), void* data);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_float_custom_slot(qt_3d_core_c_SlotWrapper_float* this_ptr, float arg0);
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_float_delete(qt_3d_core_c_SlotWrapper_float* this_ptr);
QT_3D_CORE_C_EXPORT qt_3d_core_c_SlotWrapper_float* qt_3d_core_c_qt_3d_core_c_SlotWrapper_float_new();
QT_3D_CORE_C_EXPORT void qt_3d_core_c_qt_3d_core_c_SlotWrapper_float_set(qt_3d_core_c_SlotWrapper_float* this_ptr, void (*func)(void*, float), void* data);
QT_3D_CORE_C_EXPORT QObject* qt_3d_core_c_slots_G_static_cast_QObject_ptr_qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr(qt_3d_core_c_SlotWrapper_Qt3DCore_QEntity_ptr* ptr);
QT_3D_CORE_C_EXPORT QObject* qt_3d_core_c_slots_G_static_cast_QObject_ptr_qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode(qt_3d_core_c_SlotWrapper_Qt3DCore_QNode_PropertyTrackingMode* ptr);
QT_3D_CORE_C_EXPORT QObject* qt_3d_core_c_slots_G_static_cast_QObject_ptr_qt_3d_core_c_SlotWrapper_const_QQuaternion_ref(qt_3d_core_c_SlotWrapper_const_QQuaternion_ref* ptr);
QT_3D_CORE_C_EXPORT QObject* qt_3d_core_c_slots_G_static_cast_QObject_ptr_qt_3d_core_c_SlotWrapper_const_QVector3D_ref(qt_3d_core_c_SlotWrapper_const_QVector3D_ref* ptr);
QT_3D_CORE_C_EXPORT QObject* qt_3d_core_c_slots_G_static_cast_QObject_ptr_qt_3d_core_c_SlotWrapper_float(qt_3d_core_c_SlotWrapper_float* ptr);

} // extern "C"

#endif // QT_3D_CORE_C_SLOTS_H
