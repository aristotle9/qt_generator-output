#ifndef QT_3D_EXTRAS_C_SLOTS_H
#define QT_3D_EXTRAS_C_SLOTS_H

#include "qt_3d_extras_c_global.h"

// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_extras_c_SlotWrapper_const_QFont_ref : public QObject {
  Q_OBJECT
public:
  qt_3d_extras_c_SlotWrapper_const_QFont_ref() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, const QFont*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(const QFont& arg0) {
    if (m_func) {
      m_func(m_data, &arg0);
    }
  }

private:
  void (*m_func)(void*, const QFont*);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_extras_c_SlotWrapper_QVector2D : public QObject {
  Q_OBJECT
public:
  qt_3d_extras_c_SlotWrapper_QVector2D() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, const QVector2D*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(QVector2D arg0) {
    if (m_func) {
      m_func(m_data, new QVector2D(arg0));
    }
  }

private:
  void (*m_func)(void*, const QVector2D*);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending : public QObject {
  Q_OBJECT
public:
  qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, const Qt3DRender::QBlendEquationArguments::Blending*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(Qt3DRender::QBlendEquationArguments::Blending arg0) {
    if (m_func) {
      m_func(m_data, new Qt3DRender::QBlendEquationArguments::Blending(arg0));
    }
  }

private:
  void (*m_func)(void*, const Qt3DRender::QBlendEquationArguments::Blending*);
  void* m_data;
};
// Class generated by cpp_to_rust.
// See the template at "cpp_to_rust/cpp_to_rust_generator/templates/c_lib/qt_slot_wrapper.h".
class qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction : public QObject {
  Q_OBJECT
public:
  qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction() : m_func(0), m_data(0) { }
  void set(void (*func)(void*, const Qt3DRender::QBlendEquation::BlendFunction*), void* data) {
    m_func = func;
    m_data = data;
  }

public slots:
  void custom_slot(Qt3DRender::QBlendEquation::BlendFunction arg0) {
    if (m_func) {
      m_func(m_data, new Qt3DRender::QBlendEquation::BlendFunction(arg0));
    }
  }

private:
  void (*m_func)(void*, const Qt3DRender::QBlendEquation::BlendFunction*);
  void* m_data;
};
extern "C" {

QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_QVector2D_custom_slot(qt_3d_extras_c_SlotWrapper_QVector2D* this_ptr, const QVector2D* arg0);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_QVector2D_delete(qt_3d_extras_c_SlotWrapper_QVector2D* this_ptr);
QT_3D_EXTRAS_C_EXPORT qt_3d_extras_c_SlotWrapper_QVector2D* qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_QVector2D_new();
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_QVector2D_set(qt_3d_extras_c_SlotWrapper_QVector2D* this_ptr, void (*func)(void*, const QVector2D*), void* data);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending_custom_slot(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending* this_ptr, const Qt3DRender::QBlendEquationArguments::Blending* arg0);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending_delete(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending* this_ptr);
QT_3D_EXTRAS_C_EXPORT qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending* qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending_new();
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending_set(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending* this_ptr, void (*func)(void*, const Qt3DRender::QBlendEquationArguments::Blending*), void* data);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction_custom_slot(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction* this_ptr, const Qt3DRender::QBlendEquation::BlendFunction* arg0);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction_delete(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction* this_ptr);
QT_3D_EXTRAS_C_EXPORT qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction* qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction_new();
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction_set(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction* this_ptr, void (*func)(void*, const Qt3DRender::QBlendEquation::BlendFunction*), void* data);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_const_QFont_ref_custom_slot(qt_3d_extras_c_SlotWrapper_const_QFont_ref* this_ptr, const QFont* arg0);
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_const_QFont_ref_delete(qt_3d_extras_c_SlotWrapper_const_QFont_ref* this_ptr);
QT_3D_EXTRAS_C_EXPORT qt_3d_extras_c_SlotWrapper_const_QFont_ref* qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_const_QFont_ref_new();
QT_3D_EXTRAS_C_EXPORT void qt_3d_extras_c_qt_3d_extras_c_SlotWrapper_const_QFont_ref_set(qt_3d_extras_c_SlotWrapper_const_QFont_ref* this_ptr, void (*func)(void*, const QFont*), void* data);
QT_3D_EXTRAS_C_EXPORT QObject* qt_3d_extras_c_slots_G_static_cast_QObject_ptr_qt_3d_extras_c_SlotWrapper_QVector2D(qt_3d_extras_c_SlotWrapper_QVector2D* ptr);
QT_3D_EXTRAS_C_EXPORT QObject* qt_3d_extras_c_slots_G_static_cast_QObject_ptr_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquationArguments_Blending* ptr);
QT_3D_EXTRAS_C_EXPORT QObject* qt_3d_extras_c_slots_G_static_cast_QObject_ptr_qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction(qt_3d_extras_c_SlotWrapper_Qt3DRender_QBlendEquation_BlendFunction* ptr);
QT_3D_EXTRAS_C_EXPORT QObject* qt_3d_extras_c_slots_G_static_cast_QObject_ptr_qt_3d_extras_c_SlotWrapper_const_QFont_ref(qt_3d_extras_c_SlotWrapper_const_QFont_ref* ptr);

} // extern "C"

#endif // QT_3D_EXTRAS_C_SLOTS_H
