#ifndef QT_WIDGETS_C_QTEXTEDIT_H
#define QT_WIDGETS_C_QTEXTEDIT_H

#include "qt_widgets_c_global.h"

extern "C" {

QT_WIDGETS_C_EXPORT const QTextCursor* qt_widgets_c_QTextEdit_ExtraSelection_cursor(const QTextEdit::ExtraSelection* this_ptr);
QT_WIDGETS_C_EXPORT QTextCursor* qt_widgets_c_QTextEdit_ExtraSelection_cursor_mut(QTextEdit::ExtraSelection* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_ExtraSelection_destructor(QTextEdit::ExtraSelection* this_ptr);
QT_WIDGETS_C_EXPORT const QTextCharFormat* qt_widgets_c_QTextEdit_ExtraSelection_format(const QTextEdit::ExtraSelection* this_ptr);
QT_WIDGETS_C_EXPORT QTextCharFormat* qt_widgets_c_QTextEdit_ExtraSelection_format_mut(QTextEdit::ExtraSelection* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_ExtraSelection_set_cursor(QTextEdit::ExtraSelection* this_ptr, const QTextCursor* value);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_ExtraSelection_set_format(QTextEdit::ExtraSelection* this_ptr, const QTextCharFormat* value);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_dynamic_cast_QTextEdit_ptr_QAbstractScrollArea(QAbstractScrollArea* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_dynamic_cast_QTextEdit_ptr_QFrame(QFrame* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_dynamic_cast_QTextEdit_ptr_QWidget(QWidget* ptr);
QT_WIDGETS_C_EXPORT QAbstractScrollArea* qt_widgets_c_QTextEdit_G_static_cast_QAbstractScrollArea_ptr(QTextEdit* ptr);
QT_WIDGETS_C_EXPORT QFrame* qt_widgets_c_QTextEdit_G_static_cast_QFrame_ptr(QTextEdit* ptr);
QT_WIDGETS_C_EXPORT QObject* qt_widgets_c_QTextEdit_G_static_cast_QObject_ptr(QTextEdit* ptr);
QT_WIDGETS_C_EXPORT QPaintDevice* qt_widgets_c_QTextEdit_G_static_cast_QPaintDevice_ptr(QTextEdit* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_static_cast_QTextEdit_ptr_QAbstractScrollArea(QAbstractScrollArea* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_static_cast_QTextEdit_ptr_QFrame(QFrame* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_static_cast_QTextEdit_ptr_QObject(QObject* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_static_cast_QTextEdit_ptr_QPaintDevice(QPaintDevice* ptr);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_G_static_cast_QTextEdit_ptr_QWidget(QWidget* ptr);
QT_WIDGETS_C_EXPORT QWidget* qt_widgets_c_QTextEdit_G_static_cast_QWidget_ptr(QTextEdit* ptr);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_acceptRichText(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_anchorAt_to_output(const QTextEdit* this_ptr, const QPoint* pos, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_append(QTextEdit* this_ptr, const QString* text);
QT_WIDGETS_C_EXPORT unsigned int qt_widgets_c_QTextEdit_autoFormatting(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_canPaste(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_clear(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_copy(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT QMenu* qt_widgets_c_QTextEdit_createStandardContextMenu_no_args(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT QMenu* qt_widgets_c_QTextEdit_createStandardContextMenu_position(QTextEdit* this_ptr, const QPoint* position);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_currentCharFormat_to_output(const QTextEdit* this_ptr, QTextCharFormat* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_currentFont_to_output(const QTextEdit* this_ptr, QFont* output);
QT_WIDGETS_C_EXPORT QTextCursor* qt_widgets_c_QTextEdit_cursorForPosition_as_ptr(const QTextEdit* this_ptr, const QPoint* pos);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_cursorRect_to_output_cursor(const QTextEdit* this_ptr, const QTextCursor* cursor, QRect* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_cursorRect_to_output_no_args(const QTextEdit* this_ptr, QRect* output);
QT_WIDGETS_C_EXPORT int qt_widgets_c_QTextEdit_cursorWidth(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_cut(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_delete(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT QTextDocument* qt_widgets_c_QTextEdit_document(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_documentTitle_to_output(const QTextEdit* this_ptr, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_ensureCursorVisible(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_extraSelections_to_output(const QTextEdit* this_ptr, QList< QTextEdit::ExtraSelection >* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_fontFamily_to_output(const QTextEdit* this_ptr, QString* output);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_fontItalic(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT double qt_widgets_c_QTextEdit_fontPointSize(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_fontUnderline(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT int qt_widgets_c_QTextEdit_fontWeight(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_inputMethodQuery_to_output_property(const QTextEdit* this_ptr, const Qt::InputMethodQuery* property, QVariant* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_inputMethodQuery_to_output_query_argument(const QTextEdit* this_ptr, const Qt::InputMethodQuery* query, const QVariant* argument, QVariant* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_insertHtml(QTextEdit* this_ptr, const QString* text);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_insertPlainText(QTextEdit* this_ptr, const QString* text);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_isReadOnly(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_isUndoRedoEnabled(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT int qt_widgets_c_QTextEdit_lineWrapColumnOrWidth(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT QTextEdit::LineWrapMode qt_widgets_c_QTextEdit_lineWrapMode(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_loadResource_to_output(QTextEdit* this_ptr, int type, const QUrl* name, QVariant* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_mergeCurrentCharFormat(QTextEdit* this_ptr, const QTextCharFormat* modifier);
QT_WIDGETS_C_EXPORT const QMetaObject* qt_widgets_c_QTextEdit_metaObject(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_moveCursor_operation(QTextEdit* this_ptr, const QTextCursor::MoveOperation* operation);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_moveCursor_operation_mode(QTextEdit* this_ptr, const QTextCursor::MoveOperation* operation, const QTextCursor::MoveMode* mode);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_new_no_args();
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_new_parent(QWidget* parent);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_new_text(const QString* text);
QT_WIDGETS_C_EXPORT QTextEdit* qt_widgets_c_QTextEdit_new_text_parent(const QString* text, QWidget* parent);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_overwriteMode(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_paste(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_placeholderText_to_output(const QTextEdit* this_ptr, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_print(const QTextEdit* this_ptr, QPagedPaintDevice* printer);
QT_WIDGETS_C_EXPORT int qt_widgets_c_QTextEdit_qt_metacall(QTextEdit* this_ptr, const QMetaObject::Call* arg1, int arg2, void** arg3);
QT_WIDGETS_C_EXPORT void* qt_widgets_c_QTextEdit_qt_metacast(QTextEdit* this_ptr, const char* arg1);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_redo(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_scrollToAnchor(QTextEdit* this_ptr, const QString* name);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_selectAll(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setAcceptRichText(QTextEdit* this_ptr, bool accept);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setAutoFormatting(QTextEdit* this_ptr, unsigned int features);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setCurrentCharFormat(QTextEdit* this_ptr, const QTextCharFormat* format);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setCurrentFont(QTextEdit* this_ptr, const QFont* f);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setCursorWidth(QTextEdit* this_ptr, int width);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setDocument(QTextEdit* this_ptr, QTextDocument* document);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setDocumentTitle(QTextEdit* this_ptr, const QString* title);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setExtraSelections(QTextEdit* this_ptr, const QList< QTextEdit::ExtraSelection >* selections);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setFontFamily(QTextEdit* this_ptr, const QString* fontFamily);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setFontItalic(QTextEdit* this_ptr, bool b);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setFontPointSize(QTextEdit* this_ptr, double s);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setFontUnderline(QTextEdit* this_ptr, bool b);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setFontWeight(QTextEdit* this_ptr, int w);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setHtml(QTextEdit* this_ptr, const QString* text);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setLineWrapColumnOrWidth(QTextEdit* this_ptr, int w);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setLineWrapMode(QTextEdit* this_ptr, QTextEdit::LineWrapMode mode);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setOverwriteMode(QTextEdit* this_ptr, bool overwrite);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setPlaceholderText(QTextEdit* this_ptr, const QString* placeholderText);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setPlainText(QTextEdit* this_ptr, const QString* text);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setReadOnly(QTextEdit* this_ptr, bool ro);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setTabChangesFocus(QTextEdit* this_ptr, bool b);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setTabStopWidth(QTextEdit* this_ptr, int width);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setText(QTextEdit* this_ptr, const QString* text);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setTextBackgroundColor(QTextEdit* this_ptr, const QColor* c);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setTextColor(QTextEdit* this_ptr, const QColor* c);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setTextCursor(QTextEdit* this_ptr, const QTextCursor* cursor);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setUndoRedoEnabled(QTextEdit* this_ptr, bool enable);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_setWordWrapMode(QTextEdit* this_ptr, const QTextOption::WrapMode* policy);
QT_WIDGETS_C_EXPORT bool qt_widgets_c_QTextEdit_tabChangesFocus(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT int qt_widgets_c_QTextEdit_tabStopWidth(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_textBackgroundColor_to_output(const QTextEdit* this_ptr, QColor* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_textColor_to_output(const QTextEdit* this_ptr, QColor* output);
QT_WIDGETS_C_EXPORT QTextCursor* qt_widgets_c_QTextEdit_textCursor_as_ptr(const QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_toHtml_to_output(const QTextEdit* this_ptr, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_toPlainText_to_output(const QTextEdit* this_ptr, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_trUtf8_to_output(const char* s, const char* c, int n, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_tr_to_output(const char* s, const char* c, int n, QString* output);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_undo(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_zoomIn_no_args(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_zoomIn_range(QTextEdit* this_ptr, int range);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_zoomOut_no_args(QTextEdit* this_ptr);
QT_WIDGETS_C_EXPORT void qt_widgets_c_QTextEdit_zoomOut_range(QTextEdit* this_ptr, int range);

} // extern "C"

#endif // QT_WIDGETS_C_QTEXTEDIT_H
