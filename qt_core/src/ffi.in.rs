extern "C" {
  // Header: QAbstractAnimation
  pub fn qt_core_c_QAbstractAnimation_G_dynamic_cast_QAbstractAnimation_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QAbstractAnimation_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QAbstractAnimation_G_static_cast_QObject_ptr(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractAnimation_currentLoop(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractAnimation_currentLoopTime(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractAnimation_currentTime(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractAnimation_delete(this_ptr: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractAnimation_direction(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::abstract_animation::Direction;
  pub fn qt_core_c_QAbstractAnimation_duration(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractAnimation_group(this_ptr: *const ::abstract_animation::AbstractAnimation) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QAbstractAnimation_loopCount(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractAnimation_metaObject(this_ptr: *const ::abstract_animation::AbstractAnimation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractAnimation_pause(this_ptr: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractAnimation_resume(this_ptr: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractAnimation_setCurrentTime(this_ptr: *mut ::abstract_animation::AbstractAnimation, msecs: ::libc::c_int);
  pub fn qt_core_c_QAbstractAnimation_setDirection(this_ptr: *mut ::abstract_animation::AbstractAnimation, direction: ::abstract_animation::Direction);
  pub fn qt_core_c_QAbstractAnimation_setLoopCount(this_ptr: *mut ::abstract_animation::AbstractAnimation, loopCount: ::libc::c_int);
  pub fn qt_core_c_QAbstractAnimation_setPaused(this_ptr: *mut ::abstract_animation::AbstractAnimation, arg1: bool);
  pub fn qt_core_c_QAbstractAnimation_start_no_args(this_ptr: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractAnimation_start_policy(this_ptr: *mut ::abstract_animation::AbstractAnimation, policy: *const ::abstract_animation::DeletionPolicy);
  pub fn qt_core_c_QAbstractAnimation_state(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::abstract_animation::State;
  pub fn qt_core_c_QAbstractAnimation_stop(this_ptr: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractAnimation_totalDuration(this_ptr: *const ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractAnimation_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractAnimation_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAbstractEventDispatcher
  pub fn qt_core_c_QAbstractEventDispatcher_G_dynamic_cast_QAbstractEventDispatcher_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_event_dispatcher::AbstractEventDispatcher;
  pub fn qt_core_c_QAbstractEventDispatcher_G_static_cast_QAbstractEventDispatcher_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_event_dispatcher::AbstractEventDispatcher;
  pub fn qt_core_c_QAbstractEventDispatcher_G_static_cast_QObject_ptr(ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_constructor(id: ::libc::c_int, i: ::libc::c_int, t: *const ::qt::TimerType, output: *mut ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_destructor(this_ptr: *mut ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_interval(this_ptr: *const ::abstract_event_dispatcher::TimerInfo) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_set_interval(this_ptr: *mut ::abstract_event_dispatcher::TimerInfo, value: ::libc::c_int);
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_set_timerId(this_ptr: *mut ::abstract_event_dispatcher::TimerInfo, value: ::libc::c_int);
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_set_timerType(this_ptr: *mut ::abstract_event_dispatcher::TimerInfo, value: *const ::qt::TimerType);
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_timerId(this_ptr: *const ::abstract_event_dispatcher::TimerInfo) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_timerType(this_ptr: *const ::abstract_event_dispatcher::TimerInfo) -> *const ::qt::TimerType;
  pub fn qt_core_c_QAbstractEventDispatcher_TimerInfo_timerType_mut(this_ptr: *mut ::abstract_event_dispatcher::TimerInfo) -> *mut ::qt::TimerType;
  pub fn qt_core_c_QAbstractEventDispatcher_closingDown(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QAbstractEventDispatcher_delete(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QAbstractEventDispatcher_filterNativeEvent(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, eventType: *const ::byte_array::ByteArray, message: *mut ::libc::c_void, result: *mut ::libc::c_long) -> bool;
  pub fn qt_core_c_QAbstractEventDispatcher_flush(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QAbstractEventDispatcher_hasPendingEvents(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher) -> bool;
  pub fn qt_core_c_QAbstractEventDispatcher_installNativeEventFilter(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, filterObj: *mut ::abstract_native_event_filter::AbstractNativeEventFilter);
  pub fn qt_core_c_QAbstractEventDispatcher_instance_no_args() -> *mut ::abstract_event_dispatcher::AbstractEventDispatcher;
  pub fn qt_core_c_QAbstractEventDispatcher_instance_thread(thread: *mut ::thread::Thread) -> *mut ::abstract_event_dispatcher::AbstractEventDispatcher;
  pub fn qt_core_c_QAbstractEventDispatcher_interrupt(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QAbstractEventDispatcher_metaObject(this_ptr: *const ::abstract_event_dispatcher::AbstractEventDispatcher) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractEventDispatcher_registerSocketNotifier(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, notifier: *mut ::socket_notifier::SocketNotifier);
  pub fn qt_core_c_QAbstractEventDispatcher_registerTimer_interval_timerType_object(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, interval: ::libc::c_int, timerType: *const ::qt::TimerType, object: *mut ::object::Object) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractEventDispatcher_registerTimer_timerId_interval_timerType_object(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, timerId: ::libc::c_int, interval: ::libc::c_int, timerType: *const ::qt::TimerType, object: *mut ::object::Object);
  pub fn qt_core_c_QAbstractEventDispatcher_registeredTimers_to_output(this_ptr: *const ::abstract_event_dispatcher::AbstractEventDispatcher, object: *mut ::object::Object, output: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QAbstractEventDispatcher_remainingTime(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, timerId: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractEventDispatcher_removeNativeEventFilter(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, filterObj: *mut ::abstract_native_event_filter::AbstractNativeEventFilter);
  pub fn qt_core_c_QAbstractEventDispatcher_startingUp(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QAbstractEventDispatcher_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractEventDispatcher_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractEventDispatcher_unregisterSocketNotifier(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, notifier: *mut ::socket_notifier::SocketNotifier);
  pub fn qt_core_c_QAbstractEventDispatcher_unregisterTimer(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, timerId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractEventDispatcher_unregisterTimers(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher, object: *mut ::object::Object) -> bool;
  pub fn qt_core_c_QAbstractEventDispatcher_wakeUp(this_ptr: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);

  // Header: QAbstractItemModel
  pub fn qt_core_c_QAbstractItemModel_G_dynamic_cast_QAbstractItemModel_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QAbstractItemModel_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::model_index::ModelIndex, output: *mut ::debug::Debug);
  pub fn qt_core_c_QAbstractItemModel_G_qHash_QModelIndex(index: *const ::model_index::ModelIndex) -> ::libc::c_uint;
  pub fn qt_core_c_QAbstractItemModel_G_qHash_QPersistentModelIndex(index: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_uint;
  pub fn qt_core_c_QAbstractItemModel_G_qHash_QPersistentModelIndex_unsigned_int(index: *const ::persistent_model_index::PersistentModelIndex, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QAbstractItemModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QAbstractItemModel_G_static_cast_QObject_ptr(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractItemModel_G_swap(value1: *mut ::persistent_model_index::PersistentModelIndex, value2: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QAbstractItemModel_buddy_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractItemModel_canDropMimeData(this_ptr: *const ::abstract_item_model::AbstractItemModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_canFetchMore(this_ptr: *const ::abstract_item_model::AbstractItemModel, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_columnCount_no_args(this_ptr: *const ::abstract_item_model::AbstractItemModel) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractItemModel_columnCount_parent(this_ptr: *const ::abstract_item_model::AbstractItemModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractItemModel_data_to_output_index(this_ptr: *const ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractItemModel_data_to_output_index_role(this_ptr: *const ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractItemModel_delete(this_ptr: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_QAbstractItemModel_dropMimeData(this_ptr: *mut ::abstract_item_model::AbstractItemModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_fetchMore(this_ptr: *mut ::abstract_item_model::AbstractItemModel, parent: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractItemModel_hasChildren_no_args(this_ptr: *const ::abstract_item_model::AbstractItemModel) -> bool;
  pub fn qt_core_c_QAbstractItemModel_hasChildren_parent(this_ptr: *const ::abstract_item_model::AbstractItemModel, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_hasIndex_row_column(this_ptr: *const ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, column: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_hasIndex_row_column_parent(this_ptr: *const ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_headerData_to_output_section_orientation(this_ptr: *const ::abstract_item_model::AbstractItemModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractItemModel_headerData_to_output_section_orientation_role(this_ptr: *const ::abstract_item_model::AbstractItemModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractItemModel_index_to_output_row_column(this_ptr: *const ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractItemModel_index_to_output_row_column_parent(this_ptr: *const ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractItemModel_insertColumn_column(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertColumn_column_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertColumns_column_count(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertColumns_column_count_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertRow_row(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertRow_row_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertRows_row_count(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_insertRows_row_count_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_itemData_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, output: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QAbstractItemModel_metaObject(this_ptr: *const ::abstract_item_model::AbstractItemModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractItemModel_mimeData(this_ptr: *const ::abstract_item_model::AbstractItemModel, indexes: *const ::list::ListModelIndex) -> *mut ::mime_data::MimeData;
  pub fn qt_core_c_QAbstractItemModel_mimeTypes_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QAbstractItemModel_moveColumn(this_ptr: *mut ::abstract_item_model::AbstractItemModel, sourceParent: *const ::model_index::ModelIndex, sourceColumn: ::libc::c_int, destinationParent: *const ::model_index::ModelIndex, destinationChild: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_moveColumns(this_ptr: *mut ::abstract_item_model::AbstractItemModel, sourceParent: *const ::model_index::ModelIndex, sourceColumn: ::libc::c_int, count: ::libc::c_int, destinationParent: *const ::model_index::ModelIndex, destinationChild: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_moveRow(this_ptr: *mut ::abstract_item_model::AbstractItemModel, sourceParent: *const ::model_index::ModelIndex, sourceRow: ::libc::c_int, destinationParent: *const ::model_index::ModelIndex, destinationChild: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_moveRows(this_ptr: *mut ::abstract_item_model::AbstractItemModel, sourceParent: *const ::model_index::ModelIndex, sourceRow: ::libc::c_int, count: ::libc::c_int, destinationParent: *const ::model_index::ModelIndex, destinationChild: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_parent_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, child: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractItemModel_removeColumn_column(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeColumn_column_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeColumns_column_count(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeColumns_column_count_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeRow_row(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeRow_row_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeRows_row_count(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_removeRows_row_count_parent(this_ptr: *mut ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractItemModel_revert(this_ptr: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_QAbstractItemModel_roleNames_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, output: *mut ::hash::HashCIntByteArray);
  pub fn qt_core_c_QAbstractItemModel_rowCount_no_args(this_ptr: *const ::abstract_item_model::AbstractItemModel) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractItemModel_rowCount_parent(this_ptr: *const ::abstract_item_model::AbstractItemModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QAbstractItemModel_setData_index_value(this_ptr: *mut ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QAbstractItemModel_setData_index_value_role(this_ptr: *mut ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_setHeaderData_section_orientation_value(this_ptr: *mut ::abstract_item_model::AbstractItemModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QAbstractItemModel_setHeaderData_section_orientation_value_role(this_ptr: *mut ::abstract_item_model::AbstractItemModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractItemModel_setItemData(this_ptr: *mut ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, roles: *const ::map::MapCIntVariant) -> bool;
  pub fn qt_core_c_QAbstractItemModel_sibling_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractItemModel_sort_column(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int);
  pub fn qt_core_c_QAbstractItemModel_sort_column_order(this_ptr: *mut ::abstract_item_model::AbstractItemModel, column: ::libc::c_int, order: *const ::qt::SortOrder);
  pub fn qt_core_c_QAbstractItemModel_span_to_output(this_ptr: *const ::abstract_item_model::AbstractItemModel, index: *const ::model_index::ModelIndex, output: *mut ::size::Size);
  pub fn qt_core_c_QAbstractItemModel_submit(this_ptr: *mut ::abstract_item_model::AbstractItemModel) -> bool;
  pub fn qt_core_c_QAbstractItemModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractItemModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAbstractListModel
  pub fn qt_core_c_QAbstractListModel_G_dynamic_cast_QAbstractListModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::abstract_list_model::AbstractListModel;
  pub fn qt_core_c_QAbstractListModel_G_dynamic_cast_QAbstractListModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::abstract_list_model::AbstractListModel;
  pub fn qt_core_c_QAbstractListModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::abstract_list_model::AbstractListModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QAbstractListModel_G_static_cast_QAbstractListModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::abstract_list_model::AbstractListModel;
  pub fn qt_core_c_QAbstractListModel_G_static_cast_QAbstractListModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::abstract_list_model::AbstractListModel;
  pub fn qt_core_c_QAbstractListModel_G_static_cast_QObject_ptr(ptr: *mut ::abstract_list_model::AbstractListModel) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractListModel_delete(this_ptr: *mut ::abstract_list_model::AbstractListModel);
  pub fn qt_core_c_QAbstractListModel_dropMimeData(this_ptr: *mut ::abstract_list_model::AbstractListModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractListModel_index_to_output_row(this_ptr: *const ::abstract_list_model::AbstractListModel, row: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractListModel_index_to_output_row_column(this_ptr: *const ::abstract_list_model::AbstractListModel, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractListModel_index_to_output_row_column_parent(this_ptr: *const ::abstract_list_model::AbstractListModel, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractListModel_metaObject(this_ptr: *const ::abstract_list_model::AbstractListModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractListModel_sibling_to_output(this_ptr: *const ::abstract_list_model::AbstractListModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractListModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractListModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAbstractNativeEventFilter
  pub fn qt_core_c_QAbstractNativeEventFilter_delete(this_ptr: *mut ::abstract_native_event_filter::AbstractNativeEventFilter);
  pub fn qt_core_c_QAbstractNativeEventFilter_nativeEventFilter(this_ptr: *mut ::abstract_native_event_filter::AbstractNativeEventFilter, eventType: *const ::byte_array::ByteArray, message: *mut ::libc::c_void, result: *mut ::libc::c_long) -> bool;

  // Header: QAbstractProxyModel
  pub fn qt_core_c_QAbstractProxyModel_G_dynamic_cast_QAbstractProxyModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::abstract_proxy_model::AbstractProxyModel;
  pub fn qt_core_c_QAbstractProxyModel_G_dynamic_cast_QAbstractProxyModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::abstract_proxy_model::AbstractProxyModel;
  pub fn qt_core_c_QAbstractProxyModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QAbstractProxyModel_G_static_cast_QAbstractProxyModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::abstract_proxy_model::AbstractProxyModel;
  pub fn qt_core_c_QAbstractProxyModel_G_static_cast_QAbstractProxyModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::abstract_proxy_model::AbstractProxyModel;
  pub fn qt_core_c_QAbstractProxyModel_G_static_cast_QObject_ptr(ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractProxyModel_buddy_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, index: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractProxyModel_canDropMimeData(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_canFetchMore(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_data_to_output_proxyIndex(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, proxyIndex: *const ::model_index::ModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractProxyModel_data_to_output_proxyIndex_role(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, proxyIndex: *const ::model_index::ModelIndex, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractProxyModel_delete(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel);
  pub fn qt_core_c_QAbstractProxyModel_dropMimeData(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_fetchMore(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, parent: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractProxyModel_hasChildren_no_args(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_hasChildren_parent(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_headerData_to_output_section_orientation(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractProxyModel_headerData_to_output_section_orientation_role(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAbstractProxyModel_itemData_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, index: *const ::model_index::ModelIndex, output: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QAbstractProxyModel_mapFromSource_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, sourceIndex: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractProxyModel_mapSelectionFromSource_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, selection: *const ::item_selection::ItemSelection, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QAbstractProxyModel_mapSelectionToSource_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, selection: *const ::item_selection::ItemSelection, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QAbstractProxyModel_mapToSource_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, proxyIndex: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractProxyModel_metaObject(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractProxyModel_mimeData(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, indexes: *const ::list::ListModelIndex) -> *mut ::mime_data::MimeData;
  pub fn qt_core_c_QAbstractProxyModel_mimeTypes_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QAbstractProxyModel_revert(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel);
  pub fn qt_core_c_QAbstractProxyModel_setData_index_value(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_setData_index_value_role(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_setHeaderData_section_orientation_value(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_setHeaderData_section_orientation_value_role(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_setItemData(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, index: *const ::model_index::ModelIndex, roles: *const ::map::MapCIntVariant) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_setSourceModel(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, sourceModel: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_QAbstractProxyModel_sibling_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractProxyModel_sort_column(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, column: ::libc::c_int);
  pub fn qt_core_c_QAbstractProxyModel_sort_column_order(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel, column: ::libc::c_int, order: *const ::qt::SortOrder);
  pub fn qt_core_c_QAbstractProxyModel_sourceModel(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QAbstractProxyModel_span_to_output(this_ptr: *const ::abstract_proxy_model::AbstractProxyModel, index: *const ::model_index::ModelIndex, output: *mut ::size::Size);
  pub fn qt_core_c_QAbstractProxyModel_submit(this_ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> bool;
  pub fn qt_core_c_QAbstractProxyModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractProxyModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAbstractState
  pub fn qt_core_c_QAbstractState_G_dynamic_cast_QAbstractState_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QAbstractState_G_static_cast_QAbstractState_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QAbstractState_G_static_cast_QObject_ptr(ptr: *mut ::abstract_state::AbstractState) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractState_active(this_ptr: *const ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QAbstractState_delete(this_ptr: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QAbstractState_machine(this_ptr: *const ::abstract_state::AbstractState) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QAbstractState_metaObject(this_ptr: *const ::abstract_state::AbstractState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractState_parentState(this_ptr: *const ::abstract_state::AbstractState) -> *mut ::state::State;
  pub fn qt_core_c_QAbstractState_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractState_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAbstractTableModel
  pub fn qt_core_c_QAbstractTableModel_G_dynamic_cast_QAbstractTableModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::abstract_table_model::AbstractTableModel;
  pub fn qt_core_c_QAbstractTableModel_G_dynamic_cast_QAbstractTableModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::abstract_table_model::AbstractTableModel;
  pub fn qt_core_c_QAbstractTableModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::abstract_table_model::AbstractTableModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QAbstractTableModel_G_static_cast_QAbstractTableModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::abstract_table_model::AbstractTableModel;
  pub fn qt_core_c_QAbstractTableModel_G_static_cast_QAbstractTableModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::abstract_table_model::AbstractTableModel;
  pub fn qt_core_c_QAbstractTableModel_G_static_cast_QObject_ptr(ptr: *mut ::abstract_table_model::AbstractTableModel) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractTableModel_delete(this_ptr: *mut ::abstract_table_model::AbstractTableModel);
  pub fn qt_core_c_QAbstractTableModel_dropMimeData(this_ptr: *mut ::abstract_table_model::AbstractTableModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QAbstractTableModel_index_to_output_row_column(this_ptr: *const ::abstract_table_model::AbstractTableModel, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractTableModel_index_to_output_row_column_parent(this_ptr: *const ::abstract_table_model::AbstractTableModel, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractTableModel_metaObject(this_ptr: *const ::abstract_table_model::AbstractTableModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractTableModel_sibling_to_output(this_ptr: *const ::abstract_table_model::AbstractTableModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QAbstractTableModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractTableModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAbstractTransition
  pub fn qt_core_c_QAbstractTransition_G_dynamic_cast_QAbstractTransition_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QAbstractTransition_G_static_cast_QAbstractTransition_ptr(ptr: *mut ::object::Object) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QAbstractTransition_G_static_cast_QObject_ptr(ptr: *mut ::abstract_transition::AbstractTransition) -> *mut ::object::Object;
  pub fn qt_core_c_QAbstractTransition_addAnimation(this_ptr: *mut ::abstract_transition::AbstractTransition, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractTransition_animations_to_output(this_ptr: *const ::abstract_transition::AbstractTransition, output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QAbstractTransition_delete(this_ptr: *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QAbstractTransition_machine(this_ptr: *const ::abstract_transition::AbstractTransition) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QAbstractTransition_metaObject(this_ptr: *const ::abstract_transition::AbstractTransition) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAbstractTransition_removeAnimation(this_ptr: *mut ::abstract_transition::AbstractTransition, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAbstractTransition_setTargetState(this_ptr: *mut ::abstract_transition::AbstractTransition, target: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QAbstractTransition_setTargetStates(this_ptr: *mut ::abstract_transition::AbstractTransition, targets: *const ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QAbstractTransition_setTransitionType(this_ptr: *mut ::abstract_transition::AbstractTransition, type_: ::abstract_transition::TransitionType);
  pub fn qt_core_c_QAbstractTransition_sourceState(this_ptr: *const ::abstract_transition::AbstractTransition) -> *mut ::state::State;
  pub fn qt_core_c_QAbstractTransition_targetState(this_ptr: *const ::abstract_transition::AbstractTransition) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QAbstractTransition_targetStates_to_output(this_ptr: *const ::abstract_transition::AbstractTransition, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QAbstractTransition_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractTransition_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAbstractTransition_transitionType(this_ptr: *const ::abstract_transition::AbstractTransition) -> ::abstract_transition::TransitionType;

  // Header: QAnimationDriver
  pub fn qt_core_c_QAnimationDriver_G_dynamic_cast_QAnimationDriver_ptr(ptr: *mut ::object::Object) -> *mut ::animation_driver::AnimationDriver;
  pub fn qt_core_c_QAnimationDriver_G_static_cast_QAnimationDriver_ptr(ptr: *mut ::object::Object) -> *mut ::animation_driver::AnimationDriver;
  pub fn qt_core_c_QAnimationDriver_G_static_cast_QObject_ptr(ptr: *mut ::animation_driver::AnimationDriver) -> *mut ::object::Object;
  pub fn qt_core_c_QAnimationDriver_advance(this_ptr: *mut ::animation_driver::AnimationDriver);
  pub fn qt_core_c_QAnimationDriver_delete(this_ptr: *mut ::animation_driver::AnimationDriver);
  pub fn qt_core_c_QAnimationDriver_elapsed(this_ptr: *const ::animation_driver::AnimationDriver) -> i64;
  pub fn qt_core_c_QAnimationDriver_install(this_ptr: *mut ::animation_driver::AnimationDriver);
  pub fn qt_core_c_QAnimationDriver_isRunning(this_ptr: *const ::animation_driver::AnimationDriver) -> bool;
  pub fn qt_core_c_QAnimationDriver_metaObject(this_ptr: *const ::animation_driver::AnimationDriver) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAnimationDriver_new_no_args() -> *mut ::animation_driver::AnimationDriver;
  pub fn qt_core_c_QAnimationDriver_new_parent(parent: *mut ::object::Object) -> *mut ::animation_driver::AnimationDriver;
  pub fn qt_core_c_QAnimationDriver_setStartTime(this_ptr: *mut ::animation_driver::AnimationDriver, startTime: i64);
  pub fn qt_core_c_QAnimationDriver_startTime(this_ptr: *const ::animation_driver::AnimationDriver) -> i64;
  pub fn qt_core_c_QAnimationDriver_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAnimationDriver_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAnimationDriver_uninstall(this_ptr: *mut ::animation_driver::AnimationDriver);

  // Header: QAnimationGroup
  pub fn qt_core_c_QAnimationGroup_G_dynamic_cast_QAnimationGroup_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QAnimationGroup_G_dynamic_cast_QAnimationGroup_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QAnimationGroup_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::animation_group::AnimationGroup) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QAnimationGroup_G_static_cast_QAnimationGroup_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QAnimationGroup_G_static_cast_QAnimationGroup_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QAnimationGroup_G_static_cast_QObject_ptr(ptr: *mut ::animation_group::AnimationGroup) -> *mut ::object::Object;
  pub fn qt_core_c_QAnimationGroup_addAnimation(this_ptr: *mut ::animation_group::AnimationGroup, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAnimationGroup_animationAt(this_ptr: *const ::animation_group::AnimationGroup, index: ::libc::c_int) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QAnimationGroup_animationCount(this_ptr: *const ::animation_group::AnimationGroup) -> ::libc::c_int;
  pub fn qt_core_c_QAnimationGroup_clear(this_ptr: *mut ::animation_group::AnimationGroup);
  pub fn qt_core_c_QAnimationGroup_delete(this_ptr: *mut ::animation_group::AnimationGroup);
  pub fn qt_core_c_QAnimationGroup_indexOfAnimation(this_ptr: *const ::animation_group::AnimationGroup, animation: *mut ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QAnimationGroup_insertAnimation(this_ptr: *mut ::animation_group::AnimationGroup, index: ::libc::c_int, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAnimationGroup_metaObject(this_ptr: *const ::animation_group::AnimationGroup) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QAnimationGroup_removeAnimation(this_ptr: *mut ::animation_group::AnimationGroup, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QAnimationGroup_takeAnimation(this_ptr: *mut ::animation_group::AnimationGroup, index: ::libc::c_int) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QAnimationGroup_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QAnimationGroup_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QAssociativeIterable
  pub fn qt_core_c_QAssociativeIterable_begin_to_output(this_ptr: *const ::associative_iterable::AssociativeIterable, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_constructor(other: *const ::associative_iterable::ConstIterator, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_destructor(this_ptr: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_key_to_output(this_ptr: *const ::associative_iterable::ConstIterator, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_add_assign(this_ptr: *mut ::associative_iterable::ConstIterator, j: ::libc::c_int) -> *mut ::associative_iterable::ConstIterator;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_add_to_output(this_ptr: *const ::associative_iterable::ConstIterator, j: ::libc::c_int, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_assign(this_ptr: *mut ::associative_iterable::ConstIterator, other: *const ::associative_iterable::ConstIterator) -> *mut ::associative_iterable::ConstIterator;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_dec(this_ptr: *mut ::associative_iterable::ConstIterator) -> *mut ::associative_iterable::ConstIterator;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_dec_postfix_to_output(this_ptr: *mut ::associative_iterable::ConstIterator, arg1: ::libc::c_int, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_eq(this_ptr: *const ::associative_iterable::ConstIterator, o: *const ::associative_iterable::ConstIterator) -> bool;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_inc(this_ptr: *mut ::associative_iterable::ConstIterator) -> *mut ::associative_iterable::ConstIterator;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_inc_postfix_to_output(this_ptr: *mut ::associative_iterable::ConstIterator, arg1: ::libc::c_int, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_indirection_to_output(this_ptr: *const ::associative_iterable::ConstIterator, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_neq(this_ptr: *const ::associative_iterable::ConstIterator, o: *const ::associative_iterable::ConstIterator) -> bool;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_sub_assign(this_ptr: *mut ::associative_iterable::ConstIterator, j: ::libc::c_int) -> *mut ::associative_iterable::ConstIterator;
  pub fn qt_core_c_QAssociativeIterable_const_iterator_operator_sub_to_output(this_ptr: *const ::associative_iterable::ConstIterator, j: ::libc::c_int, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_const_iterator_value_to_output(this_ptr: *const ::associative_iterable::ConstIterator, output: *mut ::variant::Variant);
  pub fn qt_core_c_QAssociativeIterable_destructor(this_ptr: *mut ::associative_iterable::AssociativeIterable);
  pub fn qt_core_c_QAssociativeIterable_end_to_output(this_ptr: *const ::associative_iterable::AssociativeIterable, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_find_to_output(this_ptr: *const ::associative_iterable::AssociativeIterable, key: *const ::variant::Variant, output: *mut ::associative_iterable::ConstIterator);
  pub fn qt_core_c_QAssociativeIterable_size(this_ptr: *const ::associative_iterable::AssociativeIterable) -> ::libc::c_int;
  pub fn qt_core_c_QAssociativeIterable_value_to_output(this_ptr: *const ::associative_iterable::AssociativeIterable, key: *const ::variant::Variant, output: *mut ::variant::Variant);

  // Header: QBasicMutex
  pub fn qt_core_c_QBasicMutex_delete(this_ptr: *mut ::basic_mutex::BasicMutex);
  pub fn qt_core_c_QBasicMutex_isRecursive(this_ptr: *mut ::basic_mutex::BasicMutex) -> bool;
  pub fn qt_core_c_QBasicMutex_isRecursive_const(this_ptr: *const ::basic_mutex::BasicMutex) -> bool;
  pub fn qt_core_c_QBasicMutex_lock(this_ptr: *mut ::basic_mutex::BasicMutex);
  pub fn qt_core_c_QBasicMutex_tryLock(this_ptr: *mut ::basic_mutex::BasicMutex) -> bool;
  pub fn qt_core_c_QBasicMutex_try_lock(this_ptr: *mut ::basic_mutex::BasicMutex) -> bool;
  pub fn qt_core_c_QBasicMutex_unlock(this_ptr: *mut ::basic_mutex::BasicMutex);

  // Header: QBasicTimer
  pub fn qt_core_c_QBasicTimer_delete(this_ptr: *mut ::basic_timer::BasicTimer);
  pub fn qt_core_c_QBasicTimer_isActive(this_ptr: *const ::basic_timer::BasicTimer) -> bool;
  pub fn qt_core_c_QBasicTimer_new() -> *mut ::basic_timer::BasicTimer;
  pub fn qt_core_c_QBasicTimer_start_msec_obj(this_ptr: *mut ::basic_timer::BasicTimer, msec: ::libc::c_int, obj: *mut ::object::Object);
  pub fn qt_core_c_QBasicTimer_start_msec_timerType_obj(this_ptr: *mut ::basic_timer::BasicTimer, msec: ::libc::c_int, timerType: *const ::qt::TimerType, obj: *mut ::object::Object);
  pub fn qt_core_c_QBasicTimer_stop(this_ptr: *mut ::basic_timer::BasicTimer);
  pub fn qt_core_c_QBasicTimer_timerId(this_ptr: *const ::basic_timer::BasicTimer) -> ::libc::c_int;

  // Header: QBitArray
  pub fn qt_core_c_QBitArray_G_operator_bit_and_to_output(arg1: *const ::bit_array::BitArray, arg2: *const ::bit_array::BitArray, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_G_operator_bit_or_to_output(arg1: *const ::bit_array::BitArray, arg2: *const ::bit_array::BitArray, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_G_operator_bit_xor_to_output(arg1: *const ::bit_array::BitArray, arg2: *const ::bit_array::BitArray, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::bit_array::BitArray, output: *mut ::debug::Debug);
  pub fn qt_core_c_QBitArray_G_swap(value1: *mut ::bit_array::BitArray, value2: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_at(this_ptr: *const ::bit_array::BitArray, i: ::libc::c_int) -> bool;
  pub fn qt_core_c_QBitArray_clear(this_ptr: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_clearBit(this_ptr: *mut ::bit_array::BitArray, i: ::libc::c_int);
  pub fn qt_core_c_QBitArray_constructor_no_args(output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_constructor_other(other: *const ::bit_array::BitArray, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_constructor_size(size: ::libc::c_int, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_constructor_size_val(size: ::libc::c_int, val: bool, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_count_no_args(this_ptr: *const ::bit_array::BitArray) -> ::libc::c_int;
  pub fn qt_core_c_QBitArray_count_on(this_ptr: *const ::bit_array::BitArray, on: bool) -> ::libc::c_int;
  pub fn qt_core_c_QBitArray_destructor(this_ptr: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_fill_val(this_ptr: *mut ::bit_array::BitArray, val: bool) -> bool;
  pub fn qt_core_c_QBitArray_fill_val_first_last(this_ptr: *mut ::bit_array::BitArray, val: bool, first: ::libc::c_int, last: ::libc::c_int);
  pub fn qt_core_c_QBitArray_fill_val_size(this_ptr: *mut ::bit_array::BitArray, val: bool, size: ::libc::c_int) -> bool;
  pub fn qt_core_c_QBitArray_isEmpty(this_ptr: *const ::bit_array::BitArray) -> bool;
  pub fn qt_core_c_QBitArray_isNull(this_ptr: *const ::bit_array::BitArray) -> bool;
  pub fn qt_core_c_QBitArray_operator_assign(this_ptr: *mut ::bit_array::BitArray, other: *const ::bit_array::BitArray) -> *mut ::bit_array::BitArray;
  pub fn qt_core_c_QBitArray_operator_bit_and_assign(this_ptr: *mut ::bit_array::BitArray, arg1: *const ::bit_array::BitArray) -> *mut ::bit_array::BitArray;
  pub fn qt_core_c_QBitArray_operator_bit_not_to_output(this_ptr: *const ::bit_array::BitArray, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_operator_bit_or_assign(this_ptr: *mut ::bit_array::BitArray, arg1: *const ::bit_array::BitArray) -> *mut ::bit_array::BitArray;
  pub fn qt_core_c_QBitArray_operator_bit_xor_assign(this_ptr: *mut ::bit_array::BitArray, arg1: *const ::bit_array::BitArray) -> *mut ::bit_array::BitArray;
  pub fn qt_core_c_QBitArray_operator_eq(this_ptr: *const ::bit_array::BitArray, other: *const ::bit_array::BitArray) -> bool;
  pub fn qt_core_c_QBitArray_operator_index_int(this_ptr: *const ::bit_array::BitArray, i: ::libc::c_int) -> bool;
  pub fn qt_core_c_QBitArray_operator_index_to_output_int(this_ptr: *mut ::bit_array::BitArray, i: ::libc::c_int, output: *mut ::bit_ref::BitRef);
  pub fn qt_core_c_QBitArray_operator_index_to_output_unsigned_int(this_ptr: *mut ::bit_array::BitArray, i: ::libc::c_uint, output: *mut ::bit_ref::BitRef);
  pub fn qt_core_c_QBitArray_operator_index_unsigned_int(this_ptr: *const ::bit_array::BitArray, i: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QBitArray_operator_neq(this_ptr: *const ::bit_array::BitArray, other: *const ::bit_array::BitArray) -> bool;
  pub fn qt_core_c_QBitArray_resize(this_ptr: *mut ::bit_array::BitArray, size: ::libc::c_int);
  pub fn qt_core_c_QBitArray_setBit_i(this_ptr: *mut ::bit_array::BitArray, i: ::libc::c_int);
  pub fn qt_core_c_QBitArray_setBit_i_val(this_ptr: *mut ::bit_array::BitArray, i: ::libc::c_int, val: bool);
  pub fn qt_core_c_QBitArray_size(this_ptr: *const ::bit_array::BitArray) -> ::libc::c_int;
  pub fn qt_core_c_QBitArray_swap(this_ptr: *mut ::bit_array::BitArray, other: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QBitArray_testBit(this_ptr: *const ::bit_array::BitArray, i: ::libc::c_int) -> bool;
  pub fn qt_core_c_QBitArray_toggleBit(this_ptr: *mut ::bit_array::BitArray, i: ::libc::c_int) -> bool;
  pub fn qt_core_c_QBitArray_truncate(this_ptr: *mut ::bit_array::BitArray, pos: ::libc::c_int);

  // Header: QBitRef
  pub fn qt_core_c_QBitRef_convert_to_bool(this_ptr: *const ::bit_ref::BitRef) -> bool;
  pub fn qt_core_c_QBitRef_destructor(this_ptr: *mut ::bit_ref::BitRef);
  pub fn qt_core_c_QBitRef_operator_assign_QBitRef(this_ptr: *mut ::bit_ref::BitRef, val: *const ::bit_ref::BitRef) -> *mut ::bit_ref::BitRef;
  pub fn qt_core_c_QBitRef_operator_assign_bool(this_ptr: *mut ::bit_ref::BitRef, val: bool) -> *mut ::bit_ref::BitRef;
  pub fn qt_core_c_QBitRef_operator_not(this_ptr: *const ::bit_ref::BitRef) -> bool;

  // Header: QBuffer
  pub fn qt_core_c_QBuffer_G_dynamic_cast_QBuffer_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_G_dynamic_cast_QBuffer_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_G_static_cast_QBuffer_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_G_static_cast_QBuffer_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_G_static_cast_QIODevice_ptr(ptr: *mut ::buffer::Buffer) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QBuffer_G_static_cast_QObject_ptr(ptr: *mut ::buffer::Buffer) -> *mut ::object::Object;
  pub fn qt_core_c_QBuffer_atEnd(this_ptr: *const ::buffer::Buffer) -> bool;
  pub fn qt_core_c_QBuffer_buffer(this_ptr: *mut ::buffer::Buffer) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QBuffer_buffer_const(this_ptr: *const ::buffer::Buffer) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QBuffer_canReadLine(this_ptr: *const ::buffer::Buffer) -> bool;
  pub fn qt_core_c_QBuffer_close(this_ptr: *mut ::buffer::Buffer);
  pub fn qt_core_c_QBuffer_data(this_ptr: *const ::buffer::Buffer) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QBuffer_delete(this_ptr: *mut ::buffer::Buffer);
  pub fn qt_core_c_QBuffer_metaObject(this_ptr: *const ::buffer::Buffer) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QBuffer_new_buf(buf: *mut ::byte_array::ByteArray) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_new_buf_parent(buf: *mut ::byte_array::ByteArray, parent: *mut ::object::Object) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_new_no_args() -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_new_parent(parent: *mut ::object::Object) -> *mut ::buffer::Buffer;
  pub fn qt_core_c_QBuffer_open(this_ptr: *mut ::buffer::Buffer, openMode: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QBuffer_pos(this_ptr: *const ::buffer::Buffer) -> i64;
  pub fn qt_core_c_QBuffer_seek(this_ptr: *mut ::buffer::Buffer, off: i64) -> bool;
  pub fn qt_core_c_QBuffer_setBuffer(this_ptr: *mut ::buffer::Buffer, a: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QBuffer_setData_data(this_ptr: *mut ::buffer::Buffer, data: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QBuffer_setData_data_len(this_ptr: *mut ::buffer::Buffer, data: *const ::libc::c_char, len: ::libc::c_int);
  pub fn qt_core_c_QBuffer_size(this_ptr: *const ::buffer::Buffer) -> i64;
  pub fn qt_core_c_QBuffer_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QBuffer_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QByteArray
  pub fn qt_core_c_QByteArray_G_operator_add_to_output_char_const_QByteArray_ref(a1: ::libc::c_char, a2: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_operator_add_to_output_const_QByteArray_ref_char(a1: *const ::byte_array::ByteArray, a2: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_operator_add_to_output_const_QByteArray_ref_const_QByteArray_ref(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_operator_add_to_output_const_QByteArray_ref_const_char_ptr(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_operator_add_to_output_const_char_ptr_const_QByteArray_ref(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_operator_eq_QByteArray_QByteArray(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_eq_QByteArray_char(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_eq_char_QByteArray(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_ge_QByteArray_QByteArray(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_ge_QByteArray_char(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_ge_char_QByteArray(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_gt_QByteArray_QByteArray(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_gt_QByteArray_char(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_gt_char_QByteArray(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_le_QByteArray_QByteArray(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_le_QByteArray_char(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_le_char_QByteArray(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_lt_QByteArray_QByteArray(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_lt_QByteArray_char(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_lt_char_QByteArray(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_neq_QByteArray_QByteArray(a1: *const ::byte_array::ByteArray, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_neq_QByteArray_char(a1: *const ::byte_array::ByteArray, a2: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_neq_char_QByteArray(a1: *const ::libc::c_char, a2: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_G_operator_shl(arg1: *mut ::data_stream::DataStream, arg2: *const ::byte_array::ByteArray) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QByteArray_G_operator_shr(arg1: *mut ::data_stream::DataStream, arg2: *mut ::byte_array::ByteArray) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QByteArray_G_qChecksum_s_len(s: *const ::libc::c_char, len: ::libc::c_uint) -> u16;
  pub fn qt_core_c_QByteArray_G_qChecksum_s_len_standard(s: *const ::libc::c_char, len: ::libc::c_uint, standard: *const ::qt::ChecksumType) -> u16;
  pub fn qt_core_c_QByteArray_G_qCompress_to_output_data(data: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_qCompress_to_output_data_compressionLevel(data: *const ::byte_array::ByteArray, compressionLevel: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_qCompress_to_output_data_nbytes(data: *const ::libc::c_uchar, nbytes: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_qCompress_to_output_data_nbytes_compressionLevel(data: *const ::libc::c_uchar, nbytes: ::libc::c_int, compressionLevel: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_qUncompress_to_output(data: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_G_qstrcmp_QByteArray_QByteArray(str1: *const ::byte_array::ByteArray, str2: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrcmp_QByteArray_char(str1: *const ::byte_array::ByteArray, str2: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrcmp_char_QByteArray(str1: *const ::libc::c_char, str2: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrcmp_char_char(str1: *const ::libc::c_char, str2: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrcpy(dst: *mut ::libc::c_char, src: *const ::libc::c_char) -> *mut ::libc::c_char;
  pub fn qt_core_c_QByteArray_G_qstrdup(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
  pub fn qt_core_c_QByteArray_G_qstricmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrlen(str: *const ::libc::c_char) -> ::libc::c_uint;
  pub fn qt_core_c_QByteArray_G_qstrncmp(str1: *const ::libc::c_char, str2: *const ::libc::c_char, len: ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrncpy(dst: *mut ::libc::c_char, src: *const ::libc::c_char, len: ::libc::c_uint) -> *mut ::libc::c_char;
  pub fn qt_core_c_QByteArray_G_qstrnicmp(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char, len: ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_G_qstrnlen(str: *const ::libc::c_char, maxlen: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QByteArray_G_swap(value1: *mut ::byte_array::ByteArray, value2: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_append_QByteArray_a(this_ptr: *mut ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_append_QString_s(this_ptr: *mut ::byte_array::ByteArray, s: *const ::string::String) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_append_char_c(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_append_char_s(this_ptr: *mut ::byte_array::ByteArray, s: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_append_char_s_int_len(this_ptr: *mut ::byte_array::ByteArray, s: *const ::libc::c_char, len: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_append_int_count_char_c(this_ptr: *mut ::byte_array::ByteArray, count: ::libc::c_int, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_at(this_ptr: *const ::byte_array::ByteArray, i: ::libc::c_int) -> ::libc::c_char;
  pub fn qt_core_c_QByteArray_begin(this_ptr: *mut ::byte_array::ByteArray) -> *mut ::libc::c_char;
  pub fn qt_core_c_QByteArray_begin_const(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_capacity(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_cbegin(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_cend(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_chop(this_ptr: *mut ::byte_array::ByteArray, n: ::libc::c_int);
  pub fn qt_core_c_QByteArray_clear(this_ptr: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_constBegin(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_constData(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_constEnd(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_constructor_QByteArray(arg1: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_constructor_char(arg1: *const ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_constructor_char_int(arg1: *const ::libc::c_char, size: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_constructor_int_char(size: ::libc::c_int, c: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_constructor_no_args(output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_contains_QByteArray_a(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_contains_char_a(this_ptr: *const ::byte_array::ByteArray, a: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_contains_char_c(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_convert_to_const_char_ptr(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_convert_to_const_void_ptr(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_void;
  pub fn qt_core_c_QByteArray_count_QByteArray_a(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_count_char_a(this_ptr: *const ::byte_array::ByteArray, a: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_count_char_c(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_count_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_data(this_ptr: *mut ::byte_array::ByteArray) -> *mut ::libc::c_char;
  pub fn qt_core_c_QByteArray_data_const(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_destructor(this_ptr: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_end(this_ptr: *mut ::byte_array::ByteArray) -> *mut ::libc::c_char;
  pub fn qt_core_c_QByteArray_end_const(this_ptr: *const ::byte_array::ByteArray) -> *const ::libc::c_char;
  pub fn qt_core_c_QByteArray_endsWith_char(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_endsWith_const_QByteArray_ref(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_endsWith_const_char_ptr(this_ptr: *const ::byte_array::ByteArray, c: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_fill_c(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_fill_c_size(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char, size: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_fromBase64_to_output_base64(base64: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_fromBase64_to_output_base64_options(base64: *const ::byte_array::ByteArray, options: ::libc::c_uint, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_fromHex_to_output(hexEncoded: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_fromPercentEncoding_to_output_pctEncoded(pctEncoded: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_fromPercentEncoding_to_output_pctEncoded_percent(pctEncoded: *const ::byte_array::ByteArray, percent: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_fromRawData_to_output(arg1: *const ::libc::c_char, size: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_indexOf_char(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_char_int(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_const_QByteArray_ref(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_const_QByteArray_ref_int(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_const_QString_ref(this_ptr: *const ::byte_array::ByteArray, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_const_QString_ref_int(this_ptr: *const ::byte_array::ByteArray, s: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_const_char_ptr(this_ptr: *const ::byte_array::ByteArray, c: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_indexOf_const_char_ptr_int(this_ptr: *const ::byte_array::ByteArray, c: *const ::libc::c_char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_insert_int_i_QByteArray_a(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, a: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_insert_int_i_QString_s(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, s: *const ::string::String) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_insert_int_i_char_c(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_insert_int_i_char_s(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, s: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_insert_int_i_char_s_int_len(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, s: *const ::libc::c_char, len: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_insert_int_i_int_count_char_c(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, count: ::libc::c_int, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_isEmpty(this_ptr: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_isNull(this_ptr: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_lastIndexOf_char(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_char_int(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_const_QByteArray_ref(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_const_QByteArray_ref_int(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_const_QString_ref(this_ptr: *const ::byte_array::ByteArray, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_const_QString_ref_int(this_ptr: *const ::byte_array::ByteArray, s: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_const_char_ptr(this_ptr: *const ::byte_array::ByteArray, c: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_lastIndexOf_const_char_ptr_int(this_ptr: *const ::byte_array::ByteArray, c: *const ::libc::c_char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_leftJustified_to_output_width(this_ptr: *const ::byte_array::ByteArray, width: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_leftJustified_to_output_width_fill(this_ptr: *const ::byte_array::ByteArray, width: ::libc::c_int, fill: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_leftJustified_to_output_width_fill_truncate(this_ptr: *const ::byte_array::ByteArray, width: ::libc::c_int, fill: ::libc::c_char, truncate: bool, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_left_to_output(this_ptr: *const ::byte_array::ByteArray, len: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_length(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_mid_to_output_index(this_ptr: *const ::byte_array::ByteArray, index: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_mid_to_output_index_len(this_ptr: *const ::byte_array::ByteArray, index: ::libc::c_int, len: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_double(arg1: ::libc::c_double, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_double_char(arg1: ::libc::c_double, f: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_double_char_int(arg1: ::libc::c_double, f: ::libc::c_char, prec: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_int(arg1: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_int_int(arg1: ::libc::c_int, base: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_qlonglong(arg1: i64, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_qlonglong_int(arg1: i64, base: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_qulonglong(arg1: u64, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_qulonglong_int(arg1: u64, base: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_unsigned_int(arg1: ::libc::c_uint, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_number_to_output_unsigned_int_int(arg1: ::libc::c_uint, base: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_operator_add_assign_QByteArray_a(this_ptr: *mut ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_operator_add_assign_QString_s(this_ptr: *mut ::byte_array::ByteArray, s: *const ::string::String) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_operator_add_assign_char_c(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_operator_add_assign_char_s(this_ptr: *mut ::byte_array::ByteArray, s: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_operator_assign_arg1(this_ptr: *mut ::byte_array::ByteArray, arg1: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_operator_assign_str(this_ptr: *mut ::byte_array::ByteArray, str: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_operator_eq(this_ptr: *const ::byte_array::ByteArray, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QByteArray_operator_ge(this_ptr: *const ::byte_array::ByteArray, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QByteArray_operator_gt(this_ptr: *const ::byte_array::ByteArray, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QByteArray_operator_index_int(this_ptr: *const ::byte_array::ByteArray, i: ::libc::c_int) -> ::libc::c_char;
  pub fn qt_core_c_QByteArray_operator_index_to_output_int(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_int, output: *mut ::byte_ref::ByteRef);
  pub fn qt_core_c_QByteArray_operator_index_to_output_unsigned_int(this_ptr: *mut ::byte_array::ByteArray, i: ::libc::c_uint, output: *mut ::byte_ref::ByteRef);
  pub fn qt_core_c_QByteArray_operator_index_unsigned_int(this_ptr: *const ::byte_array::ByteArray, i: ::libc::c_uint) -> ::libc::c_char;
  pub fn qt_core_c_QByteArray_operator_le(this_ptr: *const ::byte_array::ByteArray, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QByteArray_operator_lt(this_ptr: *const ::byte_array::ByteArray, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QByteArray_operator_neq(this_ptr: *const ::byte_array::ByteArray, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QByteArray_prepend_a(this_ptr: *mut ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_prepend_c(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_prepend_count_c(this_ptr: *mut ::byte_array::ByteArray, count: ::libc::c_int, c: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_prepend_s(this_ptr: *mut ::byte_array::ByteArray, s: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_prepend_s_len(this_ptr: *mut ::byte_array::ByteArray, s: *const ::libc::c_char, len: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_push_back_char(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char);
  pub fn qt_core_c_QByteArray_push_back_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, a: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_push_back_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, c: *const ::libc::c_char);
  pub fn qt_core_c_QByteArray_push_front_char(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char);
  pub fn qt_core_c_QByteArray_push_front_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, a: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_push_front_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, c: *const ::libc::c_char);
  pub fn qt_core_c_QByteArray_remove(this_ptr: *mut ::byte_array::ByteArray, index: ::libc::c_int, len: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_repeated_to_output(this_ptr: *const ::byte_array::ByteArray, times: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_replace_char_char(this_ptr: *mut ::byte_array::ByteArray, before: ::libc::c_char, after: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_char_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, before: ::libc::c_char, after: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_char_const_QString_ref(this_ptr: *mut ::byte_array::ByteArray, c: ::libc::c_char, after: *const ::string::String) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_char_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, before: ::libc::c_char, after: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_QByteArray_ref_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, before: *const ::byte_array::ByteArray, after: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_QByteArray_ref_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, before: *const ::byte_array::ByteArray, after: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_QString_ref_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, before: *const ::string::String, after: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_QString_ref_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, before: *const ::string::String, after: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_char_ptr_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, before: *const ::libc::c_char, after: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_char_ptr_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, before: *const ::libc::c_char, after: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_const_char_ptr_int_const_char_ptr_int(this_ptr: *mut ::byte_array::ByteArray, before: *const ::libc::c_char, bsize: ::libc::c_int, after: *const ::libc::c_char, asize: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_int_int_const_QByteArray_ref(this_ptr: *mut ::byte_array::ByteArray, index: ::libc::c_int, len: ::libc::c_int, s: *const ::byte_array::ByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_int_int_const_char_ptr(this_ptr: *mut ::byte_array::ByteArray, index: ::libc::c_int, len: ::libc::c_int, s: *const ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_replace_int_int_const_char_ptr_int(this_ptr: *mut ::byte_array::ByteArray, index: ::libc::c_int, len: ::libc::c_int, s: *const ::libc::c_char, alen: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_reserve(this_ptr: *mut ::byte_array::ByteArray, size: ::libc::c_int);
  pub fn qt_core_c_QByteArray_resize(this_ptr: *mut ::byte_array::ByteArray, size: ::libc::c_int);
  pub fn qt_core_c_QByteArray_rightJustified_to_output_width(this_ptr: *const ::byte_array::ByteArray, width: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_rightJustified_to_output_width_fill(this_ptr: *const ::byte_array::ByteArray, width: ::libc::c_int, fill: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_rightJustified_to_output_width_fill_truncate(this_ptr: *const ::byte_array::ByteArray, width: ::libc::c_int, fill: ::libc::c_char, truncate: bool, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_right_to_output(this_ptr: *const ::byte_array::ByteArray, len: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_setNum_double(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_double) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_double_char(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_double, f: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_double_char_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_double, f: ::libc::c_char, prec: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_float(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_float) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_float_char(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_float, f: ::libc::c_char) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_float_char_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_float, f: ::libc::c_char, prec: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_int_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_int, base: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_qlonglong(this_ptr: *mut ::byte_array::ByteArray, arg1: i64) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_qlonglong_int(this_ptr: *mut ::byte_array::ByteArray, arg1: i64, base: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_qulonglong(this_ptr: *mut ::byte_array::ByteArray, arg1: u64) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_qulonglong_int(this_ptr: *mut ::byte_array::ByteArray, arg1: u64, base: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_short(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_short) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_short_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_short, base: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_unsigned_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_uint) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_unsigned_int_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_uint, base: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_unsigned_short(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_ushort) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setNum_unsigned_short_int(this_ptr: *mut ::byte_array::ByteArray, arg1: ::libc::c_ushort, base: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_setRawData(this_ptr: *mut ::byte_array::ByteArray, a: *const ::libc::c_char, n: ::libc::c_uint) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QByteArray_simplified_to_output(this_ptr: *mut ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_simplified_to_output_const(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_size(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_split_to_output(this_ptr: *const ::byte_array::ByteArray, sep: ::libc::c_char, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QByteArray_squeeze(this_ptr: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_startsWith_char(this_ptr: *const ::byte_array::ByteArray, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_startsWith_const_QByteArray_ref(this_ptr: *const ::byte_array::ByteArray, a: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QByteArray_startsWith_const_char_ptr(this_ptr: *const ::byte_array::ByteArray, c: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteArray_swap(this_ptr: *mut ::byte_array::ByteArray, other: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toBase64_to_output_no_args(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toBase64_to_output_options(this_ptr: *const ::byte_array::ByteArray, options: ::libc::c_uint, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toDouble_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_double;
  pub fn qt_core_c_QByteArray_toDouble_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QByteArray_toFloat_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_float;
  pub fn qt_core_c_QByteArray_toFloat_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_float;
  pub fn qt_core_c_QByteArray_toHex_to_output_no_args(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toHex_to_output_separator(this_ptr: *const ::byte_array::ByteArray, separator: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toInt_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_toInt_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_toInt_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArray_toLongLong_no_args(this_ptr: *const ::byte_array::ByteArray) -> i64;
  pub fn qt_core_c_QByteArray_toLongLong_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> i64;
  pub fn qt_core_c_QByteArray_toLongLong_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> i64;
  pub fn qt_core_c_QByteArray_toLong_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_long;
  pub fn qt_core_c_QByteArray_toLong_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_long;
  pub fn qt_core_c_QByteArray_toLong_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_long;
  pub fn qt_core_c_QByteArray_toLower_to_output(this_ptr: *mut ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toLower_to_output_const(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toPercentEncoding_to_output_exclude(this_ptr: *const ::byte_array::ByteArray, exclude: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toPercentEncoding_to_output_exclude_include(this_ptr: *const ::byte_array::ByteArray, exclude: *const ::byte_array::ByteArray, include: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toPercentEncoding_to_output_exclude_include_percent(this_ptr: *const ::byte_array::ByteArray, exclude: *const ::byte_array::ByteArray, include: *const ::byte_array::ByteArray, percent: ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toPercentEncoding_to_output_no_args(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toShort_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_short;
  pub fn qt_core_c_QByteArray_toShort_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_short;
  pub fn qt_core_c_QByteArray_toShort_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_short;
  pub fn qt_core_c_QByteArray_toUInt_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_uint;
  pub fn qt_core_c_QByteArray_toUInt_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_uint;
  pub fn qt_core_c_QByteArray_toUInt_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QByteArray_toULongLong_no_args(this_ptr: *const ::byte_array::ByteArray) -> u64;
  pub fn qt_core_c_QByteArray_toULongLong_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> u64;
  pub fn qt_core_c_QByteArray_toULongLong_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> u64;
  pub fn qt_core_c_QByteArray_toULong_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_ulong;
  pub fn qt_core_c_QByteArray_toULong_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_ulong;
  pub fn qt_core_c_QByteArray_toULong_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_ulong;
  pub fn qt_core_c_QByteArray_toUShort_no_args(this_ptr: *const ::byte_array::ByteArray) -> ::libc::c_ushort;
  pub fn qt_core_c_QByteArray_toUShort_ok(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool) -> ::libc::c_ushort;
  pub fn qt_core_c_QByteArray_toUShort_ok_base(this_ptr: *const ::byte_array::ByteArray, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_ushort;
  pub fn qt_core_c_QByteArray_toUpper_to_output(this_ptr: *mut ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_toUpper_to_output_const(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_trimmed_to_output(this_ptr: *mut ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_trimmed_to_output_const(this_ptr: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArray_truncate(this_ptr: *mut ::byte_array::ByteArray, pos: ::libc::c_int);

  // Header: QByteArrayMatcher
  pub fn qt_core_c_QByteArrayMatcher_constructor_no_args(output: *mut ::byte_array_matcher::ByteArrayMatcher);
  pub fn qt_core_c_QByteArrayMatcher_constructor_other(other: *const ::byte_array_matcher::ByteArrayMatcher, output: *mut ::byte_array_matcher::ByteArrayMatcher);
  pub fn qt_core_c_QByteArrayMatcher_constructor_pattern(pattern: *const ::byte_array::ByteArray, output: *mut ::byte_array_matcher::ByteArrayMatcher);
  pub fn qt_core_c_QByteArrayMatcher_constructor_pattern_length(pattern: *const ::libc::c_char, length: ::libc::c_int, output: *mut ::byte_array_matcher::ByteArrayMatcher);
  pub fn qt_core_c_QByteArrayMatcher_destructor(this_ptr: *mut ::byte_array_matcher::ByteArrayMatcher);
  pub fn qt_core_c_QByteArrayMatcher_indexIn_ba(this_ptr: *const ::byte_array_matcher::ByteArrayMatcher, ba: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QByteArrayMatcher_indexIn_ba_from(this_ptr: *const ::byte_array_matcher::ByteArrayMatcher, ba: *const ::byte_array::ByteArray, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArrayMatcher_indexIn_str_len(this_ptr: *const ::byte_array_matcher::ByteArrayMatcher, str: *const ::libc::c_char, len: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArrayMatcher_indexIn_str_len_from(this_ptr: *const ::byte_array_matcher::ByteArrayMatcher, str: *const ::libc::c_char, len: ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QByteArrayMatcher_operator_assign(this_ptr: *mut ::byte_array_matcher::ByteArrayMatcher, other: *const ::byte_array_matcher::ByteArrayMatcher) -> *mut ::byte_array_matcher::ByteArrayMatcher;
  pub fn qt_core_c_QByteArrayMatcher_pattern_to_output(this_ptr: *const ::byte_array_matcher::ByteArrayMatcher, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QByteArrayMatcher_setPattern(this_ptr: *mut ::byte_array_matcher::ByteArrayMatcher, pattern: *const ::byte_array::ByteArray);

  // Header: QByteRef
  pub fn qt_core_c_QByteRef_convert_to_char(this_ptr: *const ::byte_ref::ByteRef) -> ::libc::c_char;
  pub fn qt_core_c_QByteRef_destructor(this_ptr: *mut ::byte_ref::ByteRef);
  pub fn qt_core_c_QByteRef_operator_assign_QByteRef(this_ptr: *mut ::byte_ref::ByteRef, c: *const ::byte_ref::ByteRef) -> *mut ::byte_ref::ByteRef;
  pub fn qt_core_c_QByteRef_operator_assign_char(this_ptr: *mut ::byte_ref::ByteRef, c: ::libc::c_char) -> *mut ::byte_ref::ByteRef;
  pub fn qt_core_c_QByteRef_operator_eq(this_ptr: *const ::byte_ref::ByteRef, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteRef_operator_ge(this_ptr: *const ::byte_ref::ByteRef, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteRef_operator_gt(this_ptr: *const ::byte_ref::ByteRef, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteRef_operator_le(this_ptr: *const ::byte_ref::ByteRef, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteRef_operator_lt(this_ptr: *const ::byte_ref::ByteRef, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QByteRef_operator_neq(this_ptr: *const ::byte_ref::ByteRef, c: ::libc::c_char) -> bool;

  // Header: QChar
  pub fn qt_core_c_QChar_G_operator_ge(c1: *const ::char::Char, c2: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_G_operator_gt(c1: *const ::char::Char, c2: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_G_operator_le(c1: *const ::char::Char, c2: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_G_operator_neq(c1: *const ::char::Char, c2: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_G_operator_shl(arg1: *mut ::data_stream::DataStream, arg2: *const ::char::Char) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QChar_G_operator_shr(arg1: *mut ::data_stream::DataStream, arg2: *mut ::char::Char) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QChar_category_no_args(this_ptr: *const ::char::Char) -> ::char::Category;
  pub fn qt_core_c_QChar_category_ucs4(ucs4: ::libc::c_uint) -> ::char::Category;
  pub fn qt_core_c_QChar_cell(this_ptr: *const ::char::Char) -> ::libc::c_uchar;
  pub fn qt_core_c_QChar_combiningClass_no_args(this_ptr: *const ::char::Char) -> ::libc::c_uchar;
  pub fn qt_core_c_QChar_combiningClass_ucs4(ucs4: ::libc::c_uint) -> ::libc::c_uchar;
  pub fn qt_core_c_QChar_constructor_QChar_SpecialCharacter(s: ::char::SpecialCharacter, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_QLatin1Char(ch: *const ::latin1_char::Latin1Char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_char(c: ::libc::c_char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_int(rc: ::libc::c_int, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_no_args(output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_short(rc: ::libc::c_short, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_unsigned_char(c: ::libc::c_uchar, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_unsigned_char_unsigned_char(c: ::libc::c_uchar, r: ::libc::c_uchar, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_unsigned_int(rc: ::libc::c_uint, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_constructor_unsigned_short(rc: ::libc::c_ushort, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_currentUnicodeVersion() -> ::char::UnicodeVersion;
  pub fn qt_core_c_QChar_decompositionTag_no_args(this_ptr: *const ::char::Char) -> ::char::Decomposition;
  pub fn qt_core_c_QChar_decompositionTag_ucs4(ucs4: ::libc::c_uint) -> ::char::Decomposition;
  pub fn qt_core_c_QChar_decomposition_to_output_no_args(this_ptr: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QChar_decomposition_to_output_ucs4(ucs4: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QChar_destructor(this_ptr: *mut ::char::Char);
  pub fn qt_core_c_QChar_digitValue_no_args(this_ptr: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QChar_digitValue_ucs4(ucs4: ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QChar_direction_no_args(this_ptr: *const ::char::Char) -> ::char::Direction;
  pub fn qt_core_c_QChar_direction_ucs4(ucs4: ::libc::c_uint) -> ::char::Direction;
  pub fn qt_core_c_QChar_fromLatin1_to_output(c: ::libc::c_char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_hasMirrored_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_hasMirrored_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_highSurrogate(ucs4: ::libc::c_uint) -> ::libc::c_ushort;
  pub fn qt_core_c_QChar_isDigit_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isDigit_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isHighSurrogate_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isHighSurrogate_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isLetterOrNumber_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isLetterOrNumber_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isLetter_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isLetter_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isLowSurrogate_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isLowSurrogate_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isLower_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isLower_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isMark_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isMark_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isNonCharacter_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isNonCharacter_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isNull(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isNumber_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isNumber_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isPrint_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isPrint_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isPunct_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isPunct_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isSpace_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isSpace_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isSurrogate_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isSurrogate_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isSymbol_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isSymbol_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isTitleCase_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isTitleCase_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_isUpper_no_args(this_ptr: *const ::char::Char) -> bool;
  pub fn qt_core_c_QChar_isUpper_ucs4(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_joiningType_no_args(this_ptr: *const ::char::Char) -> ::char::JoiningType;
  pub fn qt_core_c_QChar_joiningType_ucs4(ucs4: ::libc::c_uint) -> ::char::JoiningType;
  pub fn qt_core_c_QChar_joining_no_args(this_ptr: *const ::char::Char) -> ::char::Joining;
  pub fn qt_core_c_QChar_joining_ucs4(ucs4: ::libc::c_uint) -> ::char::Joining;
  pub fn qt_core_c_QChar_lowSurrogate(ucs4: ::libc::c_uint) -> ::libc::c_ushort;
  pub fn qt_core_c_QChar_mirroredChar(ucs4: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_mirroredChar_to_output(this_ptr: *const ::char::Char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_requiresSurrogates(ucs4: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QChar_row(this_ptr: *const ::char::Char) -> ::libc::c_uchar;
  pub fn qt_core_c_QChar_script_no_args(this_ptr: *const ::char::Char) -> ::char::Script;
  pub fn qt_core_c_QChar_script_ucs4(ucs4: ::libc::c_uint) -> ::char::Script;
  pub fn qt_core_c_QChar_setCell(this_ptr: *mut ::char::Char, acell: ::libc::c_uchar);
  pub fn qt_core_c_QChar_setRow(this_ptr: *mut ::char::Char, arow: ::libc::c_uchar);
  pub fn qt_core_c_QChar_surrogateToUcs4_QChar_QChar(high: *const ::char::Char, low: *const ::char::Char) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_surrogateToUcs4_unsigned_short_unsigned_short(high: ::libc::c_ushort, low: ::libc::c_ushort) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_toCaseFolded(ucs4: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_toCaseFolded_to_output(this_ptr: *const ::char::Char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_toLatin1(this_ptr: *const ::char::Char) -> ::libc::c_char;
  pub fn qt_core_c_QChar_toLower(ucs4: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_toLower_to_output(this_ptr: *const ::char::Char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_toTitleCase(ucs4: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_toTitleCase_to_output(this_ptr: *const ::char::Char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_toUpper(ucs4: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QChar_toUpper_to_output(this_ptr: *const ::char::Char, output: *mut ::char::Char);
  pub fn qt_core_c_QChar_unicode(this_ptr: *mut ::char::Char) -> *mut ::libc::c_ushort;
  pub fn qt_core_c_QChar_unicodeVersion_no_args(this_ptr: *const ::char::Char) -> ::char::UnicodeVersion;
  pub fn qt_core_c_QChar_unicodeVersion_ucs4(ucs4: ::libc::c_uint) -> ::char::UnicodeVersion;
  pub fn qt_core_c_QChar_unicode_const(this_ptr: *const ::char::Char) -> ::libc::c_ushort;

  // Header: QCharRef
  pub fn qt_core_c_QCharRef_cell(this_ptr: *const ::char_ref::CharRef) -> ::libc::c_uchar;
  pub fn qt_core_c_QCharRef_combiningClass(this_ptr: *const ::char_ref::CharRef) -> ::libc::c_uchar;
  pub fn qt_core_c_QCharRef_convert_to_QChar_to_output(this_ptr: *const ::char_ref::CharRef, output: *mut ::char::Char);
  pub fn qt_core_c_QCharRef_decomposition_to_output(this_ptr: *const ::char_ref::CharRef, output: *mut ::string::String);
  pub fn qt_core_c_QCharRef_destructor(this_ptr: *mut ::char_ref::CharRef);
  pub fn qt_core_c_QCharRef_digitValue(this_ptr: *const ::char_ref::CharRef) -> ::libc::c_int;
  pub fn qt_core_c_QCharRef_hasMirrored(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isDigit(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isLetter(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isLetterOrNumber(this_ptr: *mut ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isLower(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isMark(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isNull(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isNumber(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isPrint(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isPunct(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isSpace(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isTitleCase(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_isUpper(this_ptr: *const ::char_ref::CharRef) -> bool;
  pub fn qt_core_c_QCharRef_mirroredChar_to_output(this_ptr: *const ::char_ref::CharRef, output: *mut ::char::Char);
  pub fn qt_core_c_QCharRef_operator_assign_QChar(this_ptr: *mut ::char_ref::CharRef, c: *const ::char::Char) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_QCharRef(this_ptr: *mut ::char_ref::CharRef, c: *const ::char_ref::CharRef) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_char(this_ptr: *mut ::char_ref::CharRef, c: ::libc::c_char) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_int(this_ptr: *mut ::char_ref::CharRef, rc: ::libc::c_int) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_short(this_ptr: *mut ::char_ref::CharRef, rc: ::libc::c_short) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_unsigned_char(this_ptr: *mut ::char_ref::CharRef, c: ::libc::c_uchar) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_unsigned_int(this_ptr: *mut ::char_ref::CharRef, rc: ::libc::c_uint) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_operator_assign_unsigned_short(this_ptr: *mut ::char_ref::CharRef, rc: ::libc::c_ushort) -> *mut ::char_ref::CharRef;
  pub fn qt_core_c_QCharRef_row(this_ptr: *const ::char_ref::CharRef) -> ::libc::c_uchar;
  pub fn qt_core_c_QCharRef_setCell(this_ptr: *mut ::char_ref::CharRef, cell: ::libc::c_uchar);
  pub fn qt_core_c_QCharRef_setRow(this_ptr: *mut ::char_ref::CharRef, row: ::libc::c_uchar);
  pub fn qt_core_c_QCharRef_toLatin1(this_ptr: *const ::char_ref::CharRef) -> ::libc::c_char;
  pub fn qt_core_c_QCharRef_toLower_to_output(this_ptr: *const ::char_ref::CharRef, output: *mut ::char::Char);
  pub fn qt_core_c_QCharRef_toTitleCase_to_output(this_ptr: *const ::char_ref::CharRef, output: *mut ::char::Char);
  pub fn qt_core_c_QCharRef_toUpper_to_output(this_ptr: *const ::char_ref::CharRef, output: *mut ::char::Char);
  pub fn qt_core_c_QCharRef_unicode(this_ptr: *mut ::char_ref::CharRef) -> *mut ::libc::c_ushort;
  pub fn qt_core_c_QCharRef_unicode_const(this_ptr: *const ::char_ref::CharRef) -> ::libc::c_ushort;

  // Header: QChildEvent
  pub fn qt_core_c_QChildEvent_G_dynamic_cast_QChildEvent_ptr(ptr: *mut ::event::Event) -> *mut ::child_event::ChildEvent;
  pub fn qt_core_c_QChildEvent_G_static_cast_QChildEvent_ptr(ptr: *mut ::event::Event) -> *mut ::child_event::ChildEvent;
  pub fn qt_core_c_QChildEvent_G_static_cast_QEvent_ptr(ptr: *mut ::child_event::ChildEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QChildEvent_added(this_ptr: *const ::child_event::ChildEvent) -> bool;
  pub fn qt_core_c_QChildEvent_child(this_ptr: *const ::child_event::ChildEvent) -> *mut ::object::Object;
  pub fn qt_core_c_QChildEvent_delete(this_ptr: *mut ::child_event::ChildEvent);
  pub fn qt_core_c_QChildEvent_new(type_: ::event::Type, child: *mut ::object::Object) -> *mut ::child_event::ChildEvent;
  pub fn qt_core_c_QChildEvent_polished(this_ptr: *const ::child_event::ChildEvent) -> bool;
  pub fn qt_core_c_QChildEvent_removed(this_ptr: *const ::child_event::ChildEvent) -> bool;

  // Header: QCollator
  pub fn qt_core_c_QCollator_G_operator_lt(lhs: *const ::collator_sort_key::CollatorSortKey, rhs: *const ::collator_sort_key::CollatorSortKey) -> bool;
  pub fn qt_core_c_QCollator_G_swap_QCollatorSortKey_QCollatorSortKey(value1: *mut ::collator_sort_key::CollatorSortKey, value2: *mut ::collator_sort_key::CollatorSortKey);
  pub fn qt_core_c_QCollator_G_swap_QCollator_QCollator(value1: *mut ::collator::Collator, value2: *mut ::collator::Collator);
  pub fn qt_core_c_QCollator_compare_QChar_int_QChar_int(this_ptr: *const ::collator::Collator, s1: *const ::char::Char, len1: ::libc::c_int, s2: *const ::char::Char, len2: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QCollator_compare_QStringRef_QStringRef(this_ptr: *const ::collator::Collator, s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QCollator_compare_QString_QString(this_ptr: *const ::collator::Collator, s1: *const ::string::String, s2: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QCollator_constructor_arg1(arg1: *const ::collator::Collator, output: *mut ::collator::Collator);
  pub fn qt_core_c_QCollator_constructor_locale(locale: *const ::locale::Locale, output: *mut ::collator::Collator);
  pub fn qt_core_c_QCollator_constructor_no_args(output: *mut ::collator::Collator);
  pub fn qt_core_c_QCollator_destructor(this_ptr: *mut ::collator::Collator);
  pub fn qt_core_c_QCollator_ignorePunctuation(this_ptr: *const ::collator::Collator) -> bool;
  pub fn qt_core_c_QCollator_locale_to_output(this_ptr: *const ::collator::Collator, output: *mut ::locale::Locale);
  pub fn qt_core_c_QCollator_numericMode(this_ptr: *const ::collator::Collator) -> bool;
  pub fn qt_core_c_QCollator_operator_assign(this_ptr: *mut ::collator::Collator, arg1: *const ::collator::Collator) -> *mut ::collator::Collator;
  pub fn qt_core_c_QCollator_operator_call(this_ptr: *const ::collator::Collator, s1: *const ::string::String, s2: *const ::string::String) -> bool;
  pub fn qt_core_c_QCollator_setCaseSensitivity(this_ptr: *mut ::collator::Collator, cs: *const ::qt::CaseSensitivity);
  pub fn qt_core_c_QCollator_setIgnorePunctuation(this_ptr: *mut ::collator::Collator, on: bool);
  pub fn qt_core_c_QCollator_setLocale(this_ptr: *mut ::collator::Collator, locale: *const ::locale::Locale);
  pub fn qt_core_c_QCollator_setNumericMode(this_ptr: *mut ::collator::Collator, on: bool);
  pub fn qt_core_c_QCollator_sortKey_to_output(this_ptr: *const ::collator::Collator, string: *const ::string::String, output: *mut ::collator_sort_key::CollatorSortKey);
  pub fn qt_core_c_QCollator_swap(this_ptr: *mut ::collator::Collator, other: *mut ::collator::Collator);

  // Header: QCollatorSortKey
  pub fn qt_core_c_QCollatorSortKey_compare(this_ptr: *const ::collator_sort_key::CollatorSortKey, key: *const ::collator_sort_key::CollatorSortKey) -> ::libc::c_int;
  pub fn qt_core_c_QCollatorSortKey_constructor(other: *const ::collator_sort_key::CollatorSortKey, output: *mut ::collator_sort_key::CollatorSortKey);
  pub fn qt_core_c_QCollatorSortKey_destructor(this_ptr: *mut ::collator_sort_key::CollatorSortKey);
  pub fn qt_core_c_QCollatorSortKey_operator_assign(this_ptr: *mut ::collator_sort_key::CollatorSortKey, other: *const ::collator_sort_key::CollatorSortKey) -> *mut ::collator_sort_key::CollatorSortKey;
  pub fn qt_core_c_QCollatorSortKey_swap(this_ptr: *mut ::collator_sort_key::CollatorSortKey, other: *mut ::collator_sort_key::CollatorSortKey);

  // Header: QCommandLineOption
  pub fn qt_core_c_QCommandLineOption_G_swap(value1: *mut ::command_line_option::CommandLineOption, value2: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_name(name: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_name_description(name: *const ::string::String, description: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_name_description_valueName(name: *const ::string::String, description: *const ::string::String, valueName: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_name_description_valueName_defaultValue(name: *const ::string::String, description: *const ::string::String, valueName: *const ::string::String, defaultValue: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_names(names: *const ::string_list::StringList, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_names_description(names: *const ::string_list::StringList, description: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_names_description_valueName(names: *const ::string_list::StringList, description: *const ::string::String, valueName: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_names_description_valueName_defaultValue(names: *const ::string_list::StringList, description: *const ::string::String, valueName: *const ::string::String, defaultValue: *const ::string::String, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_constructor_other(other: *const ::command_line_option::CommandLineOption, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_defaultValues_to_output(this_ptr: *const ::command_line_option::CommandLineOption, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCommandLineOption_description_to_output(this_ptr: *const ::command_line_option::CommandLineOption, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineOption_destructor(this_ptr: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_flags(this_ptr: *const ::command_line_option::CommandLineOption) -> ::libc::c_uint;
  pub fn qt_core_c_QCommandLineOption_isHidden(this_ptr: *const ::command_line_option::CommandLineOption) -> bool;
  pub fn qt_core_c_QCommandLineOption_names_to_output(this_ptr: *const ::command_line_option::CommandLineOption, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCommandLineOption_operator_assign(this_ptr: *mut ::command_line_option::CommandLineOption, other: *const ::command_line_option::CommandLineOption) -> *mut ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QCommandLineOption_setDefaultValue(this_ptr: *mut ::command_line_option::CommandLineOption, defaultValue: *const ::string::String);
  pub fn qt_core_c_QCommandLineOption_setDefaultValues(this_ptr: *mut ::command_line_option::CommandLineOption, defaultValues: *const ::string_list::StringList);
  pub fn qt_core_c_QCommandLineOption_setDescription(this_ptr: *mut ::command_line_option::CommandLineOption, description: *const ::string::String);
  pub fn qt_core_c_QCommandLineOption_setFlags(this_ptr: *mut ::command_line_option::CommandLineOption, aflags: ::libc::c_uint);
  pub fn qt_core_c_QCommandLineOption_setHidden(this_ptr: *mut ::command_line_option::CommandLineOption, hidden: bool);
  pub fn qt_core_c_QCommandLineOption_setValueName(this_ptr: *mut ::command_line_option::CommandLineOption, name: *const ::string::String);
  pub fn qt_core_c_QCommandLineOption_swap(this_ptr: *mut ::command_line_option::CommandLineOption, other: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineOption_valueName_to_output(this_ptr: *const ::command_line_option::CommandLineOption, output: *mut ::string::String);

  // Header: QCommandLineParser
  pub fn qt_core_c_QCommandLineParser_addHelpOption_to_output(this_ptr: *mut ::command_line_parser::CommandLineParser, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineParser_addOption(this_ptr: *mut ::command_line_parser::CommandLineParser, commandLineOption: *const ::command_line_option::CommandLineOption) -> bool;
  pub fn qt_core_c_QCommandLineParser_addOptions(this_ptr: *mut ::command_line_parser::CommandLineParser, options: *const ::list::ListCommandLineOption) -> bool;
  pub fn qt_core_c_QCommandLineParser_addPositionalArgument_name_description(this_ptr: *mut ::command_line_parser::CommandLineParser, name: *const ::string::String, description: *const ::string::String);
  pub fn qt_core_c_QCommandLineParser_addPositionalArgument_name_description_syntax(this_ptr: *mut ::command_line_parser::CommandLineParser, name: *const ::string::String, description: *const ::string::String, syntax: *const ::string::String);
  pub fn qt_core_c_QCommandLineParser_addVersionOption_to_output(this_ptr: *mut ::command_line_parser::CommandLineParser, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QCommandLineParser_applicationDescription_to_output(this_ptr: *const ::command_line_parser::CommandLineParser, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_clearPositionalArguments(this_ptr: *mut ::command_line_parser::CommandLineParser);
  pub fn qt_core_c_QCommandLineParser_constructor(output: *mut ::command_line_parser::CommandLineParser);
  pub fn qt_core_c_QCommandLineParser_destructor(this_ptr: *mut ::command_line_parser::CommandLineParser);
  pub fn qt_core_c_QCommandLineParser_errorText_to_output(this_ptr: *const ::command_line_parser::CommandLineParser, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_helpText_to_output(this_ptr: *const ::command_line_parser::CommandLineParser, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_isSet_name(this_ptr: *const ::command_line_parser::CommandLineParser, name: *const ::string::String) -> bool;
  pub fn qt_core_c_QCommandLineParser_isSet_option(this_ptr: *const ::command_line_parser::CommandLineParser, option: *const ::command_line_option::CommandLineOption) -> bool;
  pub fn qt_core_c_QCommandLineParser_optionNames_to_output(this_ptr: *const ::command_line_parser::CommandLineParser, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCommandLineParser_parse(this_ptr: *mut ::command_line_parser::CommandLineParser, arguments: *const ::string_list::StringList) -> bool;
  pub fn qt_core_c_QCommandLineParser_positionalArguments_to_output(this_ptr: *const ::command_line_parser::CommandLineParser, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCommandLineParser_process_app(this_ptr: *mut ::command_line_parser::CommandLineParser, app: *const ::core_application::CoreApplication);
  pub fn qt_core_c_QCommandLineParser_process_arguments(this_ptr: *mut ::command_line_parser::CommandLineParser, arguments: *const ::string_list::StringList);
  pub fn qt_core_c_QCommandLineParser_setApplicationDescription(this_ptr: *mut ::command_line_parser::CommandLineParser, description: *const ::string::String);
  pub fn qt_core_c_QCommandLineParser_setOptionsAfterPositionalArgumentsMode(this_ptr: *mut ::command_line_parser::CommandLineParser, mode: ::command_line_parser::OptionsAfterPositionalArgumentsMode);
  pub fn qt_core_c_QCommandLineParser_setSingleDashWordOptionMode(this_ptr: *mut ::command_line_parser::CommandLineParser, parsingMode: ::command_line_parser::SingleDashWordOptionMode);
  pub fn qt_core_c_QCommandLineParser_showHelp_exitCode(this_ptr: *mut ::command_line_parser::CommandLineParser, exitCode: ::libc::c_int);
  pub fn qt_core_c_QCommandLineParser_showHelp_no_args(this_ptr: *mut ::command_line_parser::CommandLineParser);
  pub fn qt_core_c_QCommandLineParser_showVersion(this_ptr: *mut ::command_line_parser::CommandLineParser);
  pub fn qt_core_c_QCommandLineParser_trUtf8_to_output(sourceText: *const ::libc::c_char, disambiguation: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_tr_to_output(sourceText: *const ::libc::c_char, disambiguation: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_unknownOptionNames_to_output(this_ptr: *const ::command_line_parser::CommandLineParser, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCommandLineParser_value_to_output_name(this_ptr: *const ::command_line_parser::CommandLineParser, name: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_value_to_output_option(this_ptr: *const ::command_line_parser::CommandLineParser, option: *const ::command_line_option::CommandLineOption, output: *mut ::string::String);
  pub fn qt_core_c_QCommandLineParser_values_to_output_name(this_ptr: *const ::command_line_parser::CommandLineParser, name: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCommandLineParser_values_to_output_option(this_ptr: *const ::command_line_parser::CommandLineParser, option: *const ::command_line_option::CommandLineOption, output: *mut ::string_list::StringList);

  // Header: QConstOverload
  pub fn qt_core_c_QConstOverload_G_qEnvironmentVariableIntValue_varName(varName: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qEnvironmentVariableIntValue_varName_ok(varName: *const ::libc::c_char, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qEnvironmentVariableIsEmpty(varName: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QConstOverload_G_qEnvironmentVariableIsSet(varName: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QConstOverload_G_qFreeAligned(ptr: *mut ::libc::c_void);
  pub fn qt_core_c_QConstOverload_G_qFuzzyCompare_double_double(p1: ::libc::c_double, p2: ::libc::c_double) -> bool;
  pub fn qt_core_c_QConstOverload_G_qFuzzyCompare_float_float(p1: ::libc::c_float, p2: ::libc::c_float) -> bool;
  pub fn qt_core_c_QConstOverload_G_qFuzzyIsNull_d(d: ::libc::c_double) -> bool;
  pub fn qt_core_c_QConstOverload_G_qFuzzyIsNull_f(f: ::libc::c_float) -> bool;
  pub fn qt_core_c_QConstOverload_G_qIntCast_double(f: ::libc::c_double) -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qIntCast_float(f: ::libc::c_float) -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qIsNull_d(d: ::libc::c_double) -> bool;
  pub fn qt_core_c_QConstOverload_G_qIsNull_f(f: ::libc::c_float) -> bool;
  pub fn qt_core_c_QConstOverload_G_qMallocAligned(size: ::libc::c_ulong, alignment: ::libc::c_ulong) -> *mut ::libc::c_void;
  pub fn qt_core_c_QConstOverload_G_qReallocAligned(ptr: *mut ::libc::c_void, size: ::libc::c_ulong, oldsize: ::libc::c_ulong, alignment: ::libc::c_ulong) -> *mut ::libc::c_void;
  pub fn qt_core_c_QConstOverload_G_qRound64_double(d: ::libc::c_double) -> i64;
  pub fn qt_core_c_QConstOverload_G_qRound64_float(d: ::libc::c_float) -> i64;
  pub fn qt_core_c_QConstOverload_G_qRound_double(d: ::libc::c_double) -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qRound_float(d: ::libc::c_float) -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qTerminate();
  pub fn qt_core_c_QConstOverload_G_qVersion() -> *const ::libc::c_char;
  pub fn qt_core_c_QConstOverload_G_qgetenv_to_output(varName: *const ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QConstOverload_G_qputenv(varName: *const ::libc::c_char, value: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QConstOverload_G_qrand() -> ::libc::c_int;
  pub fn qt_core_c_QConstOverload_G_qsrand(seed: ::libc::c_uint);
  pub fn qt_core_c_QConstOverload_G_qtTrId_to_output_id(id: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QConstOverload_G_qtTrId_to_output_id_n(id: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QConstOverload_G_qt_error_string_to_output_errorCode(errorCode: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QConstOverload_G_qt_error_string_to_output_no_args(output: *mut ::string::String);
  pub fn qt_core_c_QConstOverload_G_qunsetenv(varName: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QMacAutoReleasePool_constructor(output: *mut ::const_overload::MacAutoReleasePool);
  pub fn qt_core_c_QMacAutoReleasePool_destructor(this_ptr: *mut ::const_overload::MacAutoReleasePool);

  // Header: QCoreApplication
  pub fn qt_core_c_QCoreApplication_G_dynamic_cast_QCoreApplication_ptr(ptr: *mut ::object::Object) -> *mut ::core_application::CoreApplication;
  pub fn qt_core_c_QCoreApplication_G_qAddPostRoutine(arg1: extern "C" fn());
  pub fn qt_core_c_QCoreApplication_G_qAddPreRoutine(arg1: extern "C" fn());
  pub fn qt_core_c_QCoreApplication_G_qRemovePostRoutine(arg1: extern "C" fn());
  pub fn qt_core_c_QCoreApplication_G_static_cast_QCoreApplication_ptr(ptr: *mut ::object::Object) -> *mut ::core_application::CoreApplication;
  pub fn qt_core_c_QCoreApplication_G_static_cast_QObject_ptr(ptr: *mut ::core_application::CoreApplication) -> *mut ::object::Object;
  pub fn qt_core_c_QCoreApplication_addLibraryPath(arg1: *const ::string::String);
  pub fn qt_core_c_QCoreApplication_applicationDirPath_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_applicationFilePath_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_applicationName_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_applicationPid() -> i64;
  pub fn qt_core_c_QCoreApplication_applicationVersion_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_arguments_to_output(output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCoreApplication_closingDown() -> bool;
  pub fn qt_core_c_QCoreApplication_delete(this_ptr: *mut ::core_application::CoreApplication);
  pub fn qt_core_c_QCoreApplication_eventDispatcher() -> *mut ::abstract_event_dispatcher::AbstractEventDispatcher;
  pub fn qt_core_c_QCoreApplication_exec() -> ::libc::c_int;
  pub fn qt_core_c_QCoreApplication_exit_no_args();
  pub fn qt_core_c_QCoreApplication_exit_retcode(retcode: ::libc::c_int);
  pub fn qt_core_c_QCoreApplication_flush();
  pub fn qt_core_c_QCoreApplication_hasPendingEvents() -> bool;
  pub fn qt_core_c_QCoreApplication_installNativeEventFilter(this_ptr: *mut ::core_application::CoreApplication, filterObj: *mut ::abstract_native_event_filter::AbstractNativeEventFilter);
  pub fn qt_core_c_QCoreApplication_installTranslator(messageFile: *mut ::translator::Translator) -> bool;
  pub fn qt_core_c_QCoreApplication_instance() -> *mut ::core_application::CoreApplication;
  pub fn qt_core_c_QCoreApplication_isQuitLockEnabled() -> bool;
  pub fn qt_core_c_QCoreApplication_isSetuidAllowed() -> bool;
  pub fn qt_core_c_QCoreApplication_libraryPaths_to_output(output: *mut ::string_list::StringList);
  pub fn qt_core_c_QCoreApplication_metaObject(this_ptr: *const ::core_application::CoreApplication) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QCoreApplication_new_argc_argv(argc: *mut ::libc::c_int, argv: *mut *mut ::libc::c_char) -> *mut ::core_application::CoreApplication;
  pub fn qt_core_c_QCoreApplication_new_argc_argv_arg3(argc: *mut ::libc::c_int, argv: *mut *mut ::libc::c_char, arg3: ::libc::c_int) -> *mut ::core_application::CoreApplication;
  pub fn qt_core_c_QCoreApplication_notify(this_ptr: *mut ::core_application::CoreApplication, arg1: *mut ::object::Object, arg2: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QCoreApplication_organizationDomain_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_organizationName_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_postEvent_receiver_event(receiver: *mut ::object::Object, event: *mut ::event::Event);
  pub fn qt_core_c_QCoreApplication_postEvent_receiver_event_priority(receiver: *mut ::object::Object, event: *mut ::event::Event, priority: ::libc::c_int);
  pub fn qt_core_c_QCoreApplication_quit();
  pub fn qt_core_c_QCoreApplication_removeLibraryPath(arg1: *const ::string::String);
  pub fn qt_core_c_QCoreApplication_removeNativeEventFilter(this_ptr: *mut ::core_application::CoreApplication, filterObj: *mut ::abstract_native_event_filter::AbstractNativeEventFilter);
  pub fn qt_core_c_QCoreApplication_removePostedEvents_receiver(receiver: *mut ::object::Object);
  pub fn qt_core_c_QCoreApplication_removePostedEvents_receiver_eventType(receiver: *mut ::object::Object, eventType: ::libc::c_int);
  pub fn qt_core_c_QCoreApplication_removeTranslator(messageFile: *mut ::translator::Translator) -> bool;
  pub fn qt_core_c_QCoreApplication_sendEvent(receiver: *mut ::object::Object, event: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QCoreApplication_sendPostedEvents_no_args();
  pub fn qt_core_c_QCoreApplication_sendPostedEvents_receiver(receiver: *mut ::object::Object);
  pub fn qt_core_c_QCoreApplication_sendPostedEvents_receiver_event_type(receiver: *mut ::object::Object, event_type: ::libc::c_int);
  pub fn qt_core_c_QCoreApplication_setApplicationName(application: *const ::string::String);
  pub fn qt_core_c_QCoreApplication_setApplicationVersion(version: *const ::string::String);
  pub fn qt_core_c_QCoreApplication_setAttribute_attribute(attribute: *const ::qt::ApplicationAttribute);
  pub fn qt_core_c_QCoreApplication_setAttribute_attribute_on(attribute: *const ::qt::ApplicationAttribute, on: bool);
  pub fn qt_core_c_QCoreApplication_setEventDispatcher(eventDispatcher: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QCoreApplication_setLibraryPaths(arg1: *const ::string_list::StringList);
  pub fn qt_core_c_QCoreApplication_setOrganizationDomain(orgDomain: *const ::string::String);
  pub fn qt_core_c_QCoreApplication_setOrganizationName(orgName: *const ::string::String);
  pub fn qt_core_c_QCoreApplication_setQuitLockEnabled(enabled: bool);
  pub fn qt_core_c_QCoreApplication_setSetuidAllowed(allow: bool);
  pub fn qt_core_c_QCoreApplication_startingUp() -> bool;
  pub fn qt_core_c_QCoreApplication_testAttribute(attribute: *const ::qt::ApplicationAttribute) -> bool;
  pub fn qt_core_c_QCoreApplication_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_translate_to_output_context_key(context: *const ::libc::c_char, key: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_translate_to_output_context_key_disambiguation(context: *const ::libc::c_char, key: *const ::libc::c_char, disambiguation: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QCoreApplication_translate_to_output_context_key_disambiguation_n(context: *const ::libc::c_char, key: *const ::libc::c_char, disambiguation: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QCryptographicHash
  pub fn qt_core_c_QCryptographicHash_addData_data(this_ptr: *mut ::cryptographic_hash::CryptographicHash, data: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QCryptographicHash_addData_data_length(this_ptr: *mut ::cryptographic_hash::CryptographicHash, data: *const ::libc::c_char, length: ::libc::c_int);
  pub fn qt_core_c_QCryptographicHash_addData_device(this_ptr: *mut ::cryptographic_hash::CryptographicHash, device: *mut ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QCryptographicHash_constructor(method: ::cryptographic_hash::Algorithm, output: *mut ::cryptographic_hash::CryptographicHash);
  pub fn qt_core_c_QCryptographicHash_destructor(this_ptr: *mut ::cryptographic_hash::CryptographicHash);
  pub fn qt_core_c_QCryptographicHash_hash_to_output(data: *const ::byte_array::ByteArray, method: ::cryptographic_hash::Algorithm, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QCryptographicHash_reset(this_ptr: *mut ::cryptographic_hash::CryptographicHash);
  pub fn qt_core_c_QCryptographicHash_result_to_output(this_ptr: *const ::cryptographic_hash::CryptographicHash, output: *mut ::byte_array::ByteArray);

  // Header: QDataStream
  pub fn qt_core_c_QDataStream_abortTransaction(this_ptr: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_atEnd(this_ptr: *const ::data_stream::DataStream) -> bool;
  pub fn qt_core_c_QDataStream_byteOrder(this_ptr: *const ::data_stream::DataStream) -> ::data_stream::ByteOrder;
  pub fn qt_core_c_QDataStream_commitTransaction(this_ptr: *mut ::data_stream::DataStream) -> bool;
  pub fn qt_core_c_QDataStream_constructor_QByteArray(arg1: *const ::byte_array::ByteArray, output: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_constructor_QIODevice(arg1: *mut ::io_device::IODevice, output: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_constructor_no_args(output: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_destructor(this_ptr: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_device(this_ptr: *const ::data_stream::DataStream) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QDataStream_floatingPointPrecision(this_ptr: *const ::data_stream::DataStream) -> ::data_stream::FloatingPointPrecision;
  pub fn qt_core_c_QDataStream_operator_shl_bool(this_ptr: *mut ::data_stream::DataStream, i: bool) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_char(this_ptr: *mut ::data_stream::DataStream, str: *const ::libc::c_char) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_double(this_ptr: *mut ::data_stream::DataStream, f: ::libc::c_double) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_float(this_ptr: *mut ::data_stream::DataStream, f: ::libc::c_float) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_qint16(this_ptr: *mut ::data_stream::DataStream, i: i16) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_qint32(this_ptr: *mut ::data_stream::DataStream, i: i32) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_qint64(this_ptr: *mut ::data_stream::DataStream, i: i64) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_qint8(this_ptr: *mut ::data_stream::DataStream, i: i8) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_quint16(this_ptr: *mut ::data_stream::DataStream, i: u16) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_quint32(this_ptr: *mut ::data_stream::DataStream, i: u32) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_quint64(this_ptr: *mut ::data_stream::DataStream, i: u64) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shl_quint8(this_ptr: *mut ::data_stream::DataStream, i: u8) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_bool(this_ptr: *mut ::data_stream::DataStream, i: *mut bool) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_char(this_ptr: *mut ::data_stream::DataStream, str: *mut *mut ::libc::c_char) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_double(this_ptr: *mut ::data_stream::DataStream, f: *mut ::libc::c_double) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_float(this_ptr: *mut ::data_stream::DataStream, f: *mut ::libc::c_float) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_qint16(this_ptr: *mut ::data_stream::DataStream, i: *mut i16) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_qint32(this_ptr: *mut ::data_stream::DataStream, i: *mut i32) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_qint64(this_ptr: *mut ::data_stream::DataStream, i: *mut i64) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_qint8(this_ptr: *mut ::data_stream::DataStream, i: *mut i8) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_quint16(this_ptr: *mut ::data_stream::DataStream, i: *mut u16) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_quint32(this_ptr: *mut ::data_stream::DataStream, i: *mut u32) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_quint64(this_ptr: *mut ::data_stream::DataStream, i: *mut u64) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_operator_shr_quint8(this_ptr: *mut ::data_stream::DataStream, i: *mut u8) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_readBytes(this_ptr: *mut ::data_stream::DataStream, arg1: *mut *mut ::libc::c_char, len: *mut ::libc::c_uint) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_readRawData(this_ptr: *mut ::data_stream::DataStream, arg1: *mut ::libc::c_char, len: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QDataStream_resetStatus(this_ptr: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_rollbackTransaction(this_ptr: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_setByteOrder(this_ptr: *mut ::data_stream::DataStream, arg1: ::data_stream::ByteOrder);
  pub fn qt_core_c_QDataStream_setDevice(this_ptr: *mut ::data_stream::DataStream, arg1: *mut ::io_device::IODevice);
  pub fn qt_core_c_QDataStream_setFloatingPointPrecision(this_ptr: *mut ::data_stream::DataStream, precision: ::data_stream::FloatingPointPrecision);
  pub fn qt_core_c_QDataStream_setStatus(this_ptr: *mut ::data_stream::DataStream, status: ::data_stream::Status);
  pub fn qt_core_c_QDataStream_setVersion(this_ptr: *mut ::data_stream::DataStream, arg1: ::libc::c_int);
  pub fn qt_core_c_QDataStream_skipRawData(this_ptr: *mut ::data_stream::DataStream, len: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QDataStream_startTransaction(this_ptr: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_status(this_ptr: *const ::data_stream::DataStream) -> ::data_stream::Status;
  pub fn qt_core_c_QDataStream_unsetDevice(this_ptr: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QDataStream_version(this_ptr: *const ::data_stream::DataStream) -> ::libc::c_int;
  pub fn qt_core_c_QDataStream_writeBytes(this_ptr: *mut ::data_stream::DataStream, arg1: *const ::libc::c_char, len: ::libc::c_uint) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QDataStream_writeRawData(this_ptr: *mut ::data_stream::DataStream, arg1: *const ::libc::c_char, len: ::libc::c_int) -> ::libc::c_int;

  // Header: QDate
  pub fn qt_core_c_QDate_addDays_to_output(this_ptr: *const ::date::Date, days: i64, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_addMonths_to_output(this_ptr: *const ::date::Date, months: ::libc::c_int, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_addYears_to_output(this_ptr: *const ::date::Date, years: ::libc::c_int, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_constructor_no_args(output: *mut ::date::Date);
  pub fn qt_core_c_QDate_constructor_y_m_d(y: ::libc::c_int, m: ::libc::c_int, d: ::libc::c_int, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_currentDate_to_output(output: *mut ::date::Date);
  pub fn qt_core_c_QDate_day(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_dayOfWeek(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_dayOfYear(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_daysInMonth(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_daysInYear(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_daysTo(this_ptr: *const ::date::Date, arg1: *const ::date::Date) -> i64;
  pub fn qt_core_c_QDate_destructor(this_ptr: *mut ::date::Date);
  pub fn qt_core_c_QDate_fromJulianDay_to_output(jd_: i64, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_fromString_to_output_s(s: *const ::string::String, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_fromString_to_output_s_f(s: *const ::string::String, f: *const ::qt::DateFormat, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_fromString_to_output_s_format(s: *const ::string::String, format: *const ::string::String, output: *mut ::date::Date);
  pub fn qt_core_c_QDate_getDate(this_ptr: *mut ::date::Date, year: *mut ::libc::c_int, month: *mut ::libc::c_int, day: *mut ::libc::c_int);
  pub fn qt_core_c_QDate_getDate_const(this_ptr: *const ::date::Date, year: *mut ::libc::c_int, month: *mut ::libc::c_int, day: *mut ::libc::c_int);
  pub fn qt_core_c_QDate_isLeapYear(year: ::libc::c_int) -> bool;
  pub fn qt_core_c_QDate_isNull(this_ptr: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_isValid_no_args(this_ptr: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_isValid_y_m_d(y: ::libc::c_int, m: ::libc::c_int, d: ::libc::c_int) -> bool;
  pub fn qt_core_c_QDate_longDayName_to_output_weekday(weekday: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QDate_longDayName_to_output_weekday_type(weekday: ::libc::c_int, type_: ::date::MonthNameType, output: *mut ::string::String);
  pub fn qt_core_c_QDate_longMonthName_to_output_month(month: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QDate_longMonthName_to_output_month_type(month: ::libc::c_int, type_: ::date::MonthNameType, output: *mut ::string::String);
  pub fn qt_core_c_QDate_month(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_operator_eq(this_ptr: *const ::date::Date, other: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_operator_ge(this_ptr: *const ::date::Date, other: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_operator_gt(this_ptr: *const ::date::Date, other: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_operator_le(this_ptr: *const ::date::Date, other: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_operator_lt(this_ptr: *const ::date::Date, other: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_operator_neq(this_ptr: *const ::date::Date, other: *const ::date::Date) -> bool;
  pub fn qt_core_c_QDate_setDate(this_ptr: *mut ::date::Date, year: ::libc::c_int, month: ::libc::c_int, day: ::libc::c_int) -> bool;
  pub fn qt_core_c_QDate_shortDayName_to_output_weekday(weekday: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QDate_shortDayName_to_output_weekday_type(weekday: ::libc::c_int, type_: ::date::MonthNameType, output: *mut ::string::String);
  pub fn qt_core_c_QDate_shortMonthName_to_output_month(month: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QDate_shortMonthName_to_output_month_type(month: ::libc::c_int, type_: ::date::MonthNameType, output: *mut ::string::String);
  pub fn qt_core_c_QDate_toJulianDay(this_ptr: *const ::date::Date) -> i64;
  pub fn qt_core_c_QDate_toString_to_output_f(this_ptr: *const ::date::Date, f: *const ::qt::DateFormat, output: *mut ::string::String);
  pub fn qt_core_c_QDate_toString_to_output_format(this_ptr: *const ::date::Date, format: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDate_toString_to_output_no_args(this_ptr: *const ::date::Date, output: *mut ::string::String);
  pub fn qt_core_c_QDate_weekNumber_no_args(this_ptr: *const ::date::Date) -> ::libc::c_int;
  pub fn qt_core_c_QDate_weekNumber_yearNum(this_ptr: *const ::date::Date, yearNum: *mut ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QDate_year(this_ptr: *const ::date::Date) -> ::libc::c_int;

  // Header: QDateTime
  pub fn qt_core_c_QDateTime_G_operator_shl_to_output_QDebug_QDate(arg1: *const ::debug::Debug, arg2: *const ::date::Date, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDateTime_G_operator_shl_to_output_QDebug_QTime(arg1: *const ::debug::Debug, arg2: *const ::time::Time, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDateTime_G_qHash_QDate(key: *const ::date::Date) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_G_qHash_QDateTime(key: *const ::date_time::DateTime) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_G_qHash_QDateTime_unsigned_int(key: *const ::date_time::DateTime, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_G_qHash_QDate_unsigned_int(key: *const ::date::Date, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_G_qHash_QTime(key: *const ::time::Time) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_G_qHash_QTime_unsigned_int(key: *const ::time::Time, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_G_swap(value1: *mut ::date_time::DateTime, value2: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_addDays_to_output(this_ptr: *const ::date_time::DateTime, days: i64, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_addMSecs_to_output(this_ptr: *const ::date_time::DateTime, msecs: i64, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_addMonths_to_output(this_ptr: *const ::date_time::DateTime, months: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_addSecs_to_output(this_ptr: *const ::date_time::DateTime, secs: i64, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_addYears_to_output(this_ptr: *const ::date_time::DateTime, years: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_arg1(arg1: *const ::date::Date, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_arg1_arg2(arg1: *const ::date::Date, arg2: *const ::time::Time, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_arg1_arg2_spec(arg1: *const ::date::Date, arg2: *const ::time::Time, spec: *const ::qt::TimeSpec, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_date_time_spec_offsetSeconds(date: *const ::date::Date, time: *const ::time::Time, spec: *const ::qt::TimeSpec, offsetSeconds: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_date_time_timeZone(date: *const ::date::Date, time: *const ::time::Time, timeZone: *const ::time_zone::TimeZone, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_no_args(output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_constructor_other(other: *const ::date_time::DateTime, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_currentDateTimeUtc_to_output(output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_currentDateTime_to_output(output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_currentMSecsSinceEpoch() -> i64;
  pub fn qt_core_c_QDateTime_currentSecsSinceEpoch() -> i64;
  pub fn qt_core_c_QDateTime_date_to_output(this_ptr: *const ::date_time::DateTime, output: *mut ::date::Date);
  pub fn qt_core_c_QDateTime_daysTo(this_ptr: *const ::date_time::DateTime, arg1: *const ::date_time::DateTime) -> i64;
  pub fn qt_core_c_QDateTime_destructor(this_ptr: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromMSecsSinceEpoch_to_output_msecs(msecs: i64, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromMSecsSinceEpoch_to_output_msecs_spec(msecs: i64, spec: *const ::qt::TimeSpec, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromMSecsSinceEpoch_to_output_msecs_spec_offsetFromUtc(msecs: i64, spec: *const ::qt::TimeSpec, offsetFromUtc: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromMSecsSinceEpoch_to_output_msecs_timeZone(msecs: i64, timeZone: *const ::time_zone::TimeZone, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromSecsSinceEpoch_to_output_secs(secs: i64, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromSecsSinceEpoch_to_output_secs_spe(secs: i64, spe: *const ::qt::TimeSpec, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromSecsSinceEpoch_to_output_secs_spe_offsetFromUtc(secs: i64, spe: *const ::qt::TimeSpec, offsetFromUtc: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromSecsSinceEpoch_to_output_secs_timeZone(secs: i64, timeZone: *const ::time_zone::TimeZone, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromString_to_output_s(s: *const ::string::String, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromString_to_output_s_f(s: *const ::string::String, f: *const ::qt::DateFormat, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromString_to_output_s_format(s: *const ::string::String, format: *const ::string::String, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromTime_t_to_output_secsSince1Jan1970UTC(secsSince1Jan1970UTC: ::libc::c_uint, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromTime_t_to_output_secsSince1Jan1970UTC_spec(secsSince1Jan1970UTC: ::libc::c_uint, spec: *const ::qt::TimeSpec, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromTime_t_to_output_secsSince1Jan1970UTC_spec_offsetFromUtc(secsSince1Jan1970UTC: ::libc::c_uint, spec: *const ::qt::TimeSpec, offsetFromUtc: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_fromTime_t_to_output_secsSince1Jan1970UTC_timeZone(secsSince1Jan1970UTC: ::libc::c_uint, timeZone: *const ::time_zone::TimeZone, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_isDaylightTime(this_ptr: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_isNull(this_ptr: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_isValid(this_ptr: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_msecsTo(this_ptr: *const ::date_time::DateTime, arg1: *const ::date_time::DateTime) -> i64;
  pub fn qt_core_c_QDateTime_offsetFromUtc(this_ptr: *const ::date_time::DateTime) -> ::libc::c_int;
  pub fn qt_core_c_QDateTime_operator_assign(this_ptr: *mut ::date_time::DateTime, other: *const ::date_time::DateTime) -> *mut ::date_time::DateTime;
  pub fn qt_core_c_QDateTime_operator_eq(this_ptr: *const ::date_time::DateTime, other: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_operator_ge(this_ptr: *const ::date_time::DateTime, other: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_operator_gt(this_ptr: *const ::date_time::DateTime, other: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_operator_le(this_ptr: *const ::date_time::DateTime, other: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_operator_lt(this_ptr: *const ::date_time::DateTime, other: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_operator_neq(this_ptr: *const ::date_time::DateTime, other: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QDateTime_secsTo(this_ptr: *const ::date_time::DateTime, arg1: *const ::date_time::DateTime) -> i64;
  pub fn qt_core_c_QDateTime_setDate(this_ptr: *mut ::date_time::DateTime, date: *const ::date::Date);
  pub fn qt_core_c_QDateTime_setMSecsSinceEpoch(this_ptr: *mut ::date_time::DateTime, msecs: i64);
  pub fn qt_core_c_QDateTime_setOffsetFromUtc(this_ptr: *mut ::date_time::DateTime, offsetSeconds: ::libc::c_int);
  pub fn qt_core_c_QDateTime_setSecsSinceEpoch(this_ptr: *mut ::date_time::DateTime, secs: i64);
  pub fn qt_core_c_QDateTime_setTime(this_ptr: *mut ::date_time::DateTime, time: *const ::time::Time);
  pub fn qt_core_c_QDateTime_setTimeSpec(this_ptr: *mut ::date_time::DateTime, spec: *const ::qt::TimeSpec);
  pub fn qt_core_c_QDateTime_setTimeZone(this_ptr: *mut ::date_time::DateTime, toZone: *const ::time_zone::TimeZone);
  pub fn qt_core_c_QDateTime_setTime_t(this_ptr: *mut ::date_time::DateTime, secsSince1Jan1970UTC: ::libc::c_uint);
  pub fn qt_core_c_QDateTime_setUtcOffset(this_ptr: *mut ::date_time::DateTime, seconds: ::libc::c_int);
  pub fn qt_core_c_QDateTime_swap(this_ptr: *mut ::date_time::DateTime, other: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_timeZoneAbbreviation_to_output(this_ptr: *const ::date_time::DateTime, output: *mut ::string::String);
  pub fn qt_core_c_QDateTime_timeZone_to_output(this_ptr: *const ::date_time::DateTime, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QDateTime_time_to_output(this_ptr: *const ::date_time::DateTime, output: *mut ::time::Time);
  pub fn qt_core_c_QDateTime_toLocalTime_to_output(this_ptr: *const ::date_time::DateTime, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_toMSecsSinceEpoch(this_ptr: *const ::date_time::DateTime) -> i64;
  pub fn qt_core_c_QDateTime_toOffsetFromUtc_to_output(this_ptr: *const ::date_time::DateTime, offsetSeconds: ::libc::c_int, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_toSecsSinceEpoch(this_ptr: *const ::date_time::DateTime) -> i64;
  pub fn qt_core_c_QDateTime_toString_to_output_f(this_ptr: *const ::date_time::DateTime, f: *const ::qt::DateFormat, output: *mut ::string::String);
  pub fn qt_core_c_QDateTime_toString_to_output_format(this_ptr: *const ::date_time::DateTime, format: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDateTime_toString_to_output_no_args(this_ptr: *const ::date_time::DateTime, output: *mut ::string::String);
  pub fn qt_core_c_QDateTime_toTimeSpec_to_output(this_ptr: *const ::date_time::DateTime, spec: *const ::qt::TimeSpec, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_toTimeZone_to_output(this_ptr: *const ::date_time::DateTime, toZone: *const ::time_zone::TimeZone, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_toTime_t(this_ptr: *const ::date_time::DateTime) -> ::libc::c_uint;
  pub fn qt_core_c_QDateTime_toUTC_to_output(this_ptr: *const ::date_time::DateTime, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QDateTime_utcOffset(this_ptr: *const ::date_time::DateTime) -> ::libc::c_int;

  // Header: QDeadlineTimer
  pub fn qt_core_c_QDeadlineTimer_G_swap(value1: *mut ::deadline_timer::DeadlineTimer, value2: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_addNSecs_to_output(dt: *const ::deadline_timer::DeadlineTimer, nsecs: i64, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_constructor_arg1(arg1: ::deadline_timer::ForeverConstant, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_constructor_arg1_type_(arg1: ::deadline_timer::ForeverConstant, type_: *const ::qt::TimerType, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_constructor_msecs(msecs: i64, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_constructor_msecs_type(msecs: i64, type_: *const ::qt::TimerType, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_constructor_no_args(output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_constructor_type_(type_: *const ::qt::TimerType, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_current_to_output_no_args(output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_current_to_output_timerType(timerType: *const ::qt::TimerType, output: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_deadline(this_ptr: *const ::deadline_timer::DeadlineTimer) -> i64;
  pub fn qt_core_c_QDeadlineTimer_deadlineNSecs(this_ptr: *const ::deadline_timer::DeadlineTimer) -> i64;
  pub fn qt_core_c_QDeadlineTimer_destructor(this_ptr: *mut ::deadline_timer::DeadlineTimer);
  pub fn qt_core_c_QDeadlineTimer_hasExpired(this_ptr: *const ::deadline_timer::DeadlineTimer) -> bool;
  pub fn qt_core_c_QDeadlineTimer_isForever(this_ptr: *const ::deadline_timer::DeadlineTimer) -> bool;
  pub fn qt_core_c_QDeadlineTimer_operator_add_assign(this_ptr: *mut ::deadline_timer::DeadlineTimer, msecs: i64) -> *mut ::deadline_timer::DeadlineTimer;
  pub fn qt_core_c_QDeadlineTimer_operator_sub_assign(this_ptr: *mut ::deadline_timer::DeadlineTimer, msecs: i64) -> *mut ::deadline_timer::DeadlineTimer;
  pub fn qt_core_c_QDeadlineTimer_remainingTime(this_ptr: *const ::deadline_timer::DeadlineTimer) -> i64;
  pub fn qt_core_c_QDeadlineTimer_remainingTimeNSecs(this_ptr: *const ::deadline_timer::DeadlineTimer) -> i64;
  pub fn qt_core_c_QDeadlineTimer_setDeadline_msecs(this_ptr: *mut ::deadline_timer::DeadlineTimer, msecs: i64);
  pub fn qt_core_c_QDeadlineTimer_setDeadline_msecs_timerType(this_ptr: *mut ::deadline_timer::DeadlineTimer, msecs: i64, timerType: *const ::qt::TimerType);
  pub fn qt_core_c_QDeadlineTimer_setPreciseDeadline_secs(this_ptr: *mut ::deadline_timer::DeadlineTimer, secs: i64);
  pub fn qt_core_c_QDeadlineTimer_setPreciseDeadline_secs_nsecs(this_ptr: *mut ::deadline_timer::DeadlineTimer, secs: i64, nsecs: i64);
  pub fn qt_core_c_QDeadlineTimer_setPreciseDeadline_secs_nsecs_type(this_ptr: *mut ::deadline_timer::DeadlineTimer, secs: i64, nsecs: i64, type_: *const ::qt::TimerType);
  pub fn qt_core_c_QDeadlineTimer_setPreciseRemainingTime_secs(this_ptr: *mut ::deadline_timer::DeadlineTimer, secs: i64);
  pub fn qt_core_c_QDeadlineTimer_setPreciseRemainingTime_secs_nsecs(this_ptr: *mut ::deadline_timer::DeadlineTimer, secs: i64, nsecs: i64);
  pub fn qt_core_c_QDeadlineTimer_setPreciseRemainingTime_secs_nsecs_type(this_ptr: *mut ::deadline_timer::DeadlineTimer, secs: i64, nsecs: i64, type_: *const ::qt::TimerType);
  pub fn qt_core_c_QDeadlineTimer_setRemainingTime_msecs(this_ptr: *mut ::deadline_timer::DeadlineTimer, msecs: i64);
  pub fn qt_core_c_QDeadlineTimer_setRemainingTime_msecs_type(this_ptr: *mut ::deadline_timer::DeadlineTimer, msecs: i64, type_: *const ::qt::TimerType);
  pub fn qt_core_c_QDeadlineTimer_setTimerType(this_ptr: *mut ::deadline_timer::DeadlineTimer, type_: *const ::qt::TimerType);
  pub fn qt_core_c_QDeadlineTimer_swap(this_ptr: *mut ::deadline_timer::DeadlineTimer, other: *mut ::deadline_timer::DeadlineTimer);

  // Header: QDebug
  pub fn qt_core_c_QDebug_G_swap(value1: *mut ::debug::Debug, value2: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_autoInsertSpaces(this_ptr: *const ::debug::Debug) -> bool;
  pub fn qt_core_c_QDebug_constructor_device(device: *mut ::io_device::IODevice, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_constructor_o(o: *const ::debug::Debug, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_constructor_string(string: *mut ::string::String, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_constructor_t(t: ::message_log_context::MsgType, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_destructor(this_ptr: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_maybeQuote_c(this_ptr: *mut ::debug::Debug, c: ::libc::c_char) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_maybeQuote_no_args(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_maybeSpace(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_noquote(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_nospace(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_assign(this_ptr: *mut ::debug::Debug, other: *const ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_QChar(this_ptr: *mut ::debug::Debug, t: *const ::char::Char) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_QLatin1String(this_ptr: *mut ::debug::Debug, t: *const ::latin1_string::Latin1String) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_QTextStreamManipulator(this_ptr: *mut ::debug::Debug, m: *const ::text_stream_manipulator::TextStreamManipulator) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_bool(this_ptr: *mut ::debug::Debug, t: bool) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_char(this_ptr: *mut ::debug::Debug, t: ::libc::c_char) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_const_QByteArray_ref(this_ptr: *mut ::debug::Debug, t: *const ::byte_array::ByteArray) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_const_QStringRef_ref(this_ptr: *mut ::debug::Debug, t: *const ::string_ref::StringRef) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_const_QString_ref(this_ptr: *mut ::debug::Debug, t: *const ::string::String) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_const_char_ptr(this_ptr: *mut ::debug::Debug, t: *const ::libc::c_char) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_const_void_ptr(this_ptr: *mut ::debug::Debug, t: *const ::libc::c_void) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_double(this_ptr: *mut ::debug::Debug, t: ::libc::c_double) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_float(this_ptr: *mut ::debug::Debug, t: ::libc::c_float) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_int(this_ptr: *mut ::debug::Debug, t: ::libc::c_int) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_long(this_ptr: *mut ::debug::Debug, t: ::libc::c_long) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_qint64(this_ptr: *mut ::debug::Debug, t: i64) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_quint64(this_ptr: *mut ::debug::Debug, t: u64) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_short(this_ptr: *mut ::debug::Debug, t: ::libc::c_short) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_unsigned_int(this_ptr: *mut ::debug::Debug, t: ::libc::c_uint) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_unsigned_long(this_ptr: *mut ::debug::Debug, t: ::libc::c_ulong) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_operator_shl_unsigned_short(this_ptr: *mut ::debug::Debug, t: ::libc::c_ushort) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_quote(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_resetFormat(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_setAutoInsertSpaces(this_ptr: *mut ::debug::Debug, b: bool);
  pub fn qt_core_c_QDebug_setVerbosity(this_ptr: *mut ::debug::Debug, verbosityLevel: ::libc::c_int);
  pub fn qt_core_c_QDebug_space(this_ptr: *mut ::debug::Debug) -> *mut ::debug::Debug;
  pub fn qt_core_c_QDebug_swap(this_ptr: *mut ::debug::Debug, other: *mut ::debug::Debug);
  pub fn qt_core_c_QDebug_verbosity(this_ptr: *const ::debug::Debug) -> ::libc::c_int;

  // Header: QDebugStateSaver
  pub fn qt_core_c_QDebugStateSaver_constructor(dbg: *mut ::debug::Debug, output: *mut ::debug_state_saver::DebugStateSaver);
  pub fn qt_core_c_QDebugStateSaver_destructor(this_ptr: *mut ::debug_state_saver::DebugStateSaver);

  // Header: QDeferredDeleteEvent
  pub fn qt_core_c_QDeferredDeleteEvent_G_dynamic_cast_QDeferredDeleteEvent_ptr(ptr: *mut ::event::Event) -> *mut ::deferred_delete_event::DeferredDeleteEvent;
  pub fn qt_core_c_QDeferredDeleteEvent_G_static_cast_QDeferredDeleteEvent_ptr(ptr: *mut ::event::Event) -> *mut ::deferred_delete_event::DeferredDeleteEvent;
  pub fn qt_core_c_QDeferredDeleteEvent_G_static_cast_QEvent_ptr(ptr: *mut ::deferred_delete_event::DeferredDeleteEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QDeferredDeleteEvent_delete(this_ptr: *mut ::deferred_delete_event::DeferredDeleteEvent);
  pub fn qt_core_c_QDeferredDeleteEvent_loopLevel(this_ptr: *const ::deferred_delete_event::DeferredDeleteEvent) -> ::libc::c_int;
  pub fn qt_core_c_QDeferredDeleteEvent_new() -> *mut ::deferred_delete_event::DeferredDeleteEvent;

  // Header: QDir
  pub fn qt_core_c_QDir_G_operator_shl_to_output(debug: *const ::debug::Debug, dir: *const ::dir::Dir, output: *mut ::debug::Debug);
  pub fn qt_core_c_QDir_G_swap(value1: *mut ::dir::Dir, value2: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_absoluteFilePath_to_output(this_ptr: *const ::dir::Dir, fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDir_absolutePath_to_output(this_ptr: *const ::dir::Dir, output: *mut ::string::String);
  pub fn qt_core_c_QDir_addResourceSearchPath(path: *const ::string::String);
  pub fn qt_core_c_QDir_addSearchPath(prefix: *const ::string::String, path: *const ::string::String);
  pub fn qt_core_c_QDir_canonicalPath_to_output(this_ptr: *const ::dir::Dir, output: *mut ::string::String);
  pub fn qt_core_c_QDir_cd(this_ptr: *mut ::dir::Dir, dirName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_cdUp(this_ptr: *mut ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_cleanPath_to_output(path: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDir_constructor_arg1(arg1: *const ::dir::Dir, output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_constructor_no_args(output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_constructor_path(path: *const ::string::String, output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_constructor_path_nameFilter(path: *const ::string::String, nameFilter: *const ::string::String, output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_constructor_path_nameFilter_sort(path: *const ::string::String, nameFilter: *const ::string::String, sort: ::libc::c_uint, output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_constructor_path_nameFilter_sort_filter(path: *const ::string::String, nameFilter: *const ::string::String, sort: ::libc::c_uint, filter: ::libc::c_uint, output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_count(this_ptr: *const ::dir::Dir) -> ::libc::c_uint;
  pub fn qt_core_c_QDir_currentPath_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QDir_current_to_output(output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_destructor(this_ptr: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_dirName_to_output(this_ptr: *const ::dir::Dir, output: *mut ::string::String);
  pub fn qt_core_c_QDir_drives_to_output(output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryInfoList_to_output_filters(this_ptr: *const ::dir::Dir, filters: ::libc::c_uint, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryInfoList_to_output_filters_sort(this_ptr: *const ::dir::Dir, filters: ::libc::c_uint, sort: ::libc::c_uint, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryInfoList_to_output_nameFilters(this_ptr: *const ::dir::Dir, nameFilters: *const ::string_list::StringList, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryInfoList_to_output_nameFilters_filters(this_ptr: *const ::dir::Dir, nameFilters: *const ::string_list::StringList, filters: ::libc::c_uint, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryInfoList_to_output_nameFilters_filters_sort(this_ptr: *const ::dir::Dir, nameFilters: *const ::string_list::StringList, filters: ::libc::c_uint, sort: ::libc::c_uint, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryInfoList_to_output_no_args(this_ptr: *const ::dir::Dir, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QDir_entryList_to_output_filters(this_ptr: *const ::dir::Dir, filters: ::libc::c_uint, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_entryList_to_output_filters_sort(this_ptr: *const ::dir::Dir, filters: ::libc::c_uint, sort: ::libc::c_uint, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_entryList_to_output_nameFilters(this_ptr: *const ::dir::Dir, nameFilters: *const ::string_list::StringList, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_entryList_to_output_nameFilters_filters(this_ptr: *const ::dir::Dir, nameFilters: *const ::string_list::StringList, filters: ::libc::c_uint, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_entryList_to_output_nameFilters_filters_sort(this_ptr: *const ::dir::Dir, nameFilters: *const ::string_list::StringList, filters: ::libc::c_uint, sort: ::libc::c_uint, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_entryList_to_output_no_args(this_ptr: *const ::dir::Dir, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_exists_name(this_ptr: *const ::dir::Dir, name: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_exists_no_args(this_ptr: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_filePath_to_output(this_ptr: *const ::dir::Dir, fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDir_filter(this_ptr: *const ::dir::Dir) -> ::libc::c_uint;
  pub fn qt_core_c_QDir_fromNativeSeparators_to_output(pathName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDir_homePath_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QDir_home_to_output(output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_isAbsolute(this_ptr: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_isAbsolutePath(path: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_isEmpty_filters(this_ptr: *const ::dir::Dir, filters: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QDir_isEmpty_no_args(this_ptr: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_isReadable(this_ptr: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_isRelative(this_ptr: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_isRelativePath(path: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_isRoot(this_ptr: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_listSeparator_to_output(output: *mut ::char::Char);
  pub fn qt_core_c_QDir_makeAbsolute(this_ptr: *mut ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_match_filter_fileName(filter: *const ::string::String, fileName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_match_filters_fileName(filters: *const ::string_list::StringList, fileName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_mkdir(this_ptr: *const ::dir::Dir, dirName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_mkpath(this_ptr: *const ::dir::Dir, dirPath: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_nameFiltersFromString_to_output(nameFilter: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_nameFilters_to_output(this_ptr: *const ::dir::Dir, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_operator_assign_arg1(this_ptr: *mut ::dir::Dir, arg1: *const ::dir::Dir) -> *mut ::dir::Dir;
  pub fn qt_core_c_QDir_operator_assign_path(this_ptr: *mut ::dir::Dir, path: *const ::string::String) -> *mut ::dir::Dir;
  pub fn qt_core_c_QDir_operator_eq(this_ptr: *const ::dir::Dir, dir: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_operator_index_to_output(this_ptr: *const ::dir::Dir, arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QDir_operator_neq(this_ptr: *const ::dir::Dir, dir: *const ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_path_to_output(this_ptr: *const ::dir::Dir, output: *mut ::string::String);
  pub fn qt_core_c_QDir_refresh(this_ptr: *const ::dir::Dir);
  pub fn qt_core_c_QDir_relativeFilePath_to_output(this_ptr: *const ::dir::Dir, fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QDir_remove(this_ptr: *mut ::dir::Dir, fileName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_removeRecursively(this_ptr: *mut ::dir::Dir) -> bool;
  pub fn qt_core_c_QDir_rename(this_ptr: *mut ::dir::Dir, oldName: *const ::string::String, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_rmdir(this_ptr: *const ::dir::Dir, dirName: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_rmpath(this_ptr: *const ::dir::Dir, dirPath: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_rootPath_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QDir_root_to_output(output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_searchPaths_to_output(prefix: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QDir_separator_to_output(output: *mut ::char::Char);
  pub fn qt_core_c_QDir_setCurrent(path: *const ::string::String) -> bool;
  pub fn qt_core_c_QDir_setFilter(this_ptr: *mut ::dir::Dir, filter: ::libc::c_uint);
  pub fn qt_core_c_QDir_setNameFilters(this_ptr: *mut ::dir::Dir, nameFilters: *const ::string_list::StringList);
  pub fn qt_core_c_QDir_setPath(this_ptr: *mut ::dir::Dir, path: *const ::string::String);
  pub fn qt_core_c_QDir_setSearchPaths(prefix: *const ::string::String, searchPaths: *const ::string_list::StringList);
  pub fn qt_core_c_QDir_setSorting(this_ptr: *mut ::dir::Dir, sort: ::libc::c_uint);
  pub fn qt_core_c_QDir_sorting(this_ptr: *const ::dir::Dir) -> ::libc::c_uint;
  pub fn qt_core_c_QDir_swap(this_ptr: *mut ::dir::Dir, other: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_tempPath_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QDir_temp_to_output(output: *mut ::dir::Dir);
  pub fn qt_core_c_QDir_toNativeSeparators_to_output(pathName: *const ::string::String, output: *mut ::string::String);

  // Header: QDirIterator
  pub fn qt_core_c_QDirIterator_constructor_dir(dir: *const ::dir::Dir, output: *mut ::dir_iterator::DirIterator);
  pub fn qt_core_c_QDirIterator_constructor_dir_flags(dir: *const ::dir::Dir, flags: ::libc::c_uint, output: *mut ::dir_iterator::DirIterator);
  pub fn qt_core_c_QDirIterator_constructor_path(path: *const ::string::String, output: *mut ::dir_iterator::DirIterator);
  pub fn qt_core_c_QDirIterator_constructor_path_flags(path: *const ::string::String, flags: ::libc::c_uint, output: *mut ::dir_iterator::DirIterator);
  pub fn qt_core_c_QDirIterator_destructor(this_ptr: *mut ::dir_iterator::DirIterator);
  pub fn qt_core_c_QDirIterator_fileInfo_to_output(this_ptr: *const ::dir_iterator::DirIterator, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QDirIterator_fileName_to_output(this_ptr: *const ::dir_iterator::DirIterator, output: *mut ::string::String);
  pub fn qt_core_c_QDirIterator_filePath_to_output(this_ptr: *const ::dir_iterator::DirIterator, output: *mut ::string::String);
  pub fn qt_core_c_QDirIterator_hasNext(this_ptr: *const ::dir_iterator::DirIterator) -> bool;
  pub fn qt_core_c_QDirIterator_next_to_output(this_ptr: *mut ::dir_iterator::DirIterator, output: *mut ::string::String);
  pub fn qt_core_c_QDirIterator_path_to_output(this_ptr: *const ::dir_iterator::DirIterator, output: *mut ::string::String);

  // Header: QDynamicPropertyChangeEvent
  pub fn qt_core_c_QDynamicPropertyChangeEvent_G_dynamic_cast_QDynamicPropertyChangeEvent_ptr(ptr: *mut ::event::Event) -> *mut ::dynamic_property_change_event::DynamicPropertyChangeEvent;
  pub fn qt_core_c_QDynamicPropertyChangeEvent_G_static_cast_QDynamicPropertyChangeEvent_ptr(ptr: *mut ::event::Event) -> *mut ::dynamic_property_change_event::DynamicPropertyChangeEvent;
  pub fn qt_core_c_QDynamicPropertyChangeEvent_G_static_cast_QEvent_ptr(ptr: *mut ::dynamic_property_change_event::DynamicPropertyChangeEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QDynamicPropertyChangeEvent_delete(this_ptr: *mut ::dynamic_property_change_event::DynamicPropertyChangeEvent);
  pub fn qt_core_c_QDynamicPropertyChangeEvent_new(name: *const ::byte_array::ByteArray) -> *mut ::dynamic_property_change_event::DynamicPropertyChangeEvent;
  pub fn qt_core_c_QDynamicPropertyChangeEvent_propertyName_to_output(this_ptr: *const ::dynamic_property_change_event::DynamicPropertyChangeEvent, output: *mut ::byte_array::ByteArray);

  // Header: QEasingCurve
  pub fn qt_core_c_QEasingCurve_G_swap(value1: *mut ::easing_curve::EasingCurve, value2: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QEasingCurve_addCubicBezierSegment(this_ptr: *mut ::easing_curve::EasingCurve, c1: *const ::point_f::PointF, c2: *const ::point_f::PointF, endPoint: *const ::point_f::PointF);
  pub fn qt_core_c_QEasingCurve_addTCBSegment(this_ptr: *mut ::easing_curve::EasingCurve, nextPoint: *const ::point_f::PointF, t: ::libc::c_double, c: ::libc::c_double, b: ::libc::c_double);
  pub fn qt_core_c_QEasingCurve_amplitude(this_ptr: *const ::easing_curve::EasingCurve) -> ::libc::c_double;
  pub fn qt_core_c_QEasingCurve_constructor_no_args(output: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QEasingCurve_constructor_other(other: *const ::easing_curve::EasingCurve, output: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QEasingCurve_constructor_type(type_: ::easing_curve::Type, output: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QEasingCurve_customType(this_ptr: *const ::easing_curve::EasingCurve) -> extern "C" fn(::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QEasingCurve_destructor(this_ptr: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QEasingCurve_operator_assign(this_ptr: *mut ::easing_curve::EasingCurve, other: *const ::easing_curve::EasingCurve) -> *mut ::easing_curve::EasingCurve;
  pub fn qt_core_c_QEasingCurve_operator_eq(this_ptr: *const ::easing_curve::EasingCurve, other: *const ::easing_curve::EasingCurve) -> bool;
  pub fn qt_core_c_QEasingCurve_operator_neq(this_ptr: *const ::easing_curve::EasingCurve, other: *const ::easing_curve::EasingCurve) -> bool;
  pub fn qt_core_c_QEasingCurve_overshoot(this_ptr: *const ::easing_curve::EasingCurve) -> ::libc::c_double;
  pub fn qt_core_c_QEasingCurve_period(this_ptr: *const ::easing_curve::EasingCurve) -> ::libc::c_double;
  pub fn qt_core_c_QEasingCurve_setAmplitude(this_ptr: *mut ::easing_curve::EasingCurve, amplitude: ::libc::c_double);
  pub fn qt_core_c_QEasingCurve_setCustomType(this_ptr: *mut ::easing_curve::EasingCurve, func: extern "C" fn(::libc::c_double) -> ::libc::c_double);
  pub fn qt_core_c_QEasingCurve_setOvershoot(this_ptr: *mut ::easing_curve::EasingCurve, overshoot: ::libc::c_double);
  pub fn qt_core_c_QEasingCurve_setPeriod(this_ptr: *mut ::easing_curve::EasingCurve, period: ::libc::c_double);
  pub fn qt_core_c_QEasingCurve_setType(this_ptr: *mut ::easing_curve::EasingCurve, type_: ::easing_curve::Type);
  pub fn qt_core_c_QEasingCurve_swap(this_ptr: *mut ::easing_curve::EasingCurve, other: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QEasingCurve_toCubicSpline_to_output(this_ptr: *const ::easing_curve::EasingCurve, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QEasingCurve_type(this_ptr: *const ::easing_curve::EasingCurve) -> ::easing_curve::Type;
  pub fn qt_core_c_QEasingCurve_valueForProgress(this_ptr: *const ::easing_curve::EasingCurve, progress: ::libc::c_double) -> ::libc::c_double;

  // Header: QElapsedTimer
  pub fn qt_core_c_QElapsedTimer_clockType() -> ::elapsed_timer::ClockType;
  pub fn qt_core_c_QElapsedTimer_constructor(output: *mut ::elapsed_timer::ElapsedTimer);
  pub fn qt_core_c_QElapsedTimer_destructor(this_ptr: *mut ::elapsed_timer::ElapsedTimer);
  pub fn qt_core_c_QElapsedTimer_elapsed(this_ptr: *const ::elapsed_timer::ElapsedTimer) -> i64;
  pub fn qt_core_c_QElapsedTimer_hasExpired(this_ptr: *const ::elapsed_timer::ElapsedTimer, timeout: i64) -> bool;
  pub fn qt_core_c_QElapsedTimer_invalidate(this_ptr: *mut ::elapsed_timer::ElapsedTimer);
  pub fn qt_core_c_QElapsedTimer_isMonotonic() -> bool;
  pub fn qt_core_c_QElapsedTimer_isValid(this_ptr: *const ::elapsed_timer::ElapsedTimer) -> bool;
  pub fn qt_core_c_QElapsedTimer_msecsSinceReference(this_ptr: *const ::elapsed_timer::ElapsedTimer) -> i64;
  pub fn qt_core_c_QElapsedTimer_msecsTo(this_ptr: *const ::elapsed_timer::ElapsedTimer, other: *const ::elapsed_timer::ElapsedTimer) -> i64;
  pub fn qt_core_c_QElapsedTimer_nsecsElapsed(this_ptr: *const ::elapsed_timer::ElapsedTimer) -> i64;
  pub fn qt_core_c_QElapsedTimer_operator_eq(this_ptr: *const ::elapsed_timer::ElapsedTimer, other: *const ::elapsed_timer::ElapsedTimer) -> bool;
  pub fn qt_core_c_QElapsedTimer_operator_neq(this_ptr: *const ::elapsed_timer::ElapsedTimer, other: *const ::elapsed_timer::ElapsedTimer) -> bool;
  pub fn qt_core_c_QElapsedTimer_restart(this_ptr: *mut ::elapsed_timer::ElapsedTimer) -> i64;
  pub fn qt_core_c_QElapsedTimer_secsTo(this_ptr: *const ::elapsed_timer::ElapsedTimer, other: *const ::elapsed_timer::ElapsedTimer) -> i64;
  pub fn qt_core_c_QElapsedTimer_start(this_ptr: *mut ::elapsed_timer::ElapsedTimer);

  // Header: QEvent
  pub fn qt_core_c_QEvent_accept(this_ptr: *mut ::event::Event);
  pub fn qt_core_c_QEvent_delete(this_ptr: *mut ::event::Event);
  pub fn qt_core_c_QEvent_ignore(this_ptr: *mut ::event::Event);
  pub fn qt_core_c_QEvent_isAccepted(this_ptr: *const ::event::Event) -> bool;
  pub fn qt_core_c_QEvent_new_other(other: *const ::event::Event) -> *mut ::event::Event;
  pub fn qt_core_c_QEvent_new_type(type_: ::event::Type) -> *mut ::event::Event;
  pub fn qt_core_c_QEvent_operator_assign(this_ptr: *mut ::event::Event, other: *const ::event::Event) -> *mut ::event::Event;
  pub fn qt_core_c_QEvent_registerEventType_hint(hint: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QEvent_registerEventType_no_args() -> ::libc::c_int;
  pub fn qt_core_c_QEvent_setAccepted(this_ptr: *mut ::event::Event, accepted: bool);
  pub fn qt_core_c_QEvent_spontaneous(this_ptr: *const ::event::Event) -> bool;
  pub fn qt_core_c_QEvent_type(this_ptr: *const ::event::Event) -> ::event::Type;

  // Header: QEventLoop
  pub fn qt_core_c_QEventLoop_G_dynamic_cast_QEventLoop_ptr(ptr: *mut ::object::Object) -> *mut ::event_loop::EventLoop;
  pub fn qt_core_c_QEventLoop_G_static_cast_QEventLoop_ptr(ptr: *mut ::object::Object) -> *mut ::event_loop::EventLoop;
  pub fn qt_core_c_QEventLoop_G_static_cast_QObject_ptr(ptr: *mut ::event_loop::EventLoop) -> *mut ::object::Object;
  pub fn qt_core_c_QEventLoop_delete(this_ptr: *mut ::event_loop::EventLoop);
  pub fn qt_core_c_QEventLoop_event(this_ptr: *mut ::event_loop::EventLoop, event: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QEventLoop_exec_flags(this_ptr: *mut ::event_loop::EventLoop, flags: ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QEventLoop_exec_no_args(this_ptr: *mut ::event_loop::EventLoop) -> ::libc::c_int;
  pub fn qt_core_c_QEventLoop_exit_no_args(this_ptr: *mut ::event_loop::EventLoop);
  pub fn qt_core_c_QEventLoop_exit_returnCode(this_ptr: *mut ::event_loop::EventLoop, returnCode: ::libc::c_int);
  pub fn qt_core_c_QEventLoop_isRunning(this_ptr: *const ::event_loop::EventLoop) -> bool;
  pub fn qt_core_c_QEventLoop_metaObject(this_ptr: *const ::event_loop::EventLoop) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QEventLoop_new_no_args() -> *mut ::event_loop::EventLoop;
  pub fn qt_core_c_QEventLoop_new_parent(parent: *mut ::object::Object) -> *mut ::event_loop::EventLoop;
  pub fn qt_core_c_QEventLoop_processEvents_flags(this_ptr: *mut ::event_loop::EventLoop, flags: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QEventLoop_processEvents_flags_maximumTime(this_ptr: *mut ::event_loop::EventLoop, flags: ::libc::c_uint, maximumTime: ::libc::c_int);
  pub fn qt_core_c_QEventLoop_processEvents_no_args(this_ptr: *mut ::event_loop::EventLoop) -> bool;
  pub fn qt_core_c_QEventLoop_quit(this_ptr: *mut ::event_loop::EventLoop);
  pub fn qt_core_c_QEventLoop_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QEventLoop_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QEventLoop_wakeUp(this_ptr: *mut ::event_loop::EventLoop);

  // Header: QEventLoopLocker
  pub fn qt_core_c_QEventLoopLocker_constructor_loop(loop_: *mut ::event_loop::EventLoop, output: *mut ::event_loop_locker::EventLoopLocker);
  pub fn qt_core_c_QEventLoopLocker_constructor_no_args(output: *mut ::event_loop_locker::EventLoopLocker);
  pub fn qt_core_c_QEventLoopLocker_constructor_thread(thread: *mut ::thread::Thread, output: *mut ::event_loop_locker::EventLoopLocker);
  pub fn qt_core_c_QEventLoopLocker_destructor(this_ptr: *mut ::event_loop_locker::EventLoopLocker);

  // Header: QEventTransition
  pub fn qt_core_c_QEventTransition_G_dynamic_cast_QEventTransition_ptr_QAbstractTransition(ptr: *mut ::abstract_transition::AbstractTransition) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_G_dynamic_cast_QEventTransition_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_G_static_cast_QAbstractTransition_ptr(ptr: *mut ::event_transition::EventTransition) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QEventTransition_G_static_cast_QEventTransition_ptr_QAbstractTransition(ptr: *mut ::abstract_transition::AbstractTransition) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_G_static_cast_QEventTransition_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_G_static_cast_QObject_ptr(ptr: *mut ::event_transition::EventTransition) -> *mut ::object::Object;
  pub fn qt_core_c_QEventTransition_delete(this_ptr: *mut ::event_transition::EventTransition);
  pub fn qt_core_c_QEventTransition_eventSource(this_ptr: *const ::event_transition::EventTransition) -> *mut ::object::Object;
  pub fn qt_core_c_QEventTransition_metaObject(this_ptr: *const ::event_transition::EventTransition) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QEventTransition_new_no_args() -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_new_object_type(object: *mut ::object::Object, type_: *const ::event::Type) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_new_object_type_sourceState(object: *mut ::object::Object, type_: *const ::event::Type, sourceState: *mut ::state::State) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_new_sourceState(sourceState: *mut ::state::State) -> *mut ::event_transition::EventTransition;
  pub fn qt_core_c_QEventTransition_setEventSource(this_ptr: *mut ::event_transition::EventTransition, object: *mut ::object::Object);
  pub fn qt_core_c_QEventTransition_setEventType(this_ptr: *mut ::event_transition::EventTransition, type_: *const ::event::Type);
  pub fn qt_core_c_QEventTransition_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QEventTransition_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QFactoryInterface
  pub fn qt_core_c_QFactoryInterface_delete(this_ptr: *mut ::factory_interface::FactoryInterface);
  pub fn qt_core_c_QFactoryInterface_keys_to_output(this_ptr: *const ::factory_interface::FactoryInterface, output: *mut ::string_list::StringList);

  // Header: QFile
  pub fn qt_core_c_QFile_G_dynamic_cast_QFile_ptr_QFileDevice(ptr: *mut ::file_device::FileDevice) -> *mut ::file::File;
  pub fn qt_core_c_QFile_G_dynamic_cast_QFile_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::file::File;
  pub fn qt_core_c_QFile_G_dynamic_cast_QFile_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::file::File;
  pub fn qt_core_c_QFile_G_static_cast_QFileDevice_ptr(ptr: *mut ::file::File) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QFile_G_static_cast_QFile_ptr_QFileDevice(ptr: *mut ::file_device::FileDevice) -> *mut ::file::File;
  pub fn qt_core_c_QFile_G_static_cast_QFile_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::file::File;
  pub fn qt_core_c_QFile_G_static_cast_QFile_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::file::File;
  pub fn qt_core_c_QFile_G_static_cast_QIODevice_ptr(ptr: *mut ::file::File) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QFile_G_static_cast_QObject_ptr(ptr: *mut ::file::File) -> *mut ::object::Object;
  pub fn qt_core_c_QFile_copy_fileName_newName(fileName: *const ::string::String, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_copy_newName(this_ptr: *mut ::file::File, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_decodeName_to_output_QByteArray(localFileName: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QFile_decodeName_to_output_char(localFileName: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QFile_delete(this_ptr: *mut ::file::File);
  pub fn qt_core_c_QFile_encodeName_to_output(fileName: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QFile_exists_fileName(fileName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_exists_no_args(this_ptr: *const ::file::File) -> bool;
  pub fn qt_core_c_QFile_fileName_to_output(this_ptr: *const ::file::File, output: *mut ::string::String);
  pub fn qt_core_c_QFile_link_newName(this_ptr: *mut ::file::File, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_link_oldname_newName(oldname: *const ::string::String, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_metaObject(this_ptr: *const ::file::File) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QFile_new_name(name: *const ::string::String) -> *mut ::file::File;
  pub fn qt_core_c_QFile_new_name_parent(name: *const ::string::String, parent: *mut ::object::Object) -> *mut ::file::File;
  pub fn qt_core_c_QFile_new_no_args() -> *mut ::file::File;
  pub fn qt_core_c_QFile_new_parent(parent: *mut ::object::Object) -> *mut ::file::File;
  pub fn qt_core_c_QFile_open_fd_ioFlags(this_ptr: *mut ::file::File, fd: ::libc::c_int, ioFlags: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QFile_open_fd_ioFlags_handleFlags(this_ptr: *mut ::file::File, fd: ::libc::c_int, ioFlags: ::libc::c_uint, handleFlags: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QFile_open_flags(this_ptr: *mut ::file::File, flags: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QFile_permissions_filename(filename: *const ::string::String) -> ::libc::c_uint;
  pub fn qt_core_c_QFile_permissions_no_args(this_ptr: *const ::file::File) -> ::libc::c_uint;
  pub fn qt_core_c_QFile_readLink_to_output_fileName(fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QFile_readLink_to_output_no_args(this_ptr: *const ::file::File, output: *mut ::string::String);
  pub fn qt_core_c_QFile_remove_fileName(fileName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_remove_no_args(this_ptr: *mut ::file::File) -> bool;
  pub fn qt_core_c_QFile_rename_newName(this_ptr: *mut ::file::File, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_rename_oldName_newName(oldName: *const ::string::String, newName: *const ::string::String) -> bool;
  pub fn qt_core_c_QFile_resize_filename_sz(filename: *const ::string::String, sz: i64) -> bool;
  pub fn qt_core_c_QFile_resize_sz(this_ptr: *mut ::file::File, sz: i64) -> bool;
  pub fn qt_core_c_QFile_setFileName(this_ptr: *mut ::file::File, name: *const ::string::String);
  pub fn qt_core_c_QFile_setPermissions_filename_permissionSpec(filename: *const ::string::String, permissionSpec: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QFile_setPermissions_permissionSpec(this_ptr: *mut ::file::File, permissionSpec: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QFile_size(this_ptr: *const ::file::File) -> i64;
  pub fn qt_core_c_QFile_symLinkTarget_to_output_fileName(fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QFile_symLinkTarget_to_output_no_args(this_ptr: *const ::file::File, output: *mut ::string::String);
  pub fn qt_core_c_QFile_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QFile_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QFileDevice
  pub fn qt_core_c_QFileDevice_G_dynamic_cast_QFileDevice_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QFileDevice_G_dynamic_cast_QFileDevice_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QFileDevice_G_static_cast_QFileDevice_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QFileDevice_G_static_cast_QFileDevice_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QFileDevice_G_static_cast_QIODevice_ptr(ptr: *mut ::file_device::FileDevice) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QFileDevice_G_static_cast_QObject_ptr(ptr: *mut ::file_device::FileDevice) -> *mut ::object::Object;
  pub fn qt_core_c_QFileDevice_atEnd(this_ptr: *const ::file_device::FileDevice) -> bool;
  pub fn qt_core_c_QFileDevice_close(this_ptr: *mut ::file_device::FileDevice);
  pub fn qt_core_c_QFileDevice_delete(this_ptr: *mut ::file_device::FileDevice);
  pub fn qt_core_c_QFileDevice_error(this_ptr: *const ::file_device::FileDevice) -> ::file_device::FileError;
  pub fn qt_core_c_QFileDevice_fileName_to_output(this_ptr: *const ::file_device::FileDevice, output: *mut ::string::String);
  pub fn qt_core_c_QFileDevice_flush(this_ptr: *mut ::file_device::FileDevice) -> bool;
  pub fn qt_core_c_QFileDevice_handle(this_ptr: *const ::file_device::FileDevice) -> ::libc::c_int;
  pub fn qt_core_c_QFileDevice_isSequential(this_ptr: *const ::file_device::FileDevice) -> bool;
  pub fn qt_core_c_QFileDevice_map_offset_size(this_ptr: *mut ::file_device::FileDevice, offset: i64, size: i64) -> *mut ::libc::c_uchar;
  pub fn qt_core_c_QFileDevice_map_offset_size_flags(this_ptr: *mut ::file_device::FileDevice, offset: i64, size: i64, flags: ::file_device::MemoryMapFlags) -> *mut ::libc::c_uchar;
  pub fn qt_core_c_QFileDevice_metaObject(this_ptr: *const ::file_device::FileDevice) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QFileDevice_permissions(this_ptr: *const ::file_device::FileDevice) -> ::libc::c_uint;
  pub fn qt_core_c_QFileDevice_pos(this_ptr: *const ::file_device::FileDevice) -> i64;
  pub fn qt_core_c_QFileDevice_resize(this_ptr: *mut ::file_device::FileDevice, sz: i64) -> bool;
  pub fn qt_core_c_QFileDevice_seek(this_ptr: *mut ::file_device::FileDevice, offset: i64) -> bool;
  pub fn qt_core_c_QFileDevice_setPermissions(this_ptr: *mut ::file_device::FileDevice, permissionSpec: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QFileDevice_size(this_ptr: *const ::file_device::FileDevice) -> i64;
  pub fn qt_core_c_QFileDevice_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QFileDevice_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QFileDevice_unmap(this_ptr: *mut ::file_device::FileDevice, address: *mut ::libc::c_uchar) -> bool;
  pub fn qt_core_c_QFileDevice_unsetError(this_ptr: *mut ::file_device::FileDevice);

  // Header: QFileInfo
  pub fn qt_core_c_QFileInfo_G_swap(value1: *mut ::file_info::FileInfo, value2: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_absoluteDir_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::dir::Dir);
  pub fn qt_core_c_QFileInfo_absoluteFilePath_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_absolutePath_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_baseName_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_bundleName_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_caching(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_canonicalFilePath_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_canonicalPath_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_completeBaseName_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_completeSuffix_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_constructor_QDir_QString(dir: *const ::dir::Dir, file: *const ::string::String, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_constructor_QFile(file: *const ::file::File, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_constructor_QFileInfo(fileinfo: *const ::file_info::FileInfo, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_constructor_QString(file: *const ::string::String, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_constructor_no_args(output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_created_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QFileInfo_destructor(this_ptr: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_dir_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::dir::Dir);
  pub fn qt_core_c_QFileInfo_exists_file(file: *const ::string::String) -> bool;
  pub fn qt_core_c_QFileInfo_exists_no_args(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_fileName_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_filePath_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_groupId(this_ptr: *const ::file_info::FileInfo) -> ::libc::c_uint;
  pub fn qt_core_c_QFileInfo_group_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_isAbsolute(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isBundle(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isDir(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isExecutable(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isFile(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isHidden(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isNativePath(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isReadable(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isRelative(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isRoot(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isSymLink(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_isWritable(this_ptr: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_lastModified_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QFileInfo_lastRead_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QFileInfo_makeAbsolute(this_ptr: *mut ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_operator_assign(this_ptr: *mut ::file_info::FileInfo, fileinfo: *const ::file_info::FileInfo) -> *mut ::file_info::FileInfo;
  pub fn qt_core_c_QFileInfo_operator_eq(this_ptr: *const ::file_info::FileInfo, fileinfo: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_operator_neq(this_ptr: *const ::file_info::FileInfo, fileinfo: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QFileInfo_ownerId(this_ptr: *const ::file_info::FileInfo) -> ::libc::c_uint;
  pub fn qt_core_c_QFileInfo_owner_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_path_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_readLink_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_refresh(this_ptr: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_setCaching(this_ptr: *mut ::file_info::FileInfo, on: bool);
  pub fn qt_core_c_QFileInfo_setFile_QDir_QString(this_ptr: *mut ::file_info::FileInfo, dir: *const ::dir::Dir, file: *const ::string::String);
  pub fn qt_core_c_QFileInfo_setFile_QFile(this_ptr: *mut ::file_info::FileInfo, file: *const ::file::File);
  pub fn qt_core_c_QFileInfo_setFile_QString(this_ptr: *mut ::file_info::FileInfo, file: *const ::string::String);
  pub fn qt_core_c_QFileInfo_size(this_ptr: *const ::file_info::FileInfo) -> i64;
  pub fn qt_core_c_QFileInfo_suffix_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);
  pub fn qt_core_c_QFileInfo_swap(this_ptr: *mut ::file_info::FileInfo, other: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QFileInfo_symLinkTarget_to_output(this_ptr: *const ::file_info::FileInfo, output: *mut ::string::String);

  // Header: QFileSelector
  pub fn qt_core_c_QFileSelector_G_dynamic_cast_QFileSelector_ptr(ptr: *mut ::object::Object) -> *mut ::file_selector::FileSelector;
  pub fn qt_core_c_QFileSelector_G_static_cast_QFileSelector_ptr(ptr: *mut ::object::Object) -> *mut ::file_selector::FileSelector;
  pub fn qt_core_c_QFileSelector_G_static_cast_QObject_ptr(ptr: *mut ::file_selector::FileSelector) -> *mut ::object::Object;
  pub fn qt_core_c_QFileSelector_allSelectors_to_output(this_ptr: *const ::file_selector::FileSelector, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QFileSelector_delete(this_ptr: *mut ::file_selector::FileSelector);
  pub fn qt_core_c_QFileSelector_extraSelectors_to_output(this_ptr: *const ::file_selector::FileSelector, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QFileSelector_metaObject(this_ptr: *const ::file_selector::FileSelector) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QFileSelector_new_no_args() -> *mut ::file_selector::FileSelector;
  pub fn qt_core_c_QFileSelector_new_parent(parent: *mut ::object::Object) -> *mut ::file_selector::FileSelector;
  pub fn qt_core_c_QFileSelector_select_to_output_QString(this_ptr: *const ::file_selector::FileSelector, filePath: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QFileSelector_select_to_output_QUrl(this_ptr: *const ::file_selector::FileSelector, filePath: *const ::url::Url, output: *mut ::url::Url);
  pub fn qt_core_c_QFileSelector_setExtraSelectors(this_ptr: *mut ::file_selector::FileSelector, list: *const ::string_list::StringList);
  pub fn qt_core_c_QFileSelector_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QFileSelector_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QFileSystemWatcher
  pub fn qt_core_c_QFileSystemWatcher_G_dynamic_cast_QFileSystemWatcher_ptr(ptr: *mut ::object::Object) -> *mut ::file_system_watcher::FileSystemWatcher;
  pub fn qt_core_c_QFileSystemWatcher_G_static_cast_QFileSystemWatcher_ptr(ptr: *mut ::object::Object) -> *mut ::file_system_watcher::FileSystemWatcher;
  pub fn qt_core_c_QFileSystemWatcher_G_static_cast_QObject_ptr(ptr: *mut ::file_system_watcher::FileSystemWatcher) -> *mut ::object::Object;
  pub fn qt_core_c_QFileSystemWatcher_addPath(this_ptr: *mut ::file_system_watcher::FileSystemWatcher, file: *const ::string::String) -> bool;
  pub fn qt_core_c_QFileSystemWatcher_addPaths_to_output(this_ptr: *mut ::file_system_watcher::FileSystemWatcher, files: *const ::string_list::StringList, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QFileSystemWatcher_delete(this_ptr: *mut ::file_system_watcher::FileSystemWatcher);
  pub fn qt_core_c_QFileSystemWatcher_directories_to_output(this_ptr: *const ::file_system_watcher::FileSystemWatcher, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QFileSystemWatcher_files_to_output(this_ptr: *const ::file_system_watcher::FileSystemWatcher, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QFileSystemWatcher_metaObject(this_ptr: *const ::file_system_watcher::FileSystemWatcher) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QFileSystemWatcher_new_no_args() -> *mut ::file_system_watcher::FileSystemWatcher;
  pub fn qt_core_c_QFileSystemWatcher_new_parent(parent: *mut ::object::Object) -> *mut ::file_system_watcher::FileSystemWatcher;
  pub fn qt_core_c_QFileSystemWatcher_new_paths(paths: *const ::string_list::StringList) -> *mut ::file_system_watcher::FileSystemWatcher;
  pub fn qt_core_c_QFileSystemWatcher_new_paths_parent(paths: *const ::string_list::StringList, parent: *mut ::object::Object) -> *mut ::file_system_watcher::FileSystemWatcher;
  pub fn qt_core_c_QFileSystemWatcher_removePath(this_ptr: *mut ::file_system_watcher::FileSystemWatcher, file: *const ::string::String) -> bool;
  pub fn qt_core_c_QFileSystemWatcher_removePaths_to_output(this_ptr: *mut ::file_system_watcher::FileSystemWatcher, files: *const ::string_list::StringList, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QFileSystemWatcher_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QFileSystemWatcher_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QFinalState
  pub fn qt_core_c_QFinalState_G_dynamic_cast_QFinalState_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::final_state::FinalState;
  pub fn qt_core_c_QFinalState_G_dynamic_cast_QFinalState_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::final_state::FinalState;
  pub fn qt_core_c_QFinalState_G_static_cast_QAbstractState_ptr(ptr: *mut ::final_state::FinalState) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QFinalState_G_static_cast_QFinalState_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::final_state::FinalState;
  pub fn qt_core_c_QFinalState_G_static_cast_QFinalState_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::final_state::FinalState;
  pub fn qt_core_c_QFinalState_G_static_cast_QObject_ptr(ptr: *mut ::final_state::FinalState) -> *mut ::object::Object;
  pub fn qt_core_c_QFinalState_delete(this_ptr: *mut ::final_state::FinalState);
  pub fn qt_core_c_QFinalState_metaObject(this_ptr: *const ::final_state::FinalState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QFinalState_new_no_args() -> *mut ::final_state::FinalState;
  pub fn qt_core_c_QFinalState_new_parent(parent: *mut ::state::State) -> *mut ::final_state::FinalState;
  pub fn qt_core_c_QFinalState_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QFinalState_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QFuture
  pub fn qt_core_c_QFuture_void_cancel(this_ptr: *mut ::future::FutureEmpty);
  pub fn qt_core_c_QFuture_void_constructor(output: *mut ::future::FutureEmpty);
  pub fn qt_core_c_QFuture_void_destructor(this_ptr: *mut ::future::FutureEmpty);
  pub fn qt_core_c_QFuture_void_isCanceled(this_ptr: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_isFinished(this_ptr: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_isPaused(this_ptr: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_isRunning(this_ptr: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_isStarted(this_ptr: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_operator_eq(this_ptr: *const ::future::FutureEmpty, other: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_operator_neq(this_ptr: *const ::future::FutureEmpty, other: *const ::future::FutureEmpty) -> bool;
  pub fn qt_core_c_QFuture_void_pause(this_ptr: *mut ::future::FutureEmpty);
  pub fn qt_core_c_QFuture_void_progressMaximum(this_ptr: *const ::future::FutureEmpty) -> ::libc::c_int;
  pub fn qt_core_c_QFuture_void_progressMinimum(this_ptr: *const ::future::FutureEmpty) -> ::libc::c_int;
  pub fn qt_core_c_QFuture_void_progressText_to_output(this_ptr: *const ::future::FutureEmpty, output: *mut ::string::String);
  pub fn qt_core_c_QFuture_void_progressValue(this_ptr: *const ::future::FutureEmpty) -> ::libc::c_int;
  pub fn qt_core_c_QFuture_void_resultCount(this_ptr: *const ::future::FutureEmpty) -> ::libc::c_int;
  pub fn qt_core_c_QFuture_void_resume(this_ptr: *mut ::future::FutureEmpty);
  pub fn qt_core_c_QFuture_void_setPaused(this_ptr: *mut ::future::FutureEmpty, paused: bool);
  pub fn qt_core_c_QFuture_void_togglePaused(this_ptr: *mut ::future::FutureEmpty);
  pub fn qt_core_c_QFuture_void_waitForFinished(this_ptr: *mut ::future::FutureEmpty);

  // Header: QGenericArgument
  pub fn qt_core_c_QGenericArgument_constructor_aName(aName: *const ::libc::c_char, output: *mut ::generic_argument::GenericArgument);
  pub fn qt_core_c_QGenericArgument_constructor_aName_aData(aName: *const ::libc::c_char, aData: *const ::libc::c_void, output: *mut ::generic_argument::GenericArgument);
  pub fn qt_core_c_QGenericArgument_constructor_no_args(output: *mut ::generic_argument::GenericArgument);
  pub fn qt_core_c_QGenericArgument_data(this_ptr: *const ::generic_argument::GenericArgument) -> *mut ::libc::c_void;
  pub fn qt_core_c_QGenericArgument_destructor(this_ptr: *mut ::generic_argument::GenericArgument);
  pub fn qt_core_c_QGenericArgument_name(this_ptr: *const ::generic_argument::GenericArgument) -> *const ::libc::c_char;

  // Header: QGenericReturnArgument
  pub fn qt_core_c_QGenericReturnArgument_G_static_cast_QGenericArgument_ptr(ptr: *mut ::generic_return_argument::GenericReturnArgument) -> *mut ::generic_argument::GenericArgument;
  pub fn qt_core_c_QGenericReturnArgument_G_static_cast_QGenericReturnArgument_ptr(ptr: *mut ::generic_argument::GenericArgument) -> *mut ::generic_return_argument::GenericReturnArgument;
  pub fn qt_core_c_QGenericReturnArgument_constructor_aName(aName: *const ::libc::c_char, output: *mut ::generic_return_argument::GenericReturnArgument);
  pub fn qt_core_c_QGenericReturnArgument_constructor_aName_aData(aName: *const ::libc::c_char, aData: *mut ::libc::c_void, output: *mut ::generic_return_argument::GenericReturnArgument);
  pub fn qt_core_c_QGenericReturnArgument_constructor_no_args(output: *mut ::generic_return_argument::GenericReturnArgument);
  pub fn qt_core_c_QGenericReturnArgument_destructor(this_ptr: *mut ::generic_return_argument::GenericReturnArgument);

  // Header: QHash
  pub fn qt_core_c_QHash_QString_QVariant_capacity(this_ptr: *const ::hash::HashStringVariant) -> ::libc::c_int;
  pub fn qt_core_c_QHash_QString_QVariant_clear(this_ptr: *mut ::hash::HashStringVariant);
  pub fn qt_core_c_QHash_QString_QVariant_constructor(output: *mut ::hash::HashStringVariant);
  pub fn qt_core_c_QHash_QString_QVariant_contains(this_ptr: *const ::hash::HashStringVariant, key: *const ::string::String) -> bool;
  pub fn qt_core_c_QHash_QString_QVariant_count_key(this_ptr: *const ::hash::HashStringVariant, key: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QHash_QString_QVariant_count_no_args(this_ptr: *const ::hash::HashStringVariant) -> ::libc::c_int;
  pub fn qt_core_c_QHash_QString_QVariant_destructor(this_ptr: *mut ::hash::HashStringVariant);
  pub fn qt_core_c_QHash_QString_QVariant_empty(this_ptr: *const ::hash::HashStringVariant) -> bool;
  pub fn qt_core_c_QHash_QString_QVariant_isEmpty(this_ptr: *const ::hash::HashStringVariant) -> bool;
  pub fn qt_core_c_QHash_QString_QVariant_key_to_output_value(this_ptr: *const ::hash::HashStringVariant, value: *const ::variant::Variant, output: *mut ::string::String);
  pub fn qt_core_c_QHash_QString_QVariant_key_to_output_value_defaultKey(this_ptr: *const ::hash::HashStringVariant, value: *const ::variant::Variant, defaultKey: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QHash_QString_QVariant_keys_to_output_no_args(this_ptr: *const ::hash::HashStringVariant, output: *mut ::list::ListString);
  pub fn qt_core_c_QHash_QString_QVariant_keys_to_output_value(this_ptr: *const ::hash::HashStringVariant, value: *const ::variant::Variant, output: *mut ::list::ListString);
  pub fn qt_core_c_QHash_QString_QVariant_operator_index(this_ptr: *mut ::hash::HashStringVariant, key: *const ::string::String) -> *mut ::variant::Variant;
  pub fn qt_core_c_QHash_QString_QVariant_operator_index_to_output(this_ptr: *const ::hash::HashStringVariant, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QHash_QString_QVariant_remove(this_ptr: *mut ::hash::HashStringVariant, key: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QHash_QString_QVariant_reserve(this_ptr: *mut ::hash::HashStringVariant, size: ::libc::c_int);
  pub fn qt_core_c_QHash_QString_QVariant_size(this_ptr: *const ::hash::HashStringVariant) -> ::libc::c_int;
  pub fn qt_core_c_QHash_QString_QVariant_squeeze(this_ptr: *mut ::hash::HashStringVariant);
  pub fn qt_core_c_QHash_QString_QVariant_take_to_output(this_ptr: *mut ::hash::HashStringVariant, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QHash_QString_QVariant_uniqueKeys_to_output(this_ptr: *const ::hash::HashStringVariant, output: *mut ::list::ListString);
  pub fn qt_core_c_QHash_QString_QVariant_value_to_output_key(this_ptr: *const ::hash::HashStringVariant, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QHash_QString_QVariant_value_to_output_key_defaultValue(this_ptr: *const ::hash::HashStringVariant, key: *const ::string::String, defaultValue: *const ::variant::Variant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QHash_QString_QVariant_values_to_output_key(this_ptr: *const ::hash::HashStringVariant, key: *const ::string::String, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QHash_QString_QVariant_values_to_output_no_args(this_ptr: *const ::hash::HashStringVariant, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QHash_int_QByteArray_capacity(this_ptr: *const ::hash::HashCIntByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_clear(this_ptr: *mut ::hash::HashCIntByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_constructor(output: *mut ::hash::HashCIntByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_contains(this_ptr: *const ::hash::HashCIntByteArray, key: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QHash_int_QByteArray_count_key(this_ptr: *const ::hash::HashCIntByteArray, key: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_count_no_args(this_ptr: *const ::hash::HashCIntByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_destructor(this_ptr: *mut ::hash::HashCIntByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_empty(this_ptr: *const ::hash::HashCIntByteArray) -> bool;
  pub fn qt_core_c_QHash_int_QByteArray_isEmpty(this_ptr: *const ::hash::HashCIntByteArray) -> bool;
  pub fn qt_core_c_QHash_int_QByteArray_key_value(this_ptr: *const ::hash::HashCIntByteArray, value: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_key_value_defaultKey(this_ptr: *const ::hash::HashCIntByteArray, value: *const ::byte_array::ByteArray, defaultKey: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_keys_to_output_no_args(this_ptr: *const ::hash::HashCIntByteArray, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QHash_int_QByteArray_keys_to_output_value(this_ptr: *const ::hash::HashCIntByteArray, value: *const ::byte_array::ByteArray, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QHash_int_QByteArray_operator_index(this_ptr: *mut ::hash::HashCIntByteArray, key: *const ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QHash_int_QByteArray_operator_index_to_output(this_ptr: *const ::hash::HashCIntByteArray, key: *const ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_remove(this_ptr: *mut ::hash::HashCIntByteArray, key: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_reserve(this_ptr: *mut ::hash::HashCIntByteArray, size: ::libc::c_int);
  pub fn qt_core_c_QHash_int_QByteArray_size(this_ptr: *const ::hash::HashCIntByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QHash_int_QByteArray_squeeze(this_ptr: *mut ::hash::HashCIntByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_take_to_output(this_ptr: *mut ::hash::HashCIntByteArray, key: *const ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_uniqueKeys_to_output(this_ptr: *const ::hash::HashCIntByteArray, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QHash_int_QByteArray_value_to_output_key(this_ptr: *const ::hash::HashCIntByteArray, key: *const ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_value_to_output_key_defaultValue(this_ptr: *const ::hash::HashCIntByteArray, key: *const ::libc::c_int, defaultValue: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_values_to_output_key(this_ptr: *const ::hash::HashCIntByteArray, key: *const ::libc::c_int, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QHash_int_QByteArray_values_to_output_no_args(this_ptr: *const ::hash::HashCIntByteArray, output: *mut ::list::ListByteArray);

  // Header: QHashFunctions
  pub fn qt_core_c_QHashFunctions_G_qGlobalQHashSeed() -> ::libc::c_int;
  pub fn qt_core_c_QHashFunctions_G_qHashBits_p_size(p: *const ::libc::c_void, size: ::libc::c_ulong) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHashBits_p_size_seed(p: *const ::libc::c_void, size: ::libc::c_ulong, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QBitArray(key: *const ::bit_array::BitArray) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QBitArray_unsigned_int(key: *const ::bit_array::BitArray, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QByteArray(key: *const ::byte_array::ByteArray) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QByteArray_unsigned_int(key: *const ::byte_array::ByteArray, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QChar(key: *const ::char::Char) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QChar_unsigned_int(key: *const ::char::Char, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QLatin1String(key: *const ::latin1_string::Latin1String) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QLatin1String_unsigned_int(key: *const ::latin1_string::Latin1String, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QString(key: *const ::string::String) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QStringRef(key: *const ::string_ref::StringRef) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QStringRef_unsigned_int(key: *const ::string_ref::StringRef, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_QString_unsigned_int(key: *const ::string::String, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_char(key: ::libc::c_char) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_char_unsigned_int(key: ::libc::c_char, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_double(key: ::libc::c_double) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_double_unsigned_int(key: ::libc::c_double, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_float(key: ::libc::c_float) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_float_unsigned_int(key: ::libc::c_float, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_int(key: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_int_unsigned_int(key: ::libc::c_int, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_long(key: ::libc::c_long) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_long_unsigned_int(key: ::libc::c_long, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_qint64(key: i64) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_qint64_unsigned_int(key: i64, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_quint64(key: u64) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_quint64_unsigned_int(key: u64, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_short(key: ::libc::c_short) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_short_unsigned_int(key: ::libc::c_short, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_signed_char(key: ::libc::c_schar) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_signed_char_unsigned_int(key: ::libc::c_schar, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_char(key: ::libc::c_uchar) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_char_unsigned_int(key: ::libc::c_uchar, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_int(key: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_int_unsigned_int(key: ::libc::c_uint, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_long(key: ::libc::c_ulong) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_long_unsigned_int(key: ::libc::c_ulong, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_short(key: ::libc::c_ushort) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qHash_unsigned_short_unsigned_int(key: ::libc::c_ushort, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QHashFunctions_G_qSetGlobalQHashSeed(newSeed: ::libc::c_int);

  // Header: QHistoryState
  pub fn qt_core_c_QHistoryState_G_dynamic_cast_QHistoryState_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_G_dynamic_cast_QHistoryState_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_G_static_cast_QAbstractState_ptr(ptr: *mut ::history_state::HistoryState) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QHistoryState_G_static_cast_QHistoryState_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_G_static_cast_QHistoryState_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_G_static_cast_QObject_ptr(ptr: *mut ::history_state::HistoryState) -> *mut ::object::Object;
  pub fn qt_core_c_QHistoryState_defaultState(this_ptr: *const ::history_state::HistoryState) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QHistoryState_defaultTransition(this_ptr: *const ::history_state::HistoryState) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QHistoryState_delete(this_ptr: *mut ::history_state::HistoryState);
  pub fn qt_core_c_QHistoryState_historyType(this_ptr: *const ::history_state::HistoryState) -> ::history_state::HistoryType;
  pub fn qt_core_c_QHistoryState_metaObject(this_ptr: *const ::history_state::HistoryState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QHistoryState_new_no_args() -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_new_parent(parent: *mut ::state::State) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_new_type(type_: ::history_state::HistoryType) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_new_type_parent(type_: ::history_state::HistoryType, parent: *mut ::state::State) -> *mut ::history_state::HistoryState;
  pub fn qt_core_c_QHistoryState_setDefaultState(this_ptr: *mut ::history_state::HistoryState, state: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QHistoryState_setDefaultTransition(this_ptr: *mut ::history_state::HistoryState, transition: *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QHistoryState_setHistoryType(this_ptr: *mut ::history_state::HistoryState, type_: ::history_state::HistoryType);
  pub fn qt_core_c_QHistoryState_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QHistoryState_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QIODevice
  pub fn qt_core_c_QIODevice_G_dynamic_cast_QIODevice_ptr(ptr: *mut ::object::Object) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QIODevice_G_static_cast_QIODevice_ptr(ptr: *mut ::object::Object) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QIODevice_G_static_cast_QObject_ptr(ptr: *mut ::io_device::IODevice) -> *mut ::object::Object;
  pub fn qt_core_c_QIODevice_atEnd(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_bytesAvailable(this_ptr: *const ::io_device::IODevice) -> i64;
  pub fn qt_core_c_QIODevice_bytesToWrite(this_ptr: *const ::io_device::IODevice) -> i64;
  pub fn qt_core_c_QIODevice_canReadLine(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_close(this_ptr: *mut ::io_device::IODevice);
  pub fn qt_core_c_QIODevice_commitTransaction(this_ptr: *mut ::io_device::IODevice);
  pub fn qt_core_c_QIODevice_currentReadChannel(this_ptr: *const ::io_device::IODevice) -> ::libc::c_int;
  pub fn qt_core_c_QIODevice_currentWriteChannel(this_ptr: *const ::io_device::IODevice) -> ::libc::c_int;
  pub fn qt_core_c_QIODevice_delete(this_ptr: *mut ::io_device::IODevice);
  pub fn qt_core_c_QIODevice_errorString_to_output(this_ptr: *const ::io_device::IODevice, output: *mut ::string::String);
  pub fn qt_core_c_QIODevice_getChar(this_ptr: *mut ::io_device::IODevice, c: *mut ::libc::c_char) -> bool;
  pub fn qt_core_c_QIODevice_isOpen(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_isReadable(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_isSequential(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_isTextModeEnabled(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_isTransactionStarted(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_isWritable(this_ptr: *const ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_metaObject(this_ptr: *const ::io_device::IODevice) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QIODevice_open(this_ptr: *mut ::io_device::IODevice, mode: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QIODevice_openMode(this_ptr: *const ::io_device::IODevice) -> ::libc::c_uint;
  pub fn qt_core_c_QIODevice_peek(this_ptr: *mut ::io_device::IODevice, data: *mut ::libc::c_char, maxlen: i64) -> i64;
  pub fn qt_core_c_QIODevice_peek_to_output(this_ptr: *mut ::io_device::IODevice, maxlen: i64, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QIODevice_pos(this_ptr: *const ::io_device::IODevice) -> i64;
  pub fn qt_core_c_QIODevice_putChar(this_ptr: *mut ::io_device::IODevice, c: ::libc::c_char) -> bool;
  pub fn qt_core_c_QIODevice_read(this_ptr: *mut ::io_device::IODevice, data: *mut ::libc::c_char, maxlen: i64) -> i64;
  pub fn qt_core_c_QIODevice_readAll_to_output(this_ptr: *mut ::io_device::IODevice, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QIODevice_readChannelCount(this_ptr: *const ::io_device::IODevice) -> ::libc::c_int;
  pub fn qt_core_c_QIODevice_readLine(this_ptr: *mut ::io_device::IODevice, data: *mut ::libc::c_char, maxlen: i64) -> i64;
  pub fn qt_core_c_QIODevice_readLine_to_output_maxlen(this_ptr: *mut ::io_device::IODevice, maxlen: i64, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QIODevice_readLine_to_output_no_args(this_ptr: *mut ::io_device::IODevice, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QIODevice_read_to_output(this_ptr: *mut ::io_device::IODevice, maxlen: i64, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QIODevice_reset(this_ptr: *mut ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QIODevice_rollbackTransaction(this_ptr: *mut ::io_device::IODevice);
  pub fn qt_core_c_QIODevice_seek(this_ptr: *mut ::io_device::IODevice, pos: i64) -> bool;
  pub fn qt_core_c_QIODevice_setCurrentReadChannel(this_ptr: *mut ::io_device::IODevice, channel: ::libc::c_int);
  pub fn qt_core_c_QIODevice_setCurrentWriteChannel(this_ptr: *mut ::io_device::IODevice, channel: ::libc::c_int);
  pub fn qt_core_c_QIODevice_setTextModeEnabled(this_ptr: *mut ::io_device::IODevice, enabled: bool);
  pub fn qt_core_c_QIODevice_size(this_ptr: *const ::io_device::IODevice) -> i64;
  pub fn qt_core_c_QIODevice_startTransaction(this_ptr: *mut ::io_device::IODevice);
  pub fn qt_core_c_QIODevice_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QIODevice_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QIODevice_ungetChar(this_ptr: *mut ::io_device::IODevice, c: ::libc::c_char);
  pub fn qt_core_c_QIODevice_waitForBytesWritten(this_ptr: *mut ::io_device::IODevice, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QIODevice_waitForReadyRead(this_ptr: *mut ::io_device::IODevice, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QIODevice_writeChannelCount(this_ptr: *const ::io_device::IODevice) -> ::libc::c_int;
  pub fn qt_core_c_QIODevice_write_QByteArray(this_ptr: *mut ::io_device::IODevice, data: *const ::byte_array::ByteArray) -> i64;
  pub fn qt_core_c_QIODevice_write_char(this_ptr: *mut ::io_device::IODevice, data: *const ::libc::c_char) -> i64;
  pub fn qt_core_c_QIODevice_write_char_qint64(this_ptr: *mut ::io_device::IODevice, data: *const ::libc::c_char, len: i64) -> i64;

  // Header: QIdentityProxyModel
  pub fn qt_core_c_QIdentityProxyModel_G_dynamic_cast_QIdentityProxyModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_dynamic_cast_QIdentityProxyModel_ptr_QAbstractProxyModel(ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_dynamic_cast_QIdentityProxyModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::identity_proxy_model::IdentityProxyModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QIdentityProxyModel_G_static_cast_QAbstractProxyModel_ptr(ptr: *mut ::identity_proxy_model::IdentityProxyModel) -> *mut ::abstract_proxy_model::AbstractProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_static_cast_QIdentityProxyModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_static_cast_QIdentityProxyModel_ptr_QAbstractProxyModel(ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_static_cast_QIdentityProxyModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_G_static_cast_QObject_ptr(ptr: *mut ::identity_proxy_model::IdentityProxyModel) -> *mut ::object::Object;
  pub fn qt_core_c_QIdentityProxyModel_columnCount_no_args(this_ptr: *const ::identity_proxy_model::IdentityProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QIdentityProxyModel_columnCount_parent(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QIdentityProxyModel_delete(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel);
  pub fn qt_core_c_QIdentityProxyModel_dropMimeData(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_headerData_to_output_section_orientation(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QIdentityProxyModel_headerData_to_output_section_orientation_role(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QIdentityProxyModel_index_to_output_row_column(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QIdentityProxyModel_index_to_output_row_column_parent(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QIdentityProxyModel_insertColumns_column_count(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, column: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_insertColumns_column_count_parent(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, column: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_insertRows_row_count(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_insertRows_row_count_parent(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_mapFromSource_to_output(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, sourceIndex: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QIdentityProxyModel_mapSelectionFromSource_to_output(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, selection: *const ::item_selection::ItemSelection, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QIdentityProxyModel_mapSelectionToSource_to_output(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, selection: *const ::item_selection::ItemSelection, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QIdentityProxyModel_mapToSource_to_output(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, proxyIndex: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QIdentityProxyModel_metaObject(this_ptr: *const ::identity_proxy_model::IdentityProxyModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QIdentityProxyModel_new_no_args() -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_new_parent(parent: *mut ::object::Object) -> *mut ::identity_proxy_model::IdentityProxyModel;
  pub fn qt_core_c_QIdentityProxyModel_parent_to_output(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, child: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QIdentityProxyModel_removeColumns_column_count(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, column: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_removeColumns_column_count_parent(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, column: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_removeRows_row_count(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_removeRows_row_count_parent(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QIdentityProxyModel_rowCount_no_args(this_ptr: *const ::identity_proxy_model::IdentityProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QIdentityProxyModel_rowCount_parent(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QIdentityProxyModel_setSourceModel(this_ptr: *mut ::identity_proxy_model::IdentityProxyModel, sourceModel: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_QIdentityProxyModel_sibling_to_output(this_ptr: *const ::identity_proxy_model::IdentityProxyModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QIdentityProxyModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QIdentityProxyModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QInternal
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_AlignmentFlag(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_DockWidgetArea(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_DropAction(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_Edge(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_ImageConversionFlag(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_InputMethodHint(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_InputMethodQuery(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_ItemFlag(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_KeyboardModifier(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_MatchFlag(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_MouseButton(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_Orientation(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_ScreenOrientation(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_TextInteractionFlag(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_ToolBarArea(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_TouchPointState(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_WindowState(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_QFlags_Qt_WindowType(arg1: ::libc::c_uint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ApplicationAttribute(arg1: ::qt::ApplicationAttribute) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ApplicationState(arg1: ::qt::ApplicationState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ArrowType(arg1: ::qt::ArrowType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_AspectRatioMode(arg1: ::qt::AspectRatioMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_Axis(arg1: ::qt::Axis) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_BGMode(arg1: ::qt::BGMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_BrushStyle(arg1: ::qt::BrushStyle) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_CaseSensitivity(arg1: ::qt::CaseSensitivity) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_CheckState(arg1: ::qt::CheckState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ChecksumType(arg1: ::qt::ChecksumType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ClipOperation(arg1: ::qt::ClipOperation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ConnectionType(arg1: ::qt::ConnectionType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ContextMenuPolicy(arg1: ::qt::ContextMenuPolicy) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_Corner(arg1: ::qt::Corner) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_CursorMoveStyle(arg1: ::qt::CursorMoveStyle) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_CursorShape(arg1: ::qt::CursorShape) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_DateFormat(arg1: ::qt::DateFormat) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_DayOfWeek(arg1: ::qt::DayOfWeek) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_DockWidgetArea(arg1: ::qt::DockWidgetArea) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_DropAction(arg1: ::qt::DropAction) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_Edge(arg1: ::qt::Edge) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_EnterKeyType(arg1: ::qt::EnterKeyType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_FillRule(arg1: ::qt::FillRule) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_FocusPolicy(arg1: ::qt::FocusPolicy) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_FocusReason(arg1: ::qt::FocusReason) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_GestureState(arg1: ::qt::GestureState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_GestureType(arg1: ::qt::GestureType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_GlobalColor(arg1: ::qt::GlobalColor) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_InputMethodHint(arg1: ::qt::InputMethodHint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_InputMethodQuery(arg1: ::qt::InputMethodQuery) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ItemDataRole(arg1: ::qt::ItemDataRole) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ItemSelectionMode(arg1: ::qt::ItemSelectionMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ItemSelectionOperation(arg1: ::qt::ItemSelectionOperation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_Key(arg1: ::qt::Key) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_LayoutDirection(arg1: ::qt::LayoutDirection) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_MaskMode(arg1: ::qt::MaskMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_MouseEventFlag(arg1: ::qt::MouseEventFlag) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_MouseEventSource(arg1: ::qt::MouseEventSource) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_NativeGestureType(arg1: ::qt::NativeGestureType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_Orientation(arg1: ::qt::Orientation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_PenCapStyle(arg1: ::qt::PenCapStyle) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_PenJoinStyle(arg1: ::qt::PenJoinStyle) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_PenStyle(arg1: ::qt::PenStyle) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ScreenOrientation(arg1: ::qt::ScreenOrientation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ScrollBarPolicy(arg1: ::qt::ScrollBarPolicy) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ScrollPhase(arg1: ::qt::ScrollPhase) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ShortcutContext(arg1: ::qt::ShortcutContext) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_SizeHint(arg1: ::qt::SizeHint) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_SizeMode(arg1: ::qt::SizeMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_SortOrder(arg1: ::qt::SortOrder) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TabFocusBehavior(arg1: ::qt::TabFocusBehavior) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TextElideMode(arg1: ::qt::TextElideMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TextFlag(arg1: ::qt::TextFlag) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TextFormat(arg1: ::qt::TextFormat) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TextInteractionFlag(arg1: ::qt::TextInteractionFlag) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TimeSpec(arg1: ::qt::TimeSpec) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TimerType(arg1: ::qt::TimerType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ToolBarArea(arg1: ::qt::ToolBarArea) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_ToolButtonStyle(arg1: ::qt::ToolButtonStyle) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_TransformationMode(arg1: ::qt::TransformationMode) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_WidgetAttribute(arg1: ::qt::WidgetAttribute) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_WindowModality(arg1: ::qt::WindowModality) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_WindowState(arg1: ::qt::WindowState) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumMetaObject_Qt_WindowType(arg1: ::qt::WindowType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_AlignmentFlag(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_DockWidgetArea(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_DropAction(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_Edge(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_ImageConversionFlag(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_InputMethodHint(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_InputMethodQuery(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_ItemFlag(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_KeyboardModifier(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_MatchFlag(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_MouseButton(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_Orientation(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_ScreenOrientation(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_TextInteractionFlag(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_ToolBarArea(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_TouchPointState(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_WindowState(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_QFlags_Qt_WindowType(arg1: ::libc::c_uint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ApplicationAttribute(arg1: ::qt::ApplicationAttribute) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ApplicationState(arg1: ::qt::ApplicationState) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ArrowType(arg1: ::qt::ArrowType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_AspectRatioMode(arg1: ::qt::AspectRatioMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_Axis(arg1: ::qt::Axis) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_BGMode(arg1: ::qt::BGMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_BrushStyle(arg1: ::qt::BrushStyle) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_CaseSensitivity(arg1: ::qt::CaseSensitivity) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_CheckState(arg1: ::qt::CheckState) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ChecksumType(arg1: ::qt::ChecksumType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ClipOperation(arg1: ::qt::ClipOperation) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ConnectionType(arg1: ::qt::ConnectionType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ContextMenuPolicy(arg1: ::qt::ContextMenuPolicy) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_Corner(arg1: ::qt::Corner) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_CursorMoveStyle(arg1: ::qt::CursorMoveStyle) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_CursorShape(arg1: ::qt::CursorShape) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_DateFormat(arg1: ::qt::DateFormat) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_DayOfWeek(arg1: ::qt::DayOfWeek) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_DockWidgetArea(arg1: ::qt::DockWidgetArea) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_DropAction(arg1: ::qt::DropAction) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_Edge(arg1: ::qt::Edge) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_EnterKeyType(arg1: ::qt::EnterKeyType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_FillRule(arg1: ::qt::FillRule) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_FocusPolicy(arg1: ::qt::FocusPolicy) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_FocusReason(arg1: ::qt::FocusReason) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_GestureState(arg1: ::qt::GestureState) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_GestureType(arg1: ::qt::GestureType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_GlobalColor(arg1: ::qt::GlobalColor) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_InputMethodHint(arg1: ::qt::InputMethodHint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_InputMethodQuery(arg1: ::qt::InputMethodQuery) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ItemDataRole(arg1: ::qt::ItemDataRole) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ItemSelectionMode(arg1: ::qt::ItemSelectionMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ItemSelectionOperation(arg1: ::qt::ItemSelectionOperation) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_Key(arg1: ::qt::Key) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_LayoutDirection(arg1: ::qt::LayoutDirection) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_MaskMode(arg1: ::qt::MaskMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_MouseEventFlag(arg1: ::qt::MouseEventFlag) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_MouseEventSource(arg1: ::qt::MouseEventSource) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_NativeGestureType(arg1: ::qt::NativeGestureType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_Orientation(arg1: ::qt::Orientation) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_PenCapStyle(arg1: ::qt::PenCapStyle) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_PenJoinStyle(arg1: ::qt::PenJoinStyle) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_PenStyle(arg1: ::qt::PenStyle) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ScreenOrientation(arg1: ::qt::ScreenOrientation) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ScrollBarPolicy(arg1: ::qt::ScrollBarPolicy) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ScrollPhase(arg1: ::qt::ScrollPhase) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ShortcutContext(arg1: ::qt::ShortcutContext) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_SizeHint(arg1: ::qt::SizeHint) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_SizeMode(arg1: ::qt::SizeMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_SortOrder(arg1: ::qt::SortOrder) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TabFocusBehavior(arg1: ::qt::TabFocusBehavior) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TextElideMode(arg1: ::qt::TextElideMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TextFlag(arg1: ::qt::TextFlag) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TextFormat(arg1: ::qt::TextFormat) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TextInteractionFlag(arg1: ::qt::TextInteractionFlag) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TimeSpec(arg1: ::qt::TimeSpec) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TimerType(arg1: ::qt::TimerType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ToolBarArea(arg1: ::qt::ToolBarArea) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_ToolButtonStyle(arg1: ::qt::ToolButtonStyle) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_TransformationMode(arg1: ::qt::TransformationMode) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_WidgetAttribute(arg1: ::qt::WidgetAttribute) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_WindowModality(arg1: ::qt::WindowModality) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_WindowState(arg1: ::qt::WindowState) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_Qt_qt_getEnumName_Qt_WindowType(arg1: ::qt::WindowType) -> *const ::libc::c_char;
  pub fn qt_core_c_QInternal_G_qt_getQtMetaObject() -> *const ::meta_object::MetaObject;

  // Header: QItemSelection
  pub fn qt_core_c_QItemSelection_G_static_cast_QItemSelection_ptr(ptr: *mut ::list::ListItemSelectionRange) -> *mut ::item_selection::ItemSelection;
  pub fn qt_core_c_QItemSelection_G_static_cast_QList_QItemSelectionRange_ptr(ptr: *mut ::item_selection::ItemSelection) -> *mut ::list::ListItemSelectionRange;
  pub fn qt_core_c_QItemSelection_constructor_no_args(output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QItemSelection_constructor_topLeft_bottomRight(topLeft: *const ::model_index::ModelIndex, bottomRight: *const ::model_index::ModelIndex, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QItemSelection_contains(this_ptr: *const ::item_selection::ItemSelection, index: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelection_destructor(this_ptr: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QItemSelection_indexes_to_output(this_ptr: *const ::item_selection::ItemSelection, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelection_select(this_ptr: *mut ::item_selection::ItemSelection, topLeft: *const ::model_index::ModelIndex, bottomRight: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QItemSelection_split(range: *const ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange, result: *mut ::item_selection::ItemSelection);

  // Header: QItemSelectionModel
  pub fn qt_core_c_QItemSelectionModel_G_dynamic_cast_QItemSelectionModel_ptr(ptr: *mut ::object::Object) -> *mut ::item_selection_model::ItemSelectionModel;
  pub fn qt_core_c_QItemSelectionModel_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::item_selection_range::ItemSelectionRange, output: *mut ::debug::Debug);
  pub fn qt_core_c_QItemSelectionModel_G_qHash(arg1: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_uint;
  pub fn qt_core_c_QItemSelectionModel_G_static_cast_QItemSelectionModel_ptr(ptr: *mut ::object::Object) -> *mut ::item_selection_model::ItemSelectionModel;
  pub fn qt_core_c_QItemSelectionModel_G_static_cast_QObject_ptr(ptr: *mut ::item_selection_model::ItemSelectionModel) -> *mut ::object::Object;
  pub fn qt_core_c_QItemSelectionModel_G_swap(value1: *mut ::item_selection::ItemSelection, value2: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QItemSelectionModel_clear(this_ptr: *mut ::item_selection_model::ItemSelectionModel);
  pub fn qt_core_c_QItemSelectionModel_clearCurrentIndex(this_ptr: *mut ::item_selection_model::ItemSelectionModel);
  pub fn qt_core_c_QItemSelectionModel_clearSelection(this_ptr: *mut ::item_selection_model::ItemSelectionModel);
  pub fn qt_core_c_QItemSelectionModel_columnIntersectsSelection(this_ptr: *const ::item_selection_model::ItemSelectionModel, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionModel_currentIndex_to_output(this_ptr: *const ::item_selection_model::ItemSelectionModel, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QItemSelectionModel_delete(this_ptr: *mut ::item_selection_model::ItemSelectionModel);
  pub fn qt_core_c_QItemSelectionModel_hasSelection(this_ptr: *const ::item_selection_model::ItemSelectionModel) -> bool;
  pub fn qt_core_c_QItemSelectionModel_isColumnSelected(this_ptr: *const ::item_selection_model::ItemSelectionModel, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionModel_isRowSelected(this_ptr: *const ::item_selection_model::ItemSelectionModel, row: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionModel_isSelected(this_ptr: *const ::item_selection_model::ItemSelectionModel, index: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionModel_metaObject(this_ptr: *const ::item_selection_model::ItemSelectionModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QItemSelectionModel_model(this_ptr: *mut ::item_selection_model::ItemSelectionModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QItemSelectionModel_model_const(this_ptr: *const ::item_selection_model::ItemSelectionModel) -> *const ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QItemSelectionModel_new_model(model: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::item_selection_model::ItemSelectionModel;
  pub fn qt_core_c_QItemSelectionModel_new_model_parent(model: *mut ::abstract_item_model::AbstractItemModel, parent: *mut ::object::Object) -> *mut ::item_selection_model::ItemSelectionModel;
  pub fn qt_core_c_QItemSelectionModel_new_no_args() -> *mut ::item_selection_model::ItemSelectionModel;
  pub fn qt_core_c_QItemSelectionModel_reset(this_ptr: *mut ::item_selection_model::ItemSelectionModel);
  pub fn qt_core_c_QItemSelectionModel_rowIntersectsSelection(this_ptr: *const ::item_selection_model::ItemSelectionModel, row: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionModel_selectedColumns_to_output_no_args(this_ptr: *const ::item_selection_model::ItemSelectionModel, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelectionModel_selectedColumns_to_output_row(this_ptr: *const ::item_selection_model::ItemSelectionModel, row: ::libc::c_int, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelectionModel_selectedIndexes_to_output(this_ptr: *const ::item_selection_model::ItemSelectionModel, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelectionModel_selectedRows_to_output_column(this_ptr: *const ::item_selection_model::ItemSelectionModel, column: ::libc::c_int, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelectionModel_selectedRows_to_output_no_args(this_ptr: *const ::item_selection_model::ItemSelectionModel, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelectionModel_selection_to_output(this_ptr: *const ::item_selection_model::ItemSelectionModel, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QItemSelectionModel_setModel(this_ptr: *mut ::item_selection_model::ItemSelectionModel, model: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_QItemSelectionModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QItemSelectionModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QItemSelectionRange
  pub fn qt_core_c_QItemSelectionRange_bottom(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QItemSelectionRange_bottomRight(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QItemSelectionRange_constructor_index(index: *const ::model_index::ModelIndex, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_constructor_no_args(output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_constructor_other(other: *const ::item_selection_range::ItemSelectionRange, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_constructor_topL_bottomR(topL: *const ::model_index::ModelIndex, bottomR: *const ::model_index::ModelIndex, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_contains_index(this_ptr: *const ::item_selection_range::ItemSelectionRange, index: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionRange_contains_row_column_parentIndex(this_ptr: *const ::item_selection_range::ItemSelectionRange, row: ::libc::c_int, column: ::libc::c_int, parentIndex: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QItemSelectionRange_destructor(this_ptr: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_height(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QItemSelectionRange_indexes_to_output(this_ptr: *const ::item_selection_range::ItemSelectionRange, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QItemSelectionRange_intersected_to_output(this_ptr: *const ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_intersects(this_ptr: *const ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QItemSelectionRange_isEmpty(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QItemSelectionRange_isValid(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QItemSelectionRange_left(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QItemSelectionRange_model(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> *const ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QItemSelectionRange_operator_assign(this_ptr: *mut ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange) -> *mut ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QItemSelectionRange_operator_eq(this_ptr: *const ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QItemSelectionRange_operator_lt(this_ptr: *const ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QItemSelectionRange_operator_neq(this_ptr: *const ::item_selection_range::ItemSelectionRange, other: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QItemSelectionRange_parent_to_output(this_ptr: *const ::item_selection_range::ItemSelectionRange, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QItemSelectionRange_right(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QItemSelectionRange_swap(this_ptr: *mut ::item_selection_range::ItemSelectionRange, other: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QItemSelectionRange_top(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QItemSelectionRange_topLeft(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QItemSelectionRange_width(this_ptr: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;

  // Header: QJsonArray
  pub fn qt_core_c_QJsonArray_append(this_ptr: *mut ::json_array::JsonArray, value: *const ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_at_to_output(this_ptr: *const ::json_array::JsonArray, i: ::libc::c_int, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_begin_to_output(this_ptr: *mut ::json_array::JsonArray, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_begin_to_output_const(this_ptr: *const ::json_array::JsonArray, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_constBegin_to_output(this_ptr: *const ::json_array::JsonArray, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_constEnd_to_output(this_ptr: *const ::json_array::JsonArray, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_a(this_ptr: *const ::json_array::ConstIterator) -> *const ::json_array::JsonArray;
  pub fn qt_core_c_QJsonArray_const_iterator_constructor_QJsonArray_const_iterator(o: *const ::json_array::ConstIterator, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_constructor_QJsonArray_int(array: *const ::json_array::JsonArray, index: ::libc::c_int, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_constructor_QJsonArray_iterator(o: *const ::json_array::Iterator, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_constructor_no_args(output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_destructor(this_ptr: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_i(this_ptr: *const ::json_array::ConstIterator) -> ::libc::c_int;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_add_assign(this_ptr: *mut ::json_array::ConstIterator, j: ::libc::c_int) -> *mut ::json_array::ConstIterator;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_add_to_output(this_ptr: *const ::json_array::ConstIterator, j: ::libc::c_int, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_operator_dec(this_ptr: *mut ::json_array::ConstIterator) -> *mut ::json_array::ConstIterator;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_dec_postfix_to_output(this_ptr: *mut ::json_array::ConstIterator, arg1: ::libc::c_int, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_operator_eq(this_ptr: *const ::json_array::ConstIterator, o: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_ge(this_ptr: *const ::json_array::ConstIterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_gt(this_ptr: *const ::json_array::ConstIterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_inc(this_ptr: *mut ::json_array::ConstIterator) -> *mut ::json_array::ConstIterator;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_inc_postfix_to_output(this_ptr: *mut ::json_array::ConstIterator, arg1: ::libc::c_int, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_operator_index_to_output(this_ptr: *const ::json_array::ConstIterator, j: ::libc::c_int, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_const_iterator_operator_indirection_to_output(this_ptr: *const ::json_array::ConstIterator, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_const_iterator_operator_le(this_ptr: *const ::json_array::ConstIterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_lt(this_ptr: *const ::json_array::ConstIterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_neq(this_ptr: *const ::json_array::ConstIterator, o: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_sub(this_ptr: *const ::json_array::ConstIterator, j: *const ::json_array::ConstIterator) -> ::libc::c_int;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_sub_assign(this_ptr: *mut ::json_array::ConstIterator, j: ::libc::c_int) -> *mut ::json_array::ConstIterator;
  pub fn qt_core_c_QJsonArray_const_iterator_operator_sub_to_output(this_ptr: *const ::json_array::ConstIterator, j: ::libc::c_int, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_const_iterator_set_a(this_ptr: *mut ::json_array::ConstIterator, value: *const ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_const_iterator_set_i(this_ptr: *mut ::json_array::ConstIterator, value: ::libc::c_int);
  pub fn qt_core_c_QJsonArray_constructor_no_args(output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_constructor_other(other: *const ::json_array::JsonArray, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_contains(this_ptr: *const ::json_array::JsonArray, element: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonArray_count(this_ptr: *const ::json_array::JsonArray) -> ::libc::c_int;
  pub fn qt_core_c_QJsonArray_destructor(this_ptr: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_empty(this_ptr: *const ::json_array::JsonArray) -> bool;
  pub fn qt_core_c_QJsonArray_end_to_output(this_ptr: *mut ::json_array::JsonArray, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_end_to_output_const(this_ptr: *const ::json_array::JsonArray, output: *mut ::json_array::ConstIterator);
  pub fn qt_core_c_QJsonArray_erase_to_output(this_ptr: *mut ::json_array::JsonArray, it: *const ::json_array::Iterator, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_first_to_output(this_ptr: *const ::json_array::JsonArray, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_fromStringList_to_output(list: *const ::string_list::StringList, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_fromVariantList_to_output(list: *const ::list::ListVariant, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_insert(this_ptr: *mut ::json_array::JsonArray, i: ::libc::c_int, value: *const ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_insert_to_output(this_ptr: *mut ::json_array::JsonArray, before: *const ::json_array::Iterator, value: *const ::json_value::JsonValue, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_isEmpty(this_ptr: *const ::json_array::JsonArray) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_a(this_ptr: *const ::json_array::Iterator) -> *mut ::json_array::JsonArray;
  pub fn qt_core_c_QJsonArray_iterator_constructor_array_index(array: *mut ::json_array::JsonArray, index: ::libc::c_int, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_constructor_no_args(output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_destructor(this_ptr: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_i(this_ptr: *const ::json_array::Iterator) -> ::libc::c_int;
  pub fn qt_core_c_QJsonArray_iterator_operator_add_assign(this_ptr: *mut ::json_array::Iterator, j: ::libc::c_int) -> *mut ::json_array::Iterator;
  pub fn qt_core_c_QJsonArray_iterator_operator_add_to_output(this_ptr: *const ::json_array::Iterator, j: ::libc::c_int, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_operator_dec(this_ptr: *mut ::json_array::Iterator) -> *mut ::json_array::Iterator;
  pub fn qt_core_c_QJsonArray_iterator_operator_dec_postfix_to_output(this_ptr: *mut ::json_array::Iterator, arg1: ::libc::c_int, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_operator_eq_QJsonArray_const_iterator(this_ptr: *const ::json_array::Iterator, o: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_eq_QJsonArray_iterator(this_ptr: *const ::json_array::Iterator, o: *const ::json_array::Iterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_ge_QJsonArray_const_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_ge_QJsonArray_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::Iterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_gt_QJsonArray_const_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_gt_QJsonArray_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::Iterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_inc(this_ptr: *mut ::json_array::Iterator) -> *mut ::json_array::Iterator;
  pub fn qt_core_c_QJsonArray_iterator_operator_inc_postfix_to_output(this_ptr: *mut ::json_array::Iterator, arg1: ::libc::c_int, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_operator_index_to_output(this_ptr: *const ::json_array::Iterator, j: ::libc::c_int, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonArray_iterator_operator_indirection_to_output(this_ptr: *const ::json_array::Iterator, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonArray_iterator_operator_le_QJsonArray_const_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_le_QJsonArray_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::Iterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_lt_QJsonArray_const_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_lt_QJsonArray_iterator(this_ptr: *const ::json_array::Iterator, other: *const ::json_array::Iterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_neq_QJsonArray_const_iterator(this_ptr: *const ::json_array::Iterator, o: *const ::json_array::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_neq_QJsonArray_iterator(this_ptr: *const ::json_array::Iterator, o: *const ::json_array::Iterator) -> bool;
  pub fn qt_core_c_QJsonArray_iterator_operator_sub(this_ptr: *const ::json_array::Iterator, j: *const ::json_array::Iterator) -> ::libc::c_int;
  pub fn qt_core_c_QJsonArray_iterator_operator_sub_assign(this_ptr: *mut ::json_array::Iterator, j: ::libc::c_int) -> *mut ::json_array::Iterator;
  pub fn qt_core_c_QJsonArray_iterator_operator_sub_to_output(this_ptr: *const ::json_array::Iterator, j: ::libc::c_int, output: *mut ::json_array::Iterator);
  pub fn qt_core_c_QJsonArray_iterator_set_a(this_ptr: *mut ::json_array::Iterator, value: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_iterator_set_i(this_ptr: *mut ::json_array::Iterator, value: ::libc::c_int);
  pub fn qt_core_c_QJsonArray_last_to_output(this_ptr: *const ::json_array::JsonArray, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_operator_add_assign(this_ptr: *mut ::json_array::JsonArray, v: *const ::json_value::JsonValue) -> *mut ::json_array::JsonArray;
  pub fn qt_core_c_QJsonArray_operator_add_to_output(this_ptr: *const ::json_array::JsonArray, v: *const ::json_value::JsonValue, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_operator_assign(this_ptr: *mut ::json_array::JsonArray, other: *const ::json_array::JsonArray) -> *mut ::json_array::JsonArray;
  pub fn qt_core_c_QJsonArray_operator_eq(this_ptr: *const ::json_array::JsonArray, other: *const ::json_array::JsonArray) -> bool;
  pub fn qt_core_c_QJsonArray_operator_index_to_output(this_ptr: *mut ::json_array::JsonArray, i: ::libc::c_int, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonArray_operator_index_to_output_const(this_ptr: *const ::json_array::JsonArray, i: ::libc::c_int, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_operator_neq(this_ptr: *const ::json_array::JsonArray, other: *const ::json_array::JsonArray) -> bool;
  pub fn qt_core_c_QJsonArray_operator_shl(this_ptr: *mut ::json_array::JsonArray, v: *const ::json_value::JsonValue) -> *mut ::json_array::JsonArray;
  pub fn qt_core_c_QJsonArray_pop_back(this_ptr: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_pop_front(this_ptr: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_prepend(this_ptr: *mut ::json_array::JsonArray, value: *const ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_push_back(this_ptr: *mut ::json_array::JsonArray, t: *const ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_push_front(this_ptr: *mut ::json_array::JsonArray, t: *const ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_removeAt(this_ptr: *mut ::json_array::JsonArray, i: ::libc::c_int);
  pub fn qt_core_c_QJsonArray_removeFirst(this_ptr: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_removeLast(this_ptr: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonArray_replace(this_ptr: *mut ::json_array::JsonArray, i: ::libc::c_int, value: *const ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_size(this_ptr: *const ::json_array::JsonArray) -> ::libc::c_int;
  pub fn qt_core_c_QJsonArray_takeAt_to_output(this_ptr: *mut ::json_array::JsonArray, i: ::libc::c_int, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonArray_toVariantList_to_output(this_ptr: *const ::json_array::JsonArray, output: *mut ::list::ListVariant);

  // Header: QJsonDocument
  pub fn qt_core_c_QJsonDocument_array_to_output(this_ptr: *const ::json_document::JsonDocument, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonDocument_constructor_array(array: *const ::json_array::JsonArray, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_constructor_no_args(output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_constructor_object(object: *const ::json_object::JsonObject, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_constructor_other(other: *const ::json_document::JsonDocument, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_destructor(this_ptr: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromBinaryData_to_output_data(data: *const ::byte_array::ByteArray, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromBinaryData_to_output_data_validation(data: *const ::byte_array::ByteArray, validation: ::json_document::DataValidation, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromJson_to_output_json(json: *const ::byte_array::ByteArray, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromJson_to_output_json_error(json: *const ::byte_array::ByteArray, error: *mut ::json_parse_error::JsonParseError, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromRawData_to_output_data_size(data: *const ::libc::c_char, size: ::libc::c_int, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromRawData_to_output_data_size_validation(data: *const ::libc::c_char, size: ::libc::c_int, validation: ::json_document::DataValidation, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_fromVariant_to_output(variant: *const ::variant::Variant, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QJsonDocument_isArray(this_ptr: *const ::json_document::JsonDocument) -> bool;
  pub fn qt_core_c_QJsonDocument_isEmpty(this_ptr: *const ::json_document::JsonDocument) -> bool;
  pub fn qt_core_c_QJsonDocument_isNull(this_ptr: *const ::json_document::JsonDocument) -> bool;
  pub fn qt_core_c_QJsonDocument_isObject(this_ptr: *const ::json_document::JsonDocument) -> bool;
  pub fn qt_core_c_QJsonDocument_object_to_output(this_ptr: *const ::json_document::JsonDocument, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonDocument_operator_assign(this_ptr: *mut ::json_document::JsonDocument, other: *const ::json_document::JsonDocument) -> *mut ::json_document::JsonDocument;
  pub fn qt_core_c_QJsonDocument_operator_eq(this_ptr: *const ::json_document::JsonDocument, other: *const ::json_document::JsonDocument) -> bool;
  pub fn qt_core_c_QJsonDocument_operator_neq(this_ptr: *const ::json_document::JsonDocument, other: *const ::json_document::JsonDocument) -> bool;
  pub fn qt_core_c_QJsonDocument_rawData(this_ptr: *const ::json_document::JsonDocument, size: *mut ::libc::c_int) -> *const ::libc::c_char;
  pub fn qt_core_c_QJsonDocument_setArray(this_ptr: *mut ::json_document::JsonDocument, array: *const ::json_array::JsonArray);
  pub fn qt_core_c_QJsonDocument_setObject(this_ptr: *mut ::json_document::JsonDocument, object: *const ::json_object::JsonObject);
  pub fn qt_core_c_QJsonDocument_toBinaryData_to_output(this_ptr: *const ::json_document::JsonDocument, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QJsonDocument_toJson_to_output_format(this_ptr: *const ::json_document::JsonDocument, format: ::json_document::JsonFormat, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QJsonDocument_toJson_to_output_no_args(this_ptr: *const ::json_document::JsonDocument, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QJsonDocument_toVariant_to_output(this_ptr: *const ::json_document::JsonDocument, output: *mut ::variant::Variant);

  // Header: QJsonObject
  pub fn qt_core_c_QJsonObject_begin_to_output(this_ptr: *mut ::json_object::JsonObject, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_begin_to_output_const(this_ptr: *const ::json_object::JsonObject, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_constBegin_to_output(this_ptr: *const ::json_object::JsonObject, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_constEnd_to_output(this_ptr: *const ::json_object::JsonObject, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_constFind_to_output_QLatin1String(this_ptr: *const ::json_object::JsonObject, key: *const ::latin1_string::Latin1String, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_constFind_to_output_QString(this_ptr: *const ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_constructor_no_args(output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_constructor_obj_index(obj: *const ::json_object::JsonObject, index: ::libc::c_int, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_constructor_other(other: *const ::json_object::Iterator, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_destructor(this_ptr: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_key_to_output(this_ptr: *const ::json_object::ConstIterator, output: *mut ::string::String);
  pub fn qt_core_c_QJsonObject_const_iterator_operator_add_assign(this_ptr: *mut ::json_object::ConstIterator, j: ::libc::c_int) -> *mut ::json_object::ConstIterator;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_add_to_output(this_ptr: *const ::json_object::ConstIterator, j: ::libc::c_int, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_operator_dec(this_ptr: *mut ::json_object::ConstIterator) -> *mut ::json_object::ConstIterator;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_dec_postfix_to_output(this_ptr: *mut ::json_object::ConstIterator, arg1: ::libc::c_int, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_operator_eq_QJsonObject_const_iterator(this_ptr: *const ::json_object::ConstIterator, other: *const ::json_object::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_eq_QJsonObject_iterator(this_ptr: *const ::json_object::ConstIterator, other: *const ::json_object::Iterator) -> bool;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_inc(this_ptr: *mut ::json_object::ConstIterator) -> *mut ::json_object::ConstIterator;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_inc_postfix_to_output(this_ptr: *mut ::json_object::ConstIterator, arg1: ::libc::c_int, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_operator_indirection_to_output(this_ptr: *const ::json_object::ConstIterator, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonObject_const_iterator_operator_neq_QJsonObject_const_iterator(this_ptr: *const ::json_object::ConstIterator, other: *const ::json_object::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_neq_QJsonObject_iterator(this_ptr: *const ::json_object::ConstIterator, other: *const ::json_object::Iterator) -> bool;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_sub_assign(this_ptr: *mut ::json_object::ConstIterator, j: ::libc::c_int) -> *mut ::json_object::ConstIterator;
  pub fn qt_core_c_QJsonObject_const_iterator_operator_sub_to_output(this_ptr: *const ::json_object::ConstIterator, j: ::libc::c_int, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_const_iterator_value_to_output(this_ptr: *const ::json_object::ConstIterator, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonObject_constructor_no_args(output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonObject_constructor_other(other: *const ::json_object::JsonObject, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonObject_contains_QLatin1String(this_ptr: *const ::json_object::JsonObject, key: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QJsonObject_contains_QString(this_ptr: *const ::json_object::JsonObject, key: *const ::string::String) -> bool;
  pub fn qt_core_c_QJsonObject_count(this_ptr: *const ::json_object::JsonObject) -> ::libc::c_int;
  pub fn qt_core_c_QJsonObject_destructor(this_ptr: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonObject_empty(this_ptr: *const ::json_object::JsonObject) -> bool;
  pub fn qt_core_c_QJsonObject_end_to_output(this_ptr: *mut ::json_object::JsonObject, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_end_to_output_const(this_ptr: *const ::json_object::JsonObject, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_erase_to_output(this_ptr: *mut ::json_object::JsonObject, it: *const ::json_object::Iterator, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_find_to_output_QLatin1String(this_ptr: *mut ::json_object::JsonObject, key: *const ::latin1_string::Latin1String, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_find_to_output_QString(this_ptr: *mut ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_find_to_output_const_QLatin1String(this_ptr: *const ::json_object::JsonObject, key: *const ::latin1_string::Latin1String, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_find_to_output_const_QString(this_ptr: *const ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_object::ConstIterator);
  pub fn qt_core_c_QJsonObject_fromVariantHash_to_output(map: *const ::hash::HashStringVariant, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonObject_fromVariantMap_to_output(map: *const ::map::MapStringVariant, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonObject_insert_to_output(this_ptr: *mut ::json_object::JsonObject, key: *const ::string::String, value: *const ::json_value::JsonValue, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_isEmpty(this_ptr: *const ::json_object::JsonObject) -> bool;
  pub fn qt_core_c_QJsonObject_iterator_constructor_no_args(output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_constructor_obj_index(obj: *mut ::json_object::JsonObject, index: ::libc::c_int, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_destructor(this_ptr: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_key_to_output(this_ptr: *const ::json_object::Iterator, output: *mut ::string::String);
  pub fn qt_core_c_QJsonObject_iterator_operator_add_assign(this_ptr: *mut ::json_object::Iterator, j: ::libc::c_int) -> *mut ::json_object::Iterator;
  pub fn qt_core_c_QJsonObject_iterator_operator_add_to_output(this_ptr: *const ::json_object::Iterator, j: ::libc::c_int, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_operator_dec(this_ptr: *mut ::json_object::Iterator) -> *mut ::json_object::Iterator;
  pub fn qt_core_c_QJsonObject_iterator_operator_dec_postfix_to_output(this_ptr: *mut ::json_object::Iterator, arg1: ::libc::c_int, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_operator_eq_QJsonObject_const_iterator(this_ptr: *const ::json_object::Iterator, other: *const ::json_object::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonObject_iterator_operator_eq_QJsonObject_iterator(this_ptr: *const ::json_object::Iterator, other: *const ::json_object::Iterator) -> bool;
  pub fn qt_core_c_QJsonObject_iterator_operator_inc(this_ptr: *mut ::json_object::Iterator) -> *mut ::json_object::Iterator;
  pub fn qt_core_c_QJsonObject_iterator_operator_inc_postfix_to_output(this_ptr: *mut ::json_object::Iterator, arg1: ::libc::c_int, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_operator_indirection_to_output(this_ptr: *const ::json_object::Iterator, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonObject_iterator_operator_neq_QJsonObject_const_iterator(this_ptr: *const ::json_object::Iterator, other: *const ::json_object::ConstIterator) -> bool;
  pub fn qt_core_c_QJsonObject_iterator_operator_neq_QJsonObject_iterator(this_ptr: *const ::json_object::Iterator, other: *const ::json_object::Iterator) -> bool;
  pub fn qt_core_c_QJsonObject_iterator_operator_sub_assign(this_ptr: *mut ::json_object::Iterator, j: ::libc::c_int) -> *mut ::json_object::Iterator;
  pub fn qt_core_c_QJsonObject_iterator_operator_sub_to_output(this_ptr: *const ::json_object::Iterator, j: ::libc::c_int, output: *mut ::json_object::Iterator);
  pub fn qt_core_c_QJsonObject_iterator_value_to_output(this_ptr: *const ::json_object::Iterator, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonObject_keys_to_output(this_ptr: *const ::json_object::JsonObject, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QJsonObject_length(this_ptr: *const ::json_object::JsonObject) -> ::libc::c_int;
  pub fn qt_core_c_QJsonObject_operator_assign(this_ptr: *mut ::json_object::JsonObject, other: *const ::json_object::JsonObject) -> *mut ::json_object::JsonObject;
  pub fn qt_core_c_QJsonObject_operator_eq(this_ptr: *const ::json_object::JsonObject, other: *const ::json_object::JsonObject) -> bool;
  pub fn qt_core_c_QJsonObject_operator_index_to_output_QLatin1String(this_ptr: *mut ::json_object::JsonObject, key: *const ::latin1_string::Latin1String, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonObject_operator_index_to_output_QString(this_ptr: *mut ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonObject_operator_index_to_output_const_QLatin1String(this_ptr: *const ::json_object::JsonObject, key: *const ::latin1_string::Latin1String, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonObject_operator_index_to_output_const_QString(this_ptr: *const ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonObject_operator_neq(this_ptr: *const ::json_object::JsonObject, other: *const ::json_object::JsonObject) -> bool;
  pub fn qt_core_c_QJsonObject_remove(this_ptr: *mut ::json_object::JsonObject, key: *const ::string::String);
  pub fn qt_core_c_QJsonObject_size(this_ptr: *const ::json_object::JsonObject) -> ::libc::c_int;
  pub fn qt_core_c_QJsonObject_take_to_output(this_ptr: *mut ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonObject_toVariantHash_to_output(this_ptr: *const ::json_object::JsonObject, output: *mut ::hash::HashStringVariant);
  pub fn qt_core_c_QJsonObject_toVariantMap_to_output(this_ptr: *const ::json_object::JsonObject, output: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QJsonObject_value_to_output_QLatin1String(this_ptr: *const ::json_object::JsonObject, key: *const ::latin1_string::Latin1String, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonObject_value_to_output_QString(this_ptr: *const ::json_object::JsonObject, key: *const ::string::String, output: *mut ::json_value::JsonValue);

  // Header: QJsonParseError
  pub fn qt_core_c_QJsonParseError_destructor(this_ptr: *mut ::json_parse_error::JsonParseError);
  pub fn qt_core_c_QJsonParseError_error(this_ptr: *const ::json_parse_error::JsonParseError) -> ::json_parse_error::ParseError;
  pub fn qt_core_c_QJsonParseError_errorString_to_output(this_ptr: *const ::json_parse_error::JsonParseError, output: *mut ::string::String);
  pub fn qt_core_c_QJsonParseError_offset(this_ptr: *const ::json_parse_error::JsonParseError) -> ::libc::c_int;
  pub fn qt_core_c_QJsonParseError_set_error(this_ptr: *mut ::json_parse_error::JsonParseError, value: ::json_parse_error::ParseError);
  pub fn qt_core_c_QJsonParseError_set_offset(this_ptr: *mut ::json_parse_error::JsonParseError, value: ::libc::c_int);

  // Header: QJsonValue
  pub fn qt_core_c_QJsonValue_constructor_QJsonArray(a: *const ::json_array::JsonArray, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_QJsonObject(o: *const ::json_object::JsonObject, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_QJsonValue(other: *const ::json_value::JsonValue, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_QJsonValue_Type(arg1: ::json_value::Type, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_QLatin1String(s: *const ::latin1_string::Latin1String, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_QString(s: *const ::string::String, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_bool(b: bool, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_char(s: *const ::libc::c_char, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_double(n: ::libc::c_double, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_int(n: ::libc::c_int, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_no_args(output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_constructor_qint64(n: i64, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_destructor(this_ptr: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_fromVariant_to_output(variant: *const ::variant::Variant, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValue_isArray(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_isBool(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_isDouble(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_isNull(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_isObject(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_isString(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_isUndefined(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_operator_assign(this_ptr: *mut ::json_value::JsonValue, other: *const ::json_value::JsonValue) -> *mut ::json_value::JsonValue;
  pub fn qt_core_c_QJsonValue_operator_eq(this_ptr: *const ::json_value::JsonValue, other: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_operator_neq(this_ptr: *const ::json_value::JsonValue, other: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_toArray_to_output_defaultValue(this_ptr: *const ::json_value::JsonValue, defaultValue: *const ::json_array::JsonArray, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonValue_toArray_to_output_no_args(this_ptr: *const ::json_value::JsonValue, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonValue_toBool_defaultValue(this_ptr: *const ::json_value::JsonValue, defaultValue: bool) -> bool;
  pub fn qt_core_c_QJsonValue_toBool_no_args(this_ptr: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValue_toDouble_defaultValue(this_ptr: *const ::json_value::JsonValue, defaultValue: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QJsonValue_toDouble_no_args(this_ptr: *const ::json_value::JsonValue) -> ::libc::c_double;
  pub fn qt_core_c_QJsonValue_toInt_defaultValue(this_ptr: *const ::json_value::JsonValue, defaultValue: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QJsonValue_toInt_no_args(this_ptr: *const ::json_value::JsonValue) -> ::libc::c_int;
  pub fn qt_core_c_QJsonValue_toObject_to_output_defaultValue(this_ptr: *const ::json_value::JsonValue, defaultValue: *const ::json_object::JsonObject, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonValue_toObject_to_output_no_args(this_ptr: *const ::json_value::JsonValue, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonValue_toString_to_output_defaultValue(this_ptr: *const ::json_value::JsonValue, defaultValue: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QJsonValue_toString_to_output_no_args(this_ptr: *const ::json_value::JsonValue, output: *mut ::string::String);
  pub fn qt_core_c_QJsonValue_toVariant_to_output(this_ptr: *const ::json_value::JsonValue, output: *mut ::variant::Variant);
  pub fn qt_core_c_QJsonValue_type(this_ptr: *const ::json_value::JsonValue) -> ::json_value::Type;

  // Header: QJsonValueRef
  pub fn qt_core_c_QJsonValueRef_constructor_array_idx(array: *mut ::json_array::JsonArray, idx: ::libc::c_int, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonValueRef_constructor_object_idx(object: *mut ::json_object::JsonObject, idx: ::libc::c_int, output: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonValueRef_convert_to_QJsonValue_to_output(this_ptr: *const ::json_value_ref::JsonValueRef, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QJsonValueRef_destructor(this_ptr: *mut ::json_value_ref::JsonValueRef);
  pub fn qt_core_c_QJsonValueRef_isArray(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_isBool(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_isDouble(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_isNull(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_isObject(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_isString(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_isUndefined(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_operator_assign_QJsonValue(this_ptr: *mut ::json_value_ref::JsonValueRef, val: *const ::json_value::JsonValue) -> *mut ::json_value_ref::JsonValueRef;
  pub fn qt_core_c_QJsonValueRef_operator_assign_QJsonValueRef(this_ptr: *mut ::json_value_ref::JsonValueRef, val: *const ::json_value_ref::JsonValueRef) -> *mut ::json_value_ref::JsonValueRef;
  pub fn qt_core_c_QJsonValueRef_operator_eq(this_ptr: *const ::json_value_ref::JsonValueRef, other: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValueRef_operator_neq(this_ptr: *const ::json_value_ref::JsonValueRef, other: *const ::json_value::JsonValue) -> bool;
  pub fn qt_core_c_QJsonValueRef_toArray_to_output(this_ptr: *const ::json_value_ref::JsonValueRef, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QJsonValueRef_toBool_defaultValue(this_ptr: *const ::json_value_ref::JsonValueRef, defaultValue: bool) -> bool;
  pub fn qt_core_c_QJsonValueRef_toBool_no_args(this_ptr: *const ::json_value_ref::JsonValueRef) -> bool;
  pub fn qt_core_c_QJsonValueRef_toDouble_defaultValue(this_ptr: *const ::json_value_ref::JsonValueRef, defaultValue: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QJsonValueRef_toDouble_no_args(this_ptr: *const ::json_value_ref::JsonValueRef) -> ::libc::c_double;
  pub fn qt_core_c_QJsonValueRef_toInt_defaultValue(this_ptr: *const ::json_value_ref::JsonValueRef, defaultValue: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QJsonValueRef_toInt_no_args(this_ptr: *const ::json_value_ref::JsonValueRef) -> ::libc::c_int;
  pub fn qt_core_c_QJsonValueRef_toObject_to_output(this_ptr: *const ::json_value_ref::JsonValueRef, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QJsonValueRef_toString_to_output_defaultValue(this_ptr: *const ::json_value_ref::JsonValueRef, defaultValue: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QJsonValueRef_toString_to_output_no_args(this_ptr: *const ::json_value_ref::JsonValueRef, output: *mut ::string::String);
  pub fn qt_core_c_QJsonValueRef_toVariant_to_output(this_ptr: *const ::json_value_ref::JsonValueRef, output: *mut ::variant::Variant);

  // Header: QLatin1Char
  pub fn qt_core_c_QLatin1Char_constructor(c: ::libc::c_char, output: *mut ::latin1_char::Latin1Char);
  pub fn qt_core_c_QLatin1Char_destructor(this_ptr: *mut ::latin1_char::Latin1Char);
  pub fn qt_core_c_QLatin1Char_toLatin1(this_ptr: *const ::latin1_char::Latin1Char) -> ::libc::c_char;
  pub fn qt_core_c_QLatin1Char_unicode(this_ptr: *const ::latin1_char::Latin1Char) -> ::libc::c_ushort;

  // Header: QLatin1String
  pub fn qt_core_c_QLatin1String_at_to_output(this_ptr: *const ::latin1_string::Latin1String, i: ::libc::c_int, output: *mut ::latin1_char::Latin1Char);
  pub fn qt_core_c_QLatin1String_constructor_QByteArray(s: *const ::byte_array::ByteArray, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_constructor_char(s: *const ::libc::c_char, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_constructor_char_int(s: *const ::libc::c_char, sz: ::libc::c_int, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_constructor_no_args(output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_data(this_ptr: *const ::latin1_string::Latin1String) -> *const ::libc::c_char;
  pub fn qt_core_c_QLatin1String_destructor(this_ptr: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_latin1(this_ptr: *const ::latin1_string::Latin1String) -> *const ::libc::c_char;
  pub fn qt_core_c_QLatin1String_left_to_output(this_ptr: *const ::latin1_string::Latin1String, n: ::libc::c_int, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_mid_to_output_pos(this_ptr: *const ::latin1_string::Latin1String, pos: ::libc::c_int, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_mid_to_output_pos_n(this_ptr: *const ::latin1_string::Latin1String, pos: ::libc::c_int, n: ::libc::c_int, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_operator_eq_QByteArray(this_ptr: *const ::latin1_string::Latin1String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QLatin1String_operator_eq_QString(this_ptr: *const ::latin1_string::Latin1String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QLatin1String_operator_eq_char(this_ptr: *const ::latin1_string::Latin1String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QLatin1String_operator_ge_QByteArray(this_ptr: *const ::latin1_string::Latin1String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QLatin1String_operator_ge_QString(this_ptr: *const ::latin1_string::Latin1String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QLatin1String_operator_ge_char(this_ptr: *const ::latin1_string::Latin1String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QLatin1String_operator_gt_QByteArray(this_ptr: *const ::latin1_string::Latin1String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QLatin1String_operator_gt_QString(this_ptr: *const ::latin1_string::Latin1String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QLatin1String_operator_gt_char(this_ptr: *const ::latin1_string::Latin1String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QLatin1String_operator_index_to_output(this_ptr: *const ::latin1_string::Latin1String, i: ::libc::c_int, output: *mut ::latin1_char::Latin1Char);
  pub fn qt_core_c_QLatin1String_operator_le_QByteArray(this_ptr: *const ::latin1_string::Latin1String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QLatin1String_operator_le_QString(this_ptr: *const ::latin1_string::Latin1String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QLatin1String_operator_le_char(this_ptr: *const ::latin1_string::Latin1String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QLatin1String_operator_lt_QByteArray(this_ptr: *const ::latin1_string::Latin1String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QLatin1String_operator_lt_QString(this_ptr: *const ::latin1_string::Latin1String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QLatin1String_operator_lt_char(this_ptr: *const ::latin1_string::Latin1String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QLatin1String_operator_neq_QByteArray(this_ptr: *const ::latin1_string::Latin1String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QLatin1String_operator_neq_QString(this_ptr: *const ::latin1_string::Latin1String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QLatin1String_operator_neq_char(this_ptr: *const ::latin1_string::Latin1String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QLatin1String_right_to_output(this_ptr: *const ::latin1_string::Latin1String, n: ::libc::c_int, output: *mut ::latin1_string::Latin1String);
  pub fn qt_core_c_QLatin1String_size(this_ptr: *const ::latin1_string::Latin1String) -> ::libc::c_int;

  // Header: QLibrary
  pub fn qt_core_c_QLibrary_G_dynamic_cast_QLibrary_ptr(ptr: *mut ::object::Object) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_G_static_cast_QLibrary_ptr(ptr: *mut ::object::Object) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_G_static_cast_QObject_ptr(ptr: *mut ::library::Library) -> *mut ::object::Object;
  pub fn qt_core_c_QLibrary_delete(this_ptr: *mut ::library::Library);
  pub fn qt_core_c_QLibrary_errorString_to_output(this_ptr: *const ::library::Library, output: *mut ::string::String);
  pub fn qt_core_c_QLibrary_fileName_to_output(this_ptr: *const ::library::Library, output: *mut ::string::String);
  pub fn qt_core_c_QLibrary_isLibrary(fileName: *const ::string::String) -> bool;
  pub fn qt_core_c_QLibrary_isLoaded(this_ptr: *const ::library::Library) -> bool;
  pub fn qt_core_c_QLibrary_load(this_ptr: *mut ::library::Library) -> bool;
  pub fn qt_core_c_QLibrary_loadHints(this_ptr: *const ::library::Library) -> ::libc::c_uint;
  pub fn qt_core_c_QLibrary_metaObject(this_ptr: *const ::library::Library) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QLibrary_new_fileName(fileName: *const ::string::String) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_fileName_parent(fileName: *const ::string::String, parent: *mut ::object::Object) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_fileName_verNum(fileName: *const ::string::String, verNum: ::libc::c_int) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_fileName_verNum_parent(fileName: *const ::string::String, verNum: ::libc::c_int, parent: *mut ::object::Object) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_fileName_version(fileName: *const ::string::String, version: *const ::string::String) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_fileName_version_parent(fileName: *const ::string::String, version: *const ::string::String, parent: *mut ::object::Object) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_no_args() -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_new_parent(parent: *mut ::object::Object) -> *mut ::library::Library;
  pub fn qt_core_c_QLibrary_resolve_fileName_symbol(fileName: *const ::string::String, symbol: *const ::libc::c_char) -> extern "C" fn();
  pub fn qt_core_c_QLibrary_resolve_fileName_verNum_symbol(fileName: *const ::string::String, verNum: ::libc::c_int, symbol: *const ::libc::c_char) -> extern "C" fn();
  pub fn qt_core_c_QLibrary_resolve_fileName_version_symbol(fileName: *const ::string::String, version: *const ::string::String, symbol: *const ::libc::c_char) -> extern "C" fn();
  pub fn qt_core_c_QLibrary_resolve_symbol(this_ptr: *mut ::library::Library, symbol: *const ::libc::c_char) -> extern "C" fn();
  pub fn qt_core_c_QLibrary_setFileName(this_ptr: *mut ::library::Library, fileName: *const ::string::String);
  pub fn qt_core_c_QLibrary_setFileNameAndVersion_fileName_verNum(this_ptr: *mut ::library::Library, fileName: *const ::string::String, verNum: ::libc::c_int);
  pub fn qt_core_c_QLibrary_setFileNameAndVersion_fileName_version(this_ptr: *mut ::library::Library, fileName: *const ::string::String, version: *const ::string::String);
  pub fn qt_core_c_QLibrary_setLoadHints(this_ptr: *mut ::library::Library, hints: ::libc::c_uint);
  pub fn qt_core_c_QLibrary_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLibrary_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLibrary_unload(this_ptr: *mut ::library::Library) -> bool;

  // Header: QLibraryInfo
  pub fn qt_core_c_QLibraryInfo_build() -> *const ::libc::c_char;
  pub fn qt_core_c_QLibraryInfo_buildDate_to_output(output: *mut ::date::Date);
  pub fn qt_core_c_QLibraryInfo_delete(this_ptr: *mut ::library_info::LibraryInfo);
  pub fn qt_core_c_QLibraryInfo_isDebugBuild() -> bool;
  pub fn qt_core_c_QLibraryInfo_licensedProducts_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QLibraryInfo_licensee_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QLibraryInfo_location_to_output(arg1: ::library_info::LibraryLocation, output: *mut ::string::String);
  pub fn qt_core_c_QLibraryInfo_platformPluginArguments_to_output(platformName: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QLibraryInfo_version_to_output(output: *mut ::version_number::VersionNumber);

  // Header: QLine
  pub fn qt_core_c_QLine_G_operator_shl_QDataStream_QLine(arg1: *mut ::data_stream::DataStream, arg2: *const ::line::Line) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QLine_G_operator_shl_QDataStream_QLineF(arg1: *mut ::data_stream::DataStream, arg2: *const ::line_f::LineF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QLine_G_operator_shl_to_output_QDebug_QLine(d: *const ::debug::Debug, p: *const ::line::Line, output: *mut ::debug::Debug);
  pub fn qt_core_c_QLine_G_operator_shl_to_output_QDebug_QLineF(d: *const ::debug::Debug, p: *const ::line_f::LineF, output: *mut ::debug::Debug);
  pub fn qt_core_c_QLine_G_operator_shr_QDataStream_QLine(arg1: *mut ::data_stream::DataStream, arg2: *mut ::line::Line) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QLine_G_operator_shr_QDataStream_QLineF(arg1: *mut ::data_stream::DataStream, arg2: *mut ::line_f::LineF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QLine_center_to_output(this_ptr: *const ::line::Line, output: *mut ::point::Point);
  pub fn qt_core_c_QLine_constructor_no_args(output: *mut ::line::Line);
  pub fn qt_core_c_QLine_constructor_pt1_pt2(pt1: *const ::point::Point, pt2: *const ::point::Point, output: *mut ::line::Line);
  pub fn qt_core_c_QLine_constructor_x1_y1_x2_y2(x1: ::libc::c_int, y1: ::libc::c_int, x2: ::libc::c_int, y2: ::libc::c_int, output: *mut ::line::Line);
  pub fn qt_core_c_QLine_destructor(this_ptr: *mut ::line::Line);
  pub fn qt_core_c_QLine_dx(this_ptr: *const ::line::Line) -> ::libc::c_int;
  pub fn qt_core_c_QLine_dy(this_ptr: *const ::line::Line) -> ::libc::c_int;
  pub fn qt_core_c_QLine_isNull(this_ptr: *const ::line::Line) -> bool;
  pub fn qt_core_c_QLine_operator_eq(this_ptr: *const ::line::Line, d: *const ::line::Line) -> bool;
  pub fn qt_core_c_QLine_operator_neq(this_ptr: *const ::line::Line, d: *const ::line::Line) -> bool;
  pub fn qt_core_c_QLine_p1_to_output(this_ptr: *const ::line::Line, output: *mut ::point::Point);
  pub fn qt_core_c_QLine_p2_to_output(this_ptr: *const ::line::Line, output: *mut ::point::Point);
  pub fn qt_core_c_QLine_setLine(this_ptr: *mut ::line::Line, x1: ::libc::c_int, y1: ::libc::c_int, x2: ::libc::c_int, y2: ::libc::c_int);
  pub fn qt_core_c_QLine_setP1(this_ptr: *mut ::line::Line, p1: *const ::point::Point);
  pub fn qt_core_c_QLine_setP2(this_ptr: *mut ::line::Line, p2: *const ::point::Point);
  pub fn qt_core_c_QLine_setPoints(this_ptr: *mut ::line::Line, p1: *const ::point::Point, p2: *const ::point::Point);
  pub fn qt_core_c_QLine_translate_dx_dy(this_ptr: *mut ::line::Line, dx: ::libc::c_int, dy: ::libc::c_int);
  pub fn qt_core_c_QLine_translate_p(this_ptr: *mut ::line::Line, p: *const ::point::Point);
  pub fn qt_core_c_QLine_translated_to_output_dx_dy(this_ptr: *const ::line::Line, dx: ::libc::c_int, dy: ::libc::c_int, output: *mut ::line::Line);
  pub fn qt_core_c_QLine_translated_to_output_p(this_ptr: *const ::line::Line, p: *const ::point::Point, output: *mut ::line::Line);
  pub fn qt_core_c_QLine_x1(this_ptr: *const ::line::Line) -> ::libc::c_int;
  pub fn qt_core_c_QLine_x2(this_ptr: *const ::line::Line) -> ::libc::c_int;
  pub fn qt_core_c_QLine_y1(this_ptr: *const ::line::Line) -> ::libc::c_int;
  pub fn qt_core_c_QLine_y2(this_ptr: *const ::line::Line) -> ::libc::c_int;

  // Header: QLineF
  pub fn qt_core_c_QLineF_angleTo(this_ptr: *const ::line_f::LineF, l: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_angle_l(this_ptr: *const ::line_f::LineF, l: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_angle_no_args(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_center_to_output(this_ptr: *const ::line_f::LineF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QLineF_constructor_line(line: *const ::line::Line, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_constructor_no_args(output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_constructor_pt1_pt2(pt1: *const ::point_f::PointF, pt2: *const ::point_f::PointF, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_constructor_x1_y1_x2_y2(x1: ::libc::c_double, y1: ::libc::c_double, x2: ::libc::c_double, y2: ::libc::c_double, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_destructor(this_ptr: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_dx(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_dy(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_fromPolar_to_output(length: ::libc::c_double, angle: ::libc::c_double, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_intersect(this_ptr: *const ::line_f::LineF, l: *const ::line_f::LineF, intersectionPoint: *mut ::point_f::PointF) -> ::line_f::IntersectType;
  pub fn qt_core_c_QLineF_isNull(this_ptr: *const ::line_f::LineF) -> bool;
  pub fn qt_core_c_QLineF_length(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_normalVector_to_output(this_ptr: *const ::line_f::LineF, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_operator_eq(this_ptr: *const ::line_f::LineF, d: *const ::line_f::LineF) -> bool;
  pub fn qt_core_c_QLineF_operator_neq(this_ptr: *const ::line_f::LineF, d: *const ::line_f::LineF) -> bool;
  pub fn qt_core_c_QLineF_p1_to_output(this_ptr: *const ::line_f::LineF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QLineF_p2_to_output(this_ptr: *const ::line_f::LineF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QLineF_pointAt_to_output(this_ptr: *const ::line_f::LineF, t: ::libc::c_double, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QLineF_setAngle(this_ptr: *mut ::line_f::LineF, angle: ::libc::c_double);
  pub fn qt_core_c_QLineF_setLength(this_ptr: *mut ::line_f::LineF, len: ::libc::c_double);
  pub fn qt_core_c_QLineF_setLine(this_ptr: *mut ::line_f::LineF, x1: ::libc::c_double, y1: ::libc::c_double, x2: ::libc::c_double, y2: ::libc::c_double);
  pub fn qt_core_c_QLineF_setP1(this_ptr: *mut ::line_f::LineF, p1: *const ::point_f::PointF);
  pub fn qt_core_c_QLineF_setP2(this_ptr: *mut ::line_f::LineF, p2: *const ::point_f::PointF);
  pub fn qt_core_c_QLineF_setPoints(this_ptr: *mut ::line_f::LineF, p1: *const ::point_f::PointF, p2: *const ::point_f::PointF);
  pub fn qt_core_c_QLineF_toLine_to_output(this_ptr: *const ::line_f::LineF, output: *mut ::line::Line);
  pub fn qt_core_c_QLineF_translate_dx_dy(this_ptr: *mut ::line_f::LineF, dx: ::libc::c_double, dy: ::libc::c_double);
  pub fn qt_core_c_QLineF_translate_p(this_ptr: *mut ::line_f::LineF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QLineF_translated_to_output_dx_dy(this_ptr: *const ::line_f::LineF, dx: ::libc::c_double, dy: ::libc::c_double, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_translated_to_output_p(this_ptr: *const ::line_f::LineF, p: *const ::point_f::PointF, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_unitVector_to_output(this_ptr: *const ::line_f::LineF, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QLineF_x1(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_x2(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_y1(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;
  pub fn qt_core_c_QLineF_y2(this_ptr: *const ::line_f::LineF) -> ::libc::c_double;

  // Header: QList
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_append_QAbstractAnimation(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_append_QList_QAbstractAnimation_ptr(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_at(this_ptr: *const ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_back(this_ptr: *mut ::list::ListAbstractAnimationMutPtr) -> *mut *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_back_const(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_clear(this_ptr: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_constFirst(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_constLast(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_constructor_l(l: *const ::list::ListAbstractAnimationMutPtr, output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_constructor_no_args(output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_contains(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_count_no_args(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_count_t(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_destructor(this_ptr: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_empty(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_endsWith(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_first(this_ptr: *mut ::list::ListAbstractAnimationMutPtr) -> *mut *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_first_const(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_front(this_ptr: *mut ::list::ListAbstractAnimationMutPtr) -> *mut *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_front_const(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_indexOf_t(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_indexOf_t_from(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_insert(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int, t: *const *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_isEmpty(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_last(this_ptr: *mut ::list::ListAbstractAnimationMutPtr) -> *mut *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_lastIndexOf_t(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_lastIndexOf_t_from(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_last_const(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_length(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_mid_to_output_pos(this_ptr: *const ::list::ListAbstractAnimationMutPtr, pos: ::libc::c_int, output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_mid_to_output_pos_length(this_ptr: *const ::list::ListAbstractAnimationMutPtr, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_move(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_add_assign_l(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, l: *const ::list::ListAbstractAnimationMutPtr) -> *mut ::list::ListAbstractAnimationMutPtr;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_add_assign_t(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> *mut ::list::ListAbstractAnimationMutPtr;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_add_to_output(this_ptr: *const ::list::ListAbstractAnimationMutPtr, l: *const ::list::ListAbstractAnimationMutPtr, output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_assign(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, l: *const ::list::ListAbstractAnimationMutPtr) -> *mut ::list::ListAbstractAnimationMutPtr;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_eq(this_ptr: *const ::list::ListAbstractAnimationMutPtr, l: *const ::list::ListAbstractAnimationMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_index(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int) -> *mut *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_index_const(this_ptr: *const ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int) -> *const *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_neq(this_ptr: *const ::list::ListAbstractAnimationMutPtr, l: *const ::list::ListAbstractAnimationMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_shl_l(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, l: *const ::list::ListAbstractAnimationMutPtr) -> *mut ::list::ListAbstractAnimationMutPtr;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_operator_shl_t(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> *mut ::list::ListAbstractAnimationMutPtr;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_pop_back(this_ptr: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_pop_front(this_ptr: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_prepend(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_push_back(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_push_front(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_removeAll(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_removeAt(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_removeFirst(this_ptr: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_removeLast(this_ptr: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_removeOne(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_replace(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int, t: *const *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_reserve(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, size: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_size(this_ptr: *const ::list::ListAbstractAnimationMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_startsWith(this_ptr: *const ::list::ListAbstractAnimationMutPtr, t: *const *mut ::abstract_animation::AbstractAnimation) -> bool;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_swap_i_j(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_swap_other(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, other: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_takeAt(this_ptr: *mut ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_takeFirst(this_ptr: *mut ::list::ListAbstractAnimationMutPtr) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_takeLast(this_ptr: *mut ::list::ListAbstractAnimationMutPtr) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_value_i(this_ptr: *const ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractAnimation_ptr_value_i_defaultValue(this_ptr: *const ::list::ListAbstractAnimationMutPtr, i: ::libc::c_int, defaultValue: *const *mut ::abstract_animation::AbstractAnimation) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_append_QAbstractEventDispatcher_TimerInfo(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_append_QList_QAbstractEventDispatcher_TimerInfo(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_at(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_back(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_back_const(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_clear(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_constFirst(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_constLast(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_constructor_l(l: *const ::list::ListAbstractEventDispatcherTimerInfo, output: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_constructor_no_args(output: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_count(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_destructor(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_empty(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> bool;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_first(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_first_const(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_front(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_front_const(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_insert(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int, t: *const ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_isEmpty(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> bool;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_last(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_last_const(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_length(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_mid_to_output_pos(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo, pos: ::libc::c_int, output: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_mid_to_output_pos_length(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_move(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_add_assign_l(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, l: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::list::ListAbstractEventDispatcherTimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_add_assign_t(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::abstract_event_dispatcher::TimerInfo) -> *mut ::list::ListAbstractEventDispatcherTimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_add_to_output(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo, l: *const ::list::ListAbstractEventDispatcherTimerInfo, output: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_assign(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, l: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::list::ListAbstractEventDispatcherTimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_index(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int) -> *mut ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_index_const(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int) -> *const ::abstract_event_dispatcher::TimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_shl_l(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, l: *const ::list::ListAbstractEventDispatcherTimerInfo) -> *mut ::list::ListAbstractEventDispatcherTimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_operator_shl_t(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::abstract_event_dispatcher::TimerInfo) -> *mut ::list::ListAbstractEventDispatcherTimerInfo;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_pop_back(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_pop_front(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_prepend(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_push_back(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_push_front(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, t: *const ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_removeAt(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_removeFirst(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_removeLast(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_replace(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int, t: *const ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_reserve(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, size: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_size(this_ptr: *const ::list::ListAbstractEventDispatcherTimerInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_swap_i_j(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_swap_other(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, other: *mut ::list::ListAbstractEventDispatcherTimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_takeAt_to_output(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, i: ::libc::c_int, output: *mut ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_takeFirst_to_output(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, output: *mut ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractEventDispatcher_TimerInfo_takeLast_to_output(this_ptr: *mut ::list::ListAbstractEventDispatcherTimerInfo, output: *mut ::abstract_event_dispatcher::TimerInfo);
  pub fn qt_core_c_QList_QAbstractState_ptr_append_QAbstractState(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QList_QAbstractState_ptr_append_QList_QAbstractState_ptr(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_at(this_ptr: *const ::list::ListAbstractStateMutPtr, i: ::libc::c_int) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_back(this_ptr: *mut ::list::ListAbstractStateMutPtr) -> *mut *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_back_const(this_ptr: *const ::list::ListAbstractStateMutPtr) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_clear(this_ptr: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_constFirst(this_ptr: *const ::list::ListAbstractStateMutPtr) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_constLast(this_ptr: *const ::list::ListAbstractStateMutPtr) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_constructor_l(l: *const ::list::ListAbstractStateMutPtr, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_constructor_no_args(output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_contains(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_count_no_args(this_ptr: *const ::list::ListAbstractStateMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_count_t(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_destructor(this_ptr: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_empty(this_ptr: *const ::list::ListAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_endsWith(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_first(this_ptr: *mut ::list::ListAbstractStateMutPtr) -> *mut *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_first_const(this_ptr: *const ::list::ListAbstractStateMutPtr) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_fromSet_to_output(set: *const ::set::SetAbstractStateMutPtr, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_front(this_ptr: *mut ::list::ListAbstractStateMutPtr) -> *mut *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_front_const(this_ptr: *const ::list::ListAbstractStateMutPtr) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_indexOf_t(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_indexOf_t_from(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_insert(this_ptr: *mut ::list::ListAbstractStateMutPtr, i: ::libc::c_int, t: *const *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QList_QAbstractState_ptr_isEmpty(this_ptr: *const ::list::ListAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_last(this_ptr: *mut ::list::ListAbstractStateMutPtr) -> *mut *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_lastIndexOf_t(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_lastIndexOf_t_from(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_last_const(this_ptr: *const ::list::ListAbstractStateMutPtr) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_length(this_ptr: *const ::list::ListAbstractStateMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_mid_to_output_pos(this_ptr: *const ::list::ListAbstractStateMutPtr, pos: ::libc::c_int, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_mid_to_output_pos_length(this_ptr: *const ::list::ListAbstractStateMutPtr, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_move(this_ptr: *mut ::list::ListAbstractStateMutPtr, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_add_assign_l(this_ptr: *mut ::list::ListAbstractStateMutPtr, l: *const ::list::ListAbstractStateMutPtr) -> *mut ::list::ListAbstractStateMutPtr;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_add_assign_t(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> *mut ::list::ListAbstractStateMutPtr;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_add_to_output(this_ptr: *const ::list::ListAbstractStateMutPtr, l: *const ::list::ListAbstractStateMutPtr, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_assign(this_ptr: *mut ::list::ListAbstractStateMutPtr, l: *const ::list::ListAbstractStateMutPtr) -> *mut ::list::ListAbstractStateMutPtr;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_eq(this_ptr: *const ::list::ListAbstractStateMutPtr, l: *const ::list::ListAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_index(this_ptr: *mut ::list::ListAbstractStateMutPtr, i: ::libc::c_int) -> *mut *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_index_const(this_ptr: *const ::list::ListAbstractStateMutPtr, i: ::libc::c_int) -> *const *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_neq(this_ptr: *const ::list::ListAbstractStateMutPtr, l: *const ::list::ListAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_shl_l(this_ptr: *mut ::list::ListAbstractStateMutPtr, l: *const ::list::ListAbstractStateMutPtr) -> *mut ::list::ListAbstractStateMutPtr;
  pub fn qt_core_c_QList_QAbstractState_ptr_operator_shl_t(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> *mut ::list::ListAbstractStateMutPtr;
  pub fn qt_core_c_QList_QAbstractState_ptr_pop_back(this_ptr: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_pop_front(this_ptr: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_prepend(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QList_QAbstractState_ptr_push_back(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QList_QAbstractState_ptr_push_front(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QList_QAbstractState_ptr_removeAll(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_removeAt(this_ptr: *mut ::list::ListAbstractStateMutPtr, i: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractState_ptr_removeFirst(this_ptr: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_removeLast(this_ptr: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_removeOne(this_ptr: *mut ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_replace(this_ptr: *mut ::list::ListAbstractStateMutPtr, i: ::libc::c_int, t: *const *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QList_QAbstractState_ptr_reserve(this_ptr: *mut ::list::ListAbstractStateMutPtr, size: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractState_ptr_size(this_ptr: *const ::list::ListAbstractStateMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractState_ptr_startsWith(this_ptr: *const ::list::ListAbstractStateMutPtr, t: *const *mut ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QList_QAbstractState_ptr_swap_i_j(this_ptr: *mut ::list::ListAbstractStateMutPtr, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractState_ptr_swap_other(this_ptr: *mut ::list::ListAbstractStateMutPtr, other: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_takeAt(this_ptr: *mut ::list::ListAbstractStateMutPtr, i: ::libc::c_int) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_takeFirst(this_ptr: *mut ::list::ListAbstractStateMutPtr) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_takeLast(this_ptr: *mut ::list::ListAbstractStateMutPtr) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_toSet_to_output(this_ptr: *const ::list::ListAbstractStateMutPtr, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QList_QAbstractState_ptr_value_i(this_ptr: *const ::list::ListAbstractStateMutPtr, i: ::libc::c_int) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractState_ptr_value_i_defaultValue(this_ptr: *const ::list::ListAbstractStateMutPtr, i: ::libc::c_int, defaultValue: *const *mut ::abstract_state::AbstractState) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_append_QAbstractTransition(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_append_QList_QAbstractTransition_ptr(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_at(this_ptr: *const ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_back(this_ptr: *mut ::list::ListAbstractTransitionMutPtr) -> *mut *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_back_const(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_clear(this_ptr: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_constFirst(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_constLast(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_constructor_l(l: *const ::list::ListAbstractTransitionMutPtr, output: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_constructor_no_args(output: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_contains(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_count_no_args(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_count_t(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_destructor(this_ptr: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_empty(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_endsWith(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_first(this_ptr: *mut ::list::ListAbstractTransitionMutPtr) -> *mut *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_first_const(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_front(this_ptr: *mut ::list::ListAbstractTransitionMutPtr) -> *mut *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_front_const(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_indexOf_t(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_indexOf_t_from(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_insert(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int, t: *const *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_isEmpty(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_last(this_ptr: *mut ::list::ListAbstractTransitionMutPtr) -> *mut *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_lastIndexOf_t(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_lastIndexOf_t_from(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_last_const(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_length(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_mid_to_output_pos(this_ptr: *const ::list::ListAbstractTransitionMutPtr, pos: ::libc::c_int, output: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_mid_to_output_pos_length(this_ptr: *const ::list::ListAbstractTransitionMutPtr, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_move(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_add_assign_l(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, l: *const ::list::ListAbstractTransitionMutPtr) -> *mut ::list::ListAbstractTransitionMutPtr;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_add_assign_t(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> *mut ::list::ListAbstractTransitionMutPtr;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_add_to_output(this_ptr: *const ::list::ListAbstractTransitionMutPtr, l: *const ::list::ListAbstractTransitionMutPtr, output: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_assign(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, l: *const ::list::ListAbstractTransitionMutPtr) -> *mut ::list::ListAbstractTransitionMutPtr;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_eq(this_ptr: *const ::list::ListAbstractTransitionMutPtr, l: *const ::list::ListAbstractTransitionMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_index(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int) -> *mut *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_index_const(this_ptr: *const ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int) -> *const *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_neq(this_ptr: *const ::list::ListAbstractTransitionMutPtr, l: *const ::list::ListAbstractTransitionMutPtr) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_shl_l(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, l: *const ::list::ListAbstractTransitionMutPtr) -> *mut ::list::ListAbstractTransitionMutPtr;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_operator_shl_t(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> *mut ::list::ListAbstractTransitionMutPtr;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_pop_back(this_ptr: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_pop_front(this_ptr: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_prepend(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_push_back(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_push_front(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_removeAll(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_removeAt(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_removeFirst(this_ptr: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_removeLast(this_ptr: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_removeOne(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_replace(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int, t: *const *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_reserve(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, size: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_size(this_ptr: *const ::list::ListAbstractTransitionMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_startsWith(this_ptr: *const ::list::ListAbstractTransitionMutPtr, t: *const *mut ::abstract_transition::AbstractTransition) -> bool;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_swap_i_j(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_swap_other(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, other: *mut ::list::ListAbstractTransitionMutPtr);
  pub fn qt_core_c_QList_QAbstractTransition_ptr_takeAt(this_ptr: *mut ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_takeFirst(this_ptr: *mut ::list::ListAbstractTransitionMutPtr) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_takeLast(this_ptr: *mut ::list::ListAbstractTransitionMutPtr) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_value_i(this_ptr: *const ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QAbstractTransition_ptr_value_i_defaultValue(this_ptr: *const ::list::ListAbstractTransitionMutPtr, i: ::libc::c_int, defaultValue: *const *mut ::abstract_transition::AbstractTransition) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QList_QByteArray_append_QByteArray(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_append_QList_QByteArray(this_ptr: *mut ::list::ListByteArray, t: *const ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_at(this_ptr: *const ::list::ListByteArray, i: ::libc::c_int) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_back(this_ptr: *mut ::list::ListByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_back_const(this_ptr: *const ::list::ListByteArray) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_clear(this_ptr: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_constFirst(this_ptr: *const ::list::ListByteArray) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_constLast(this_ptr: *const ::list::ListByteArray) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_constructor_l(l: *const ::list::ListByteArray, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_constructor_no_args(output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_contains(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_count_no_args(this_ptr: *const ::list::ListByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_count_t(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_destructor(this_ptr: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_empty(this_ptr: *const ::list::ListByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_endsWith(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_first(this_ptr: *mut ::list::ListByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_first_const(this_ptr: *const ::list::ListByteArray) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_front(this_ptr: *mut ::list::ListByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_front_const(this_ptr: *const ::list::ListByteArray) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_indexOf_t(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_indexOf_t_from(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_insert(this_ptr: *mut ::list::ListByteArray, i: ::libc::c_int, t: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_isEmpty(this_ptr: *const ::list::ListByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_last(this_ptr: *mut ::list::ListByteArray) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_lastIndexOf_t(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_lastIndexOf_t_from(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_last_const(this_ptr: *const ::list::ListByteArray) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_length(this_ptr: *const ::list::ListByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_mid_to_output_pos(this_ptr: *const ::list::ListByteArray, pos: ::libc::c_int, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_mid_to_output_pos_length(this_ptr: *const ::list::ListByteArray, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_move(this_ptr: *mut ::list::ListByteArray, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QByteArray_operator_add_assign_l(this_ptr: *mut ::list::ListByteArray, l: *const ::list::ListByteArray) -> *mut ::list::ListByteArray;
  pub fn qt_core_c_QList_QByteArray_operator_add_assign_t(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> *mut ::list::ListByteArray;
  pub fn qt_core_c_QList_QByteArray_operator_add_to_output(this_ptr: *const ::list::ListByteArray, l: *const ::list::ListByteArray, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_operator_assign(this_ptr: *mut ::list::ListByteArray, l: *const ::list::ListByteArray) -> *mut ::list::ListByteArray;
  pub fn qt_core_c_QList_QByteArray_operator_eq(this_ptr: *const ::list::ListByteArray, l: *const ::list::ListByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_operator_index(this_ptr: *mut ::list::ListByteArray, i: ::libc::c_int) -> *mut ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_operator_index_const(this_ptr: *const ::list::ListByteArray, i: ::libc::c_int) -> *const ::byte_array::ByteArray;
  pub fn qt_core_c_QList_QByteArray_operator_neq(this_ptr: *const ::list::ListByteArray, l: *const ::list::ListByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_operator_shl_l(this_ptr: *mut ::list::ListByteArray, l: *const ::list::ListByteArray) -> *mut ::list::ListByteArray;
  pub fn qt_core_c_QList_QByteArray_operator_shl_t(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> *mut ::list::ListByteArray;
  pub fn qt_core_c_QList_QByteArray_pop_back(this_ptr: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_pop_front(this_ptr: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_prepend(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_push_back(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_push_front(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_removeAll(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_removeAt(this_ptr: *mut ::list::ListByteArray, i: ::libc::c_int);
  pub fn qt_core_c_QList_QByteArray_removeFirst(this_ptr: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_removeLast(this_ptr: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_removeOne(this_ptr: *mut ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_replace(this_ptr: *mut ::list::ListByteArray, i: ::libc::c_int, t: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_reserve(this_ptr: *mut ::list::ListByteArray, size: ::libc::c_int);
  pub fn qt_core_c_QList_QByteArray_size(this_ptr: *const ::list::ListByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QList_QByteArray_startsWith(this_ptr: *const ::list::ListByteArray, t: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QList_QByteArray_swap_i_j(this_ptr: *mut ::list::ListByteArray, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QByteArray_swap_other(this_ptr: *mut ::list::ListByteArray, other: *mut ::list::ListByteArray);
  pub fn qt_core_c_QList_QByteArray_takeAt_to_output(this_ptr: *mut ::list::ListByteArray, i: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_takeFirst_to_output(this_ptr: *mut ::list::ListByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_takeLast_to_output(this_ptr: *mut ::list::ListByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_value_to_output_i(this_ptr: *const ::list::ListByteArray, i: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QByteArray_value_to_output_i_defaultValue(this_ptr: *const ::list::ListByteArray, i: ::libc::c_int, defaultValue: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QList_QCommandLineOption_append_QCommandLineOption(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_append_QList_QCommandLineOption(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_at(this_ptr: *const ::list::ListCommandLineOption, i: ::libc::c_int) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_back(this_ptr: *mut ::list::ListCommandLineOption) -> *mut ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_back_const(this_ptr: *const ::list::ListCommandLineOption) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_clear(this_ptr: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_constFirst(this_ptr: *const ::list::ListCommandLineOption) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_constLast(this_ptr: *const ::list::ListCommandLineOption) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_constructor_l(l: *const ::list::ListCommandLineOption, output: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_constructor_no_args(output: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_count(this_ptr: *const ::list::ListCommandLineOption) -> ::libc::c_int;
  pub fn qt_core_c_QList_QCommandLineOption_destructor(this_ptr: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_empty(this_ptr: *const ::list::ListCommandLineOption) -> bool;
  pub fn qt_core_c_QList_QCommandLineOption_first(this_ptr: *mut ::list::ListCommandLineOption) -> *mut ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_first_const(this_ptr: *const ::list::ListCommandLineOption) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_front(this_ptr: *mut ::list::ListCommandLineOption) -> *mut ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_front_const(this_ptr: *const ::list::ListCommandLineOption) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_insert(this_ptr: *mut ::list::ListCommandLineOption, i: ::libc::c_int, t: *const ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_isEmpty(this_ptr: *const ::list::ListCommandLineOption) -> bool;
  pub fn qt_core_c_QList_QCommandLineOption_last(this_ptr: *mut ::list::ListCommandLineOption) -> *mut ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_last_const(this_ptr: *const ::list::ListCommandLineOption) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_length(this_ptr: *const ::list::ListCommandLineOption) -> ::libc::c_int;
  pub fn qt_core_c_QList_QCommandLineOption_mid_to_output_pos(this_ptr: *const ::list::ListCommandLineOption, pos: ::libc::c_int, output: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_mid_to_output_pos_length(this_ptr: *const ::list::ListCommandLineOption, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_move(this_ptr: *mut ::list::ListCommandLineOption, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QCommandLineOption_operator_add_assign_l(this_ptr: *mut ::list::ListCommandLineOption, l: *const ::list::ListCommandLineOption) -> *mut ::list::ListCommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_operator_add_assign_t(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::command_line_option::CommandLineOption) -> *mut ::list::ListCommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_operator_add_to_output(this_ptr: *const ::list::ListCommandLineOption, l: *const ::list::ListCommandLineOption, output: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_operator_assign(this_ptr: *mut ::list::ListCommandLineOption, l: *const ::list::ListCommandLineOption) -> *mut ::list::ListCommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_operator_index(this_ptr: *mut ::list::ListCommandLineOption, i: ::libc::c_int) -> *mut ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_operator_index_const(this_ptr: *const ::list::ListCommandLineOption, i: ::libc::c_int) -> *const ::command_line_option::CommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_operator_shl_l(this_ptr: *mut ::list::ListCommandLineOption, l: *const ::list::ListCommandLineOption) -> *mut ::list::ListCommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_operator_shl_t(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::command_line_option::CommandLineOption) -> *mut ::list::ListCommandLineOption;
  pub fn qt_core_c_QList_QCommandLineOption_pop_back(this_ptr: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_pop_front(this_ptr: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_prepend(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_push_back(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_push_front(this_ptr: *mut ::list::ListCommandLineOption, t: *const ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_removeAt(this_ptr: *mut ::list::ListCommandLineOption, i: ::libc::c_int);
  pub fn qt_core_c_QList_QCommandLineOption_removeFirst(this_ptr: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_removeLast(this_ptr: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_replace(this_ptr: *mut ::list::ListCommandLineOption, i: ::libc::c_int, t: *const ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_reserve(this_ptr: *mut ::list::ListCommandLineOption, size: ::libc::c_int);
  pub fn qt_core_c_QList_QCommandLineOption_size(this_ptr: *const ::list::ListCommandLineOption) -> ::libc::c_int;
  pub fn qt_core_c_QList_QCommandLineOption_swap_i_j(this_ptr: *mut ::list::ListCommandLineOption, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QCommandLineOption_swap_other(this_ptr: *mut ::list::ListCommandLineOption, other: *mut ::list::ListCommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_takeAt_to_output(this_ptr: *mut ::list::ListCommandLineOption, i: ::libc::c_int, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_takeFirst_to_output(this_ptr: *mut ::list::ListCommandLineOption, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QCommandLineOption_takeLast_to_output(this_ptr: *mut ::list::ListCommandLineOption, output: *mut ::command_line_option::CommandLineOption);
  pub fn qt_core_c_QList_QFileInfo_append_QFileInfo(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_append_QList_QFileInfo(this_ptr: *mut ::list::ListFileInfo, t: *const ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_at(this_ptr: *const ::list::ListFileInfo, i: ::libc::c_int) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_back(this_ptr: *mut ::list::ListFileInfo) -> *mut ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_back_const(this_ptr: *const ::list::ListFileInfo) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_clear(this_ptr: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_constFirst(this_ptr: *const ::list::ListFileInfo) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_constLast(this_ptr: *const ::list::ListFileInfo) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_constructor_l(l: *const ::list::ListFileInfo, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_constructor_no_args(output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_contains(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_count_no_args(this_ptr: *const ::list::ListFileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_count_t(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_destructor(this_ptr: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_empty(this_ptr: *const ::list::ListFileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_endsWith(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_first(this_ptr: *mut ::list::ListFileInfo) -> *mut ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_first_const(this_ptr: *const ::list::ListFileInfo) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_front(this_ptr: *mut ::list::ListFileInfo) -> *mut ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_front_const(this_ptr: *const ::list::ListFileInfo) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_indexOf_t(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_indexOf_t_from(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_insert(this_ptr: *mut ::list::ListFileInfo, i: ::libc::c_int, t: *const ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_isEmpty(this_ptr: *const ::list::ListFileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_last(this_ptr: *mut ::list::ListFileInfo) -> *mut ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_lastIndexOf_t(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_lastIndexOf_t_from(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_last_const(this_ptr: *const ::list::ListFileInfo) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_length(this_ptr: *const ::list::ListFileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_mid_to_output_pos(this_ptr: *const ::list::ListFileInfo, pos: ::libc::c_int, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_mid_to_output_pos_length(this_ptr: *const ::list::ListFileInfo, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_move(this_ptr: *mut ::list::ListFileInfo, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QFileInfo_operator_add_assign_l(this_ptr: *mut ::list::ListFileInfo, l: *const ::list::ListFileInfo) -> *mut ::list::ListFileInfo;
  pub fn qt_core_c_QList_QFileInfo_operator_add_assign_t(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> *mut ::list::ListFileInfo;
  pub fn qt_core_c_QList_QFileInfo_operator_add_to_output(this_ptr: *const ::list::ListFileInfo, l: *const ::list::ListFileInfo, output: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_operator_assign(this_ptr: *mut ::list::ListFileInfo, l: *const ::list::ListFileInfo) -> *mut ::list::ListFileInfo;
  pub fn qt_core_c_QList_QFileInfo_operator_eq(this_ptr: *const ::list::ListFileInfo, l: *const ::list::ListFileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_operator_index(this_ptr: *mut ::list::ListFileInfo, i: ::libc::c_int) -> *mut ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_operator_index_const(this_ptr: *const ::list::ListFileInfo, i: ::libc::c_int) -> *const ::file_info::FileInfo;
  pub fn qt_core_c_QList_QFileInfo_operator_neq(this_ptr: *const ::list::ListFileInfo, l: *const ::list::ListFileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_operator_shl_l(this_ptr: *mut ::list::ListFileInfo, l: *const ::list::ListFileInfo) -> *mut ::list::ListFileInfo;
  pub fn qt_core_c_QList_QFileInfo_operator_shl_t(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> *mut ::list::ListFileInfo;
  pub fn qt_core_c_QList_QFileInfo_pop_back(this_ptr: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_pop_front(this_ptr: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_prepend(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_push_back(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_push_front(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_removeAll(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_removeAt(this_ptr: *mut ::list::ListFileInfo, i: ::libc::c_int);
  pub fn qt_core_c_QList_QFileInfo_removeFirst(this_ptr: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_removeLast(this_ptr: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_removeOne(this_ptr: *mut ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_replace(this_ptr: *mut ::list::ListFileInfo, i: ::libc::c_int, t: *const ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_reserve(this_ptr: *mut ::list::ListFileInfo, size: ::libc::c_int);
  pub fn qt_core_c_QList_QFileInfo_size(this_ptr: *const ::list::ListFileInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QFileInfo_startsWith(this_ptr: *const ::list::ListFileInfo, t: *const ::file_info::FileInfo) -> bool;
  pub fn qt_core_c_QList_QFileInfo_swap_i_j(this_ptr: *mut ::list::ListFileInfo, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QFileInfo_swap_other(this_ptr: *mut ::list::ListFileInfo, other: *mut ::list::ListFileInfo);
  pub fn qt_core_c_QList_QFileInfo_takeAt_to_output(this_ptr: *mut ::list::ListFileInfo, i: ::libc::c_int, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_takeFirst_to_output(this_ptr: *mut ::list::ListFileInfo, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_takeLast_to_output(this_ptr: *mut ::list::ListFileInfo, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_value_to_output_i(this_ptr: *const ::list::ListFileInfo, i: ::libc::c_int, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QList_QFileInfo_value_to_output_i_defaultValue(this_ptr: *const ::list::ListFileInfo, i: ::libc::c_int, defaultValue: *const ::file_info::FileInfo, output: *mut ::file_info::FileInfo);
  pub fn qt_core_c_QList_QItemSelectionRange_append_QItemSelectionRange(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_append_QList_QItemSelectionRange(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_at(this_ptr: *const ::list::ListItemSelectionRange, i: ::libc::c_int) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_back(this_ptr: *mut ::list::ListItemSelectionRange) -> *mut ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_back_const(this_ptr: *const ::list::ListItemSelectionRange) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_clear(this_ptr: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_constFirst(this_ptr: *const ::list::ListItemSelectionRange) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_constLast(this_ptr: *const ::list::ListItemSelectionRange) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_constructor_l(l: *const ::list::ListItemSelectionRange, output: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_constructor_no_args(output: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_contains(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_count_no_args(this_ptr: *const ::list::ListItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_count_t(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_destructor(this_ptr: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_empty(this_ptr: *const ::list::ListItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_endsWith(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_first(this_ptr: *mut ::list::ListItemSelectionRange) -> *mut ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_first_const(this_ptr: *const ::list::ListItemSelectionRange) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_front(this_ptr: *mut ::list::ListItemSelectionRange) -> *mut ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_front_const(this_ptr: *const ::list::ListItemSelectionRange) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_indexOf_t(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_indexOf_t_from(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_insert(this_ptr: *mut ::list::ListItemSelectionRange, i: ::libc::c_int, t: *const ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_isEmpty(this_ptr: *const ::list::ListItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_last(this_ptr: *mut ::list::ListItemSelectionRange) -> *mut ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_lastIndexOf_t(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_lastIndexOf_t_from(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_last_const(this_ptr: *const ::list::ListItemSelectionRange) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_length(this_ptr: *const ::list::ListItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_mid_to_output_pos(this_ptr: *const ::list::ListItemSelectionRange, pos: ::libc::c_int, output: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_mid_to_output_pos_length(this_ptr: *const ::list::ListItemSelectionRange, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_move(this_ptr: *mut ::list::ListItemSelectionRange, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QItemSelectionRange_operator_add_assign_l(this_ptr: *mut ::list::ListItemSelectionRange, l: *const ::list::ListItemSelectionRange) -> *mut ::list::ListItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_add_assign_t(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> *mut ::list::ListItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_add_to_output(this_ptr: *const ::list::ListItemSelectionRange, l: *const ::list::ListItemSelectionRange, output: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_operator_assign(this_ptr: *mut ::list::ListItemSelectionRange, l: *const ::list::ListItemSelectionRange) -> *mut ::list::ListItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_eq(this_ptr: *const ::list::ListItemSelectionRange, l: *const ::list::ListItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_index(this_ptr: *mut ::list::ListItemSelectionRange, i: ::libc::c_int) -> *mut ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_index_const(this_ptr: *const ::list::ListItemSelectionRange, i: ::libc::c_int) -> *const ::item_selection_range::ItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_neq(this_ptr: *const ::list::ListItemSelectionRange, l: *const ::list::ListItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_shl_l(this_ptr: *mut ::list::ListItemSelectionRange, l: *const ::list::ListItemSelectionRange) -> *mut ::list::ListItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_operator_shl_t(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> *mut ::list::ListItemSelectionRange;
  pub fn qt_core_c_QList_QItemSelectionRange_pop_back(this_ptr: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_pop_front(this_ptr: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_prepend(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_push_back(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_push_front(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_removeAll(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_removeAt(this_ptr: *mut ::list::ListItemSelectionRange, i: ::libc::c_int);
  pub fn qt_core_c_QList_QItemSelectionRange_removeFirst(this_ptr: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_removeLast(this_ptr: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_removeOne(this_ptr: *mut ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_replace(this_ptr: *mut ::list::ListItemSelectionRange, i: ::libc::c_int, t: *const ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_reserve(this_ptr: *mut ::list::ListItemSelectionRange, size: ::libc::c_int);
  pub fn qt_core_c_QList_QItemSelectionRange_size(this_ptr: *const ::list::ListItemSelectionRange) -> ::libc::c_int;
  pub fn qt_core_c_QList_QItemSelectionRange_startsWith(this_ptr: *const ::list::ListItemSelectionRange, t: *const ::item_selection_range::ItemSelectionRange) -> bool;
  pub fn qt_core_c_QList_QItemSelectionRange_swap_i_j(this_ptr: *mut ::list::ListItemSelectionRange, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QItemSelectionRange_swap_other(this_ptr: *mut ::list::ListItemSelectionRange, other: *mut ::list::ListItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_takeAt_to_output(this_ptr: *mut ::list::ListItemSelectionRange, i: ::libc::c_int, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_takeFirst_to_output(this_ptr: *mut ::list::ListItemSelectionRange, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_takeLast_to_output(this_ptr: *mut ::list::ListItemSelectionRange, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_value_to_output_i(this_ptr: *const ::list::ListItemSelectionRange, i: ::libc::c_int, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QItemSelectionRange_value_to_output_i_defaultValue(this_ptr: *const ::list::ListItemSelectionRange, i: ::libc::c_int, defaultValue: *const ::item_selection_range::ItemSelectionRange, output: *mut ::item_selection_range::ItemSelectionRange);
  pub fn qt_core_c_QList_QLocale_Country_append_QList_QLocale_Country(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_append_QLocale_Country(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country);
  pub fn qt_core_c_QList_QLocale_Country_at(this_ptr: *const ::list::ListLocaleCountry, i: ::libc::c_int) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_back(this_ptr: *mut ::list::ListLocaleCountry) -> *mut ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_back_const(this_ptr: *const ::list::ListLocaleCountry) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_clear(this_ptr: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_constFirst(this_ptr: *const ::list::ListLocaleCountry) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_constLast(this_ptr: *const ::list::ListLocaleCountry) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_constructor_l(l: *const ::list::ListLocaleCountry, output: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_constructor_no_args(output: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_contains(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_count_no_args(this_ptr: *const ::list::ListLocaleCountry) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_count_t(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_destructor(this_ptr: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_empty(this_ptr: *const ::list::ListLocaleCountry) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_endsWith(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_first(this_ptr: *mut ::list::ListLocaleCountry) -> *mut ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_first_const(this_ptr: *const ::list::ListLocaleCountry) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_front(this_ptr: *mut ::list::ListLocaleCountry) -> *mut ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_front_const(this_ptr: *const ::list::ListLocaleCountry) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_indexOf_t(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_indexOf_t_from(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_insert(this_ptr: *mut ::list::ListLocaleCountry, i: ::libc::c_int, t: *const ::locale::Country);
  pub fn qt_core_c_QList_QLocale_Country_isEmpty(this_ptr: *const ::list::ListLocaleCountry) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_last(this_ptr: *mut ::list::ListLocaleCountry) -> *mut ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_lastIndexOf_t(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_lastIndexOf_t_from(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_last_const(this_ptr: *const ::list::ListLocaleCountry) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_length(this_ptr: *const ::list::ListLocaleCountry) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_mid_to_output_pos(this_ptr: *const ::list::ListLocaleCountry, pos: ::libc::c_int, output: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_mid_to_output_pos_length(this_ptr: *const ::list::ListLocaleCountry, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_move(this_ptr: *mut ::list::ListLocaleCountry, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_Country_operator_add_assign_l(this_ptr: *mut ::list::ListLocaleCountry, l: *const ::list::ListLocaleCountry) -> *mut ::list::ListLocaleCountry;
  pub fn qt_core_c_QList_QLocale_Country_operator_add_assign_t(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country) -> *mut ::list::ListLocaleCountry;
  pub fn qt_core_c_QList_QLocale_Country_operator_add_to_output(this_ptr: *const ::list::ListLocaleCountry, l: *const ::list::ListLocaleCountry, output: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_operator_assign(this_ptr: *mut ::list::ListLocaleCountry, l: *const ::list::ListLocaleCountry) -> *mut ::list::ListLocaleCountry;
  pub fn qt_core_c_QList_QLocale_Country_operator_eq(this_ptr: *const ::list::ListLocaleCountry, l: *const ::list::ListLocaleCountry) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_operator_index(this_ptr: *mut ::list::ListLocaleCountry, i: ::libc::c_int) -> *mut ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_operator_index_const(this_ptr: *const ::list::ListLocaleCountry, i: ::libc::c_int) -> *const ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_operator_neq(this_ptr: *const ::list::ListLocaleCountry, l: *const ::list::ListLocaleCountry) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_operator_shl_l(this_ptr: *mut ::list::ListLocaleCountry, l: *const ::list::ListLocaleCountry) -> *mut ::list::ListLocaleCountry;
  pub fn qt_core_c_QList_QLocale_Country_operator_shl_t(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country) -> *mut ::list::ListLocaleCountry;
  pub fn qt_core_c_QList_QLocale_Country_pop_back(this_ptr: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_pop_front(this_ptr: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_prepend(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country);
  pub fn qt_core_c_QList_QLocale_Country_push_back(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country);
  pub fn qt_core_c_QList_QLocale_Country_push_front(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country);
  pub fn qt_core_c_QList_QLocale_Country_removeAll(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_removeAt(this_ptr: *mut ::list::ListLocaleCountry, i: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_Country_removeFirst(this_ptr: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_removeLast(this_ptr: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_removeOne(this_ptr: *mut ::list::ListLocaleCountry, t: *const ::locale::Country) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_replace(this_ptr: *mut ::list::ListLocaleCountry, i: ::libc::c_int, t: *const ::locale::Country);
  pub fn qt_core_c_QList_QLocale_Country_reserve(this_ptr: *mut ::list::ListLocaleCountry, size: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_Country_size(this_ptr: *const ::list::ListLocaleCountry) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_Country_startsWith(this_ptr: *const ::list::ListLocaleCountry, t: *const ::locale::Country) -> bool;
  pub fn qt_core_c_QList_QLocale_Country_swap_i_j(this_ptr: *mut ::list::ListLocaleCountry, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_Country_swap_other(this_ptr: *mut ::list::ListLocaleCountry, other: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QList_QLocale_Country_takeAt(this_ptr: *mut ::list::ListLocaleCountry, i: ::libc::c_int) -> ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_takeFirst(this_ptr: *mut ::list::ListLocaleCountry) -> ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_takeLast(this_ptr: *mut ::list::ListLocaleCountry) -> ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_value_i(this_ptr: *const ::list::ListLocaleCountry, i: ::libc::c_int) -> ::locale::Country;
  pub fn qt_core_c_QList_QLocale_Country_value_i_defaultValue(this_ptr: *const ::list::ListLocaleCountry, i: ::libc::c_int, defaultValue: *const ::locale::Country) -> ::locale::Country;
  pub fn qt_core_c_QList_QLocale_append_QList_QLocale(this_ptr: *mut ::list::ListLocale, t: *const ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_append_QLocale(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_at(this_ptr: *const ::list::ListLocale, i: ::libc::c_int) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_back(this_ptr: *mut ::list::ListLocale) -> *mut ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_back_const(this_ptr: *const ::list::ListLocale) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_clear(this_ptr: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_constFirst(this_ptr: *const ::list::ListLocale) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_constLast(this_ptr: *const ::list::ListLocale) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_constructor_l(l: *const ::list::ListLocale, output: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_constructor_no_args(output: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_contains(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale) -> bool;
  pub fn qt_core_c_QList_QLocale_count_no_args(this_ptr: *const ::list::ListLocale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_count_t(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_destructor(this_ptr: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_empty(this_ptr: *const ::list::ListLocale) -> bool;
  pub fn qt_core_c_QList_QLocale_endsWith(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale) -> bool;
  pub fn qt_core_c_QList_QLocale_first(this_ptr: *mut ::list::ListLocale) -> *mut ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_first_const(this_ptr: *const ::list::ListLocale) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_front(this_ptr: *mut ::list::ListLocale) -> *mut ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_front_const(this_ptr: *const ::list::ListLocale) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_indexOf_t(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_indexOf_t_from(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_insert(this_ptr: *mut ::list::ListLocale, i: ::libc::c_int, t: *const ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_isEmpty(this_ptr: *const ::list::ListLocale) -> bool;
  pub fn qt_core_c_QList_QLocale_last(this_ptr: *mut ::list::ListLocale) -> *mut ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_lastIndexOf_t(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_lastIndexOf_t_from(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_last_const(this_ptr: *const ::list::ListLocale) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_length(this_ptr: *const ::list::ListLocale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_mid_to_output_pos(this_ptr: *const ::list::ListLocale, pos: ::libc::c_int, output: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_mid_to_output_pos_length(this_ptr: *const ::list::ListLocale, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_move(this_ptr: *mut ::list::ListLocale, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_operator_add_assign_l(this_ptr: *mut ::list::ListLocale, l: *const ::list::ListLocale) -> *mut ::list::ListLocale;
  pub fn qt_core_c_QList_QLocale_operator_add_assign_t(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale) -> *mut ::list::ListLocale;
  pub fn qt_core_c_QList_QLocale_operator_add_to_output(this_ptr: *const ::list::ListLocale, l: *const ::list::ListLocale, output: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_operator_assign(this_ptr: *mut ::list::ListLocale, l: *const ::list::ListLocale) -> *mut ::list::ListLocale;
  pub fn qt_core_c_QList_QLocale_operator_eq(this_ptr: *const ::list::ListLocale, l: *const ::list::ListLocale) -> bool;
  pub fn qt_core_c_QList_QLocale_operator_index(this_ptr: *mut ::list::ListLocale, i: ::libc::c_int) -> *mut ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_operator_index_const(this_ptr: *const ::list::ListLocale, i: ::libc::c_int) -> *const ::locale::Locale;
  pub fn qt_core_c_QList_QLocale_operator_neq(this_ptr: *const ::list::ListLocale, l: *const ::list::ListLocale) -> bool;
  pub fn qt_core_c_QList_QLocale_operator_shl_l(this_ptr: *mut ::list::ListLocale, l: *const ::list::ListLocale) -> *mut ::list::ListLocale;
  pub fn qt_core_c_QList_QLocale_operator_shl_t(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale) -> *mut ::list::ListLocale;
  pub fn qt_core_c_QList_QLocale_pop_back(this_ptr: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_pop_front(this_ptr: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_prepend(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_push_back(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_push_front(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_removeAll(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_removeAt(this_ptr: *mut ::list::ListLocale, i: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_removeFirst(this_ptr: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_removeLast(this_ptr: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_removeOne(this_ptr: *mut ::list::ListLocale, t: *const ::locale::Locale) -> bool;
  pub fn qt_core_c_QList_QLocale_replace(this_ptr: *mut ::list::ListLocale, i: ::libc::c_int, t: *const ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_reserve(this_ptr: *mut ::list::ListLocale, size: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_size(this_ptr: *const ::list::ListLocale) -> ::libc::c_int;
  pub fn qt_core_c_QList_QLocale_startsWith(this_ptr: *const ::list::ListLocale, t: *const ::locale::Locale) -> bool;
  pub fn qt_core_c_QList_QLocale_swap_i_j(this_ptr: *mut ::list::ListLocale, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QLocale_swap_other(this_ptr: *mut ::list::ListLocale, other: *mut ::list::ListLocale);
  pub fn qt_core_c_QList_QLocale_takeAt_to_output(this_ptr: *mut ::list::ListLocale, i: ::libc::c_int, output: *mut ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_takeFirst_to_output(this_ptr: *mut ::list::ListLocale, output: *mut ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_takeLast_to_output(this_ptr: *mut ::list::ListLocale, output: *mut ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_value_to_output_i(this_ptr: *const ::list::ListLocale, i: ::libc::c_int, output: *mut ::locale::Locale);
  pub fn qt_core_c_QList_QLocale_value_to_output_i_defaultValue(this_ptr: *const ::list::ListLocale, i: ::libc::c_int, defaultValue: *const ::locale::Locale, output: *mut ::locale::Locale);
  pub fn qt_core_c_QList_QMimeType_append_QList_QMimeType(this_ptr: *mut ::list::ListMimeType, t: *const ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_append_QMimeType(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_at(this_ptr: *const ::list::ListMimeType, i: ::libc::c_int) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_back(this_ptr: *mut ::list::ListMimeType) -> *mut ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_back_const(this_ptr: *const ::list::ListMimeType) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_clear(this_ptr: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_constFirst(this_ptr: *const ::list::ListMimeType) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_constLast(this_ptr: *const ::list::ListMimeType) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_constructor_l(l: *const ::list::ListMimeType, output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_constructor_no_args(output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_contains(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_count_no_args(this_ptr: *const ::list::ListMimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_count_t(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_destructor(this_ptr: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_empty(this_ptr: *const ::list::ListMimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_endsWith(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_first(this_ptr: *mut ::list::ListMimeType) -> *mut ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_first_const(this_ptr: *const ::list::ListMimeType) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_front(this_ptr: *mut ::list::ListMimeType) -> *mut ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_front_const(this_ptr: *const ::list::ListMimeType) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_indexOf_t(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_indexOf_t_from(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_insert(this_ptr: *mut ::list::ListMimeType, i: ::libc::c_int, t: *const ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_isEmpty(this_ptr: *const ::list::ListMimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_last(this_ptr: *mut ::list::ListMimeType) -> *mut ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_lastIndexOf_t(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_lastIndexOf_t_from(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_last_const(this_ptr: *const ::list::ListMimeType) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_length(this_ptr: *const ::list::ListMimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_mid_to_output_pos(this_ptr: *const ::list::ListMimeType, pos: ::libc::c_int, output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_mid_to_output_pos_length(this_ptr: *const ::list::ListMimeType, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_move(this_ptr: *mut ::list::ListMimeType, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QMimeType_operator_add_assign_l(this_ptr: *mut ::list::ListMimeType, l: *const ::list::ListMimeType) -> *mut ::list::ListMimeType;
  pub fn qt_core_c_QList_QMimeType_operator_add_assign_t(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType) -> *mut ::list::ListMimeType;
  pub fn qt_core_c_QList_QMimeType_operator_add_to_output(this_ptr: *const ::list::ListMimeType, l: *const ::list::ListMimeType, output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_operator_assign(this_ptr: *mut ::list::ListMimeType, l: *const ::list::ListMimeType) -> *mut ::list::ListMimeType;
  pub fn qt_core_c_QList_QMimeType_operator_eq(this_ptr: *const ::list::ListMimeType, l: *const ::list::ListMimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_operator_index(this_ptr: *mut ::list::ListMimeType, i: ::libc::c_int) -> *mut ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_operator_index_const(this_ptr: *const ::list::ListMimeType, i: ::libc::c_int) -> *const ::mime_type::MimeType;
  pub fn qt_core_c_QList_QMimeType_operator_neq(this_ptr: *const ::list::ListMimeType, l: *const ::list::ListMimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_operator_shl_l(this_ptr: *mut ::list::ListMimeType, l: *const ::list::ListMimeType) -> *mut ::list::ListMimeType;
  pub fn qt_core_c_QList_QMimeType_operator_shl_t(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType) -> *mut ::list::ListMimeType;
  pub fn qt_core_c_QList_QMimeType_pop_back(this_ptr: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_pop_front(this_ptr: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_prepend(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_push_back(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_push_front(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_removeAll(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_removeAt(this_ptr: *mut ::list::ListMimeType, i: ::libc::c_int);
  pub fn qt_core_c_QList_QMimeType_removeFirst(this_ptr: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_removeLast(this_ptr: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_removeOne(this_ptr: *mut ::list::ListMimeType, t: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_replace(this_ptr: *mut ::list::ListMimeType, i: ::libc::c_int, t: *const ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_reserve(this_ptr: *mut ::list::ListMimeType, size: ::libc::c_int);
  pub fn qt_core_c_QList_QMimeType_size(this_ptr: *const ::list::ListMimeType) -> ::libc::c_int;
  pub fn qt_core_c_QList_QMimeType_startsWith(this_ptr: *const ::list::ListMimeType, t: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QList_QMimeType_swap_i_j(this_ptr: *mut ::list::ListMimeType, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QMimeType_swap_other(this_ptr: *mut ::list::ListMimeType, other: *mut ::list::ListMimeType);
  pub fn qt_core_c_QList_QMimeType_takeAt_to_output(this_ptr: *mut ::list::ListMimeType, i: ::libc::c_int, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_takeFirst_to_output(this_ptr: *mut ::list::ListMimeType, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_takeLast_to_output(this_ptr: *mut ::list::ListMimeType, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_value_to_output_i(this_ptr: *const ::list::ListMimeType, i: ::libc::c_int, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QList_QMimeType_value_to_output_i_defaultValue(this_ptr: *const ::list::ListMimeType, i: ::libc::c_int, defaultValue: *const ::mime_type::MimeType, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QList_QModelIndex_append_QList_QModelIndex(this_ptr: *mut ::list::ListModelIndex, t: *const ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_append_QModelIndex(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_at(this_ptr: *const ::list::ListModelIndex, i: ::libc::c_int) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_back(this_ptr: *mut ::list::ListModelIndex) -> *mut ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_back_const(this_ptr: *const ::list::ListModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_clear(this_ptr: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_constFirst(this_ptr: *const ::list::ListModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_constLast(this_ptr: *const ::list::ListModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_constructor_l(l: *const ::list::ListModelIndex, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_constructor_no_args(output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_contains(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_count_no_args(this_ptr: *const ::list::ListModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_count_t(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_destructor(this_ptr: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_empty(this_ptr: *const ::list::ListModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_endsWith(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_first(this_ptr: *mut ::list::ListModelIndex) -> *mut ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_first_const(this_ptr: *const ::list::ListModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_front(this_ptr: *mut ::list::ListModelIndex) -> *mut ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_front_const(this_ptr: *const ::list::ListModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_indexOf_t(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_indexOf_t_from(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_insert(this_ptr: *mut ::list::ListModelIndex, i: ::libc::c_int, t: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_isEmpty(this_ptr: *const ::list::ListModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_last(this_ptr: *mut ::list::ListModelIndex) -> *mut ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_lastIndexOf_t(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_lastIndexOf_t_from(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_last_const(this_ptr: *const ::list::ListModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_length(this_ptr: *const ::list::ListModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_mid_to_output_pos(this_ptr: *const ::list::ListModelIndex, pos: ::libc::c_int, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_mid_to_output_pos_length(this_ptr: *const ::list::ListModelIndex, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_move(this_ptr: *mut ::list::ListModelIndex, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QModelIndex_operator_add_assign_l(this_ptr: *mut ::list::ListModelIndex, l: *const ::list::ListModelIndex) -> *mut ::list::ListModelIndex;
  pub fn qt_core_c_QList_QModelIndex_operator_add_assign_t(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> *mut ::list::ListModelIndex;
  pub fn qt_core_c_QList_QModelIndex_operator_add_to_output(this_ptr: *const ::list::ListModelIndex, l: *const ::list::ListModelIndex, output: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_operator_assign(this_ptr: *mut ::list::ListModelIndex, l: *const ::list::ListModelIndex) -> *mut ::list::ListModelIndex;
  pub fn qt_core_c_QList_QModelIndex_operator_eq(this_ptr: *const ::list::ListModelIndex, l: *const ::list::ListModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_operator_index(this_ptr: *mut ::list::ListModelIndex, i: ::libc::c_int) -> *mut ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_operator_index_const(this_ptr: *const ::list::ListModelIndex, i: ::libc::c_int) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QList_QModelIndex_operator_neq(this_ptr: *const ::list::ListModelIndex, l: *const ::list::ListModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_operator_shl_l(this_ptr: *mut ::list::ListModelIndex, l: *const ::list::ListModelIndex) -> *mut ::list::ListModelIndex;
  pub fn qt_core_c_QList_QModelIndex_operator_shl_t(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> *mut ::list::ListModelIndex;
  pub fn qt_core_c_QList_QModelIndex_pop_back(this_ptr: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_pop_front(this_ptr: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_prepend(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_push_back(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_push_front(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_removeAll(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_removeAt(this_ptr: *mut ::list::ListModelIndex, i: ::libc::c_int);
  pub fn qt_core_c_QList_QModelIndex_removeFirst(this_ptr: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_removeLast(this_ptr: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_removeOne(this_ptr: *mut ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_replace(this_ptr: *mut ::list::ListModelIndex, i: ::libc::c_int, t: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_reserve(this_ptr: *mut ::list::ListModelIndex, size: ::libc::c_int);
  pub fn qt_core_c_QList_QModelIndex_size(this_ptr: *const ::list::ListModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QModelIndex_startsWith(this_ptr: *const ::list::ListModelIndex, t: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QList_QModelIndex_swap_i_j(this_ptr: *mut ::list::ListModelIndex, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QModelIndex_swap_other(this_ptr: *mut ::list::ListModelIndex, other: *mut ::list::ListModelIndex);
  pub fn qt_core_c_QList_QModelIndex_takeAt_to_output(this_ptr: *mut ::list::ListModelIndex, i: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_takeFirst_to_output(this_ptr: *mut ::list::ListModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_takeLast_to_output(this_ptr: *mut ::list::ListModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_value_to_output_i(this_ptr: *const ::list::ListModelIndex, i: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QModelIndex_value_to_output_i_defaultValue(this_ptr: *const ::list::ListModelIndex, i: ::libc::c_int, defaultValue: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QList_QObject_ptr_append_QList_QObject_ptr(this_ptr: *mut ::list::ListObjectMutPtr, t: *const ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_append_QObject(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object);
  pub fn qt_core_c_QList_QObject_ptr_at(this_ptr: *const ::list::ListObjectMutPtr, i: ::libc::c_int) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_back(this_ptr: *mut ::list::ListObjectMutPtr) -> *mut *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_back_const(this_ptr: *const ::list::ListObjectMutPtr) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_clear(this_ptr: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_constFirst(this_ptr: *const ::list::ListObjectMutPtr) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_constLast(this_ptr: *const ::list::ListObjectMutPtr) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_constructor_l(l: *const ::list::ListObjectMutPtr, output: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_constructor_no_args(output: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_contains(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_count_no_args(this_ptr: *const ::list::ListObjectMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_count_t(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_destructor(this_ptr: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_empty(this_ptr: *const ::list::ListObjectMutPtr) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_endsWith(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_first(this_ptr: *mut ::list::ListObjectMutPtr) -> *mut *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_first_const(this_ptr: *const ::list::ListObjectMutPtr) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_front(this_ptr: *mut ::list::ListObjectMutPtr) -> *mut *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_front_const(this_ptr: *const ::list::ListObjectMutPtr) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_indexOf_t(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_indexOf_t_from(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_insert(this_ptr: *mut ::list::ListObjectMutPtr, i: ::libc::c_int, t: *const *mut ::object::Object);
  pub fn qt_core_c_QList_QObject_ptr_isEmpty(this_ptr: *const ::list::ListObjectMutPtr) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_last(this_ptr: *mut ::list::ListObjectMutPtr) -> *mut *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_lastIndexOf_t(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_lastIndexOf_t_from(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_last_const(this_ptr: *const ::list::ListObjectMutPtr) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_length(this_ptr: *const ::list::ListObjectMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_mid_to_output_pos(this_ptr: *const ::list::ListObjectMutPtr, pos: ::libc::c_int, output: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_mid_to_output_pos_length(this_ptr: *const ::list::ListObjectMutPtr, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_move(this_ptr: *mut ::list::ListObjectMutPtr, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QObject_ptr_operator_add_assign_l(this_ptr: *mut ::list::ListObjectMutPtr, l: *const ::list::ListObjectMutPtr) -> *mut ::list::ListObjectMutPtr;
  pub fn qt_core_c_QList_QObject_ptr_operator_add_assign_t(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> *mut ::list::ListObjectMutPtr;
  pub fn qt_core_c_QList_QObject_ptr_operator_add_to_output(this_ptr: *const ::list::ListObjectMutPtr, l: *const ::list::ListObjectMutPtr, output: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_operator_assign(this_ptr: *mut ::list::ListObjectMutPtr, l: *const ::list::ListObjectMutPtr) -> *mut ::list::ListObjectMutPtr;
  pub fn qt_core_c_QList_QObject_ptr_operator_eq(this_ptr: *const ::list::ListObjectMutPtr, l: *const ::list::ListObjectMutPtr) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_operator_index(this_ptr: *mut ::list::ListObjectMutPtr, i: ::libc::c_int) -> *mut *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_operator_index_const(this_ptr: *const ::list::ListObjectMutPtr, i: ::libc::c_int) -> *const *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_operator_neq(this_ptr: *const ::list::ListObjectMutPtr, l: *const ::list::ListObjectMutPtr) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_operator_shl_l(this_ptr: *mut ::list::ListObjectMutPtr, l: *const ::list::ListObjectMutPtr) -> *mut ::list::ListObjectMutPtr;
  pub fn qt_core_c_QList_QObject_ptr_operator_shl_t(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> *mut ::list::ListObjectMutPtr;
  pub fn qt_core_c_QList_QObject_ptr_pop_back(this_ptr: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_pop_front(this_ptr: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_prepend(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object);
  pub fn qt_core_c_QList_QObject_ptr_push_back(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object);
  pub fn qt_core_c_QList_QObject_ptr_push_front(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object);
  pub fn qt_core_c_QList_QObject_ptr_removeAll(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_removeAt(this_ptr: *mut ::list::ListObjectMutPtr, i: ::libc::c_int);
  pub fn qt_core_c_QList_QObject_ptr_removeFirst(this_ptr: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_removeLast(this_ptr: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_removeOne(this_ptr: *mut ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_replace(this_ptr: *mut ::list::ListObjectMutPtr, i: ::libc::c_int, t: *const *mut ::object::Object);
  pub fn qt_core_c_QList_QObject_ptr_reserve(this_ptr: *mut ::list::ListObjectMutPtr, size: ::libc::c_int);
  pub fn qt_core_c_QList_QObject_ptr_size(this_ptr: *const ::list::ListObjectMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QList_QObject_ptr_startsWith(this_ptr: *const ::list::ListObjectMutPtr, t: *const *mut ::object::Object) -> bool;
  pub fn qt_core_c_QList_QObject_ptr_swap_i_j(this_ptr: *mut ::list::ListObjectMutPtr, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QObject_ptr_swap_other(this_ptr: *mut ::list::ListObjectMutPtr, other: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QList_QObject_ptr_takeAt(this_ptr: *mut ::list::ListObjectMutPtr, i: ::libc::c_int) -> *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_takeFirst(this_ptr: *mut ::list::ListObjectMutPtr) -> *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_takeLast(this_ptr: *mut ::list::ListObjectMutPtr) -> *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_value_i(this_ptr: *const ::list::ListObjectMutPtr, i: ::libc::c_int) -> *mut ::object::Object;
  pub fn qt_core_c_QList_QObject_ptr_value_i_defaultValue(this_ptr: *const ::list::ListObjectMutPtr, i: ::libc::c_int, defaultValue: *const *mut ::object::Object) -> *mut ::object::Object;
  pub fn qt_core_c_QList_QPair_QString_QString_append_QList_QPair_QString_QString(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_append_QPair_QString_QString(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_at(this_ptr: *const ::list::ListPairPairStringString, i: ::libc::c_int) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_back(this_ptr: *mut ::list::ListPairPairStringString) -> *mut ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_back_const(this_ptr: *const ::list::ListPairPairStringString) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_clear(this_ptr: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_constFirst(this_ptr: *const ::list::ListPairPairStringString) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_constLast(this_ptr: *const ::list::ListPairPairStringString) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_constructor_l(l: *const ::list::ListPairPairStringString, output: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_constructor_no_args(output: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_contains(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_count_no_args(this_ptr: *const ::list::ListPairPairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_count_t(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_destructor(this_ptr: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_empty(this_ptr: *const ::list::ListPairPairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_endsWith(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_first(this_ptr: *mut ::list::ListPairPairStringString) -> *mut ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_first_const(this_ptr: *const ::list::ListPairPairStringString) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_front(this_ptr: *mut ::list::ListPairPairStringString) -> *mut ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_front_const(this_ptr: *const ::list::ListPairPairStringString) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_indexOf_t(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_indexOf_t_from(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_insert(this_ptr: *mut ::list::ListPairPairStringString, i: ::libc::c_int, t: *const ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_isEmpty(this_ptr: *const ::list::ListPairPairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_last(this_ptr: *mut ::list::ListPairPairStringString) -> *mut ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_lastIndexOf_t(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_lastIndexOf_t_from(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_last_const(this_ptr: *const ::list::ListPairPairStringString) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_length(this_ptr: *const ::list::ListPairPairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_mid_to_output_pos(this_ptr: *const ::list::ListPairPairStringString, pos: ::libc::c_int, output: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_mid_to_output_pos_length(this_ptr: *const ::list::ListPairPairStringString, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_move(this_ptr: *mut ::list::ListPairPairStringString, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QPair_QString_QString_operator_add_assign_l(this_ptr: *mut ::list::ListPairPairStringString, l: *const ::list::ListPairPairStringString) -> *mut ::list::ListPairPairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_add_assign_t(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> *mut ::list::ListPairPairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_add_to_output(this_ptr: *const ::list::ListPairPairStringString, l: *const ::list::ListPairPairStringString, output: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_operator_assign(this_ptr: *mut ::list::ListPairPairStringString, l: *const ::list::ListPairPairStringString) -> *mut ::list::ListPairPairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_eq(this_ptr: *const ::list::ListPairPairStringString, l: *const ::list::ListPairPairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_index(this_ptr: *mut ::list::ListPairPairStringString, i: ::libc::c_int) -> *mut ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_index_const(this_ptr: *const ::list::ListPairPairStringString, i: ::libc::c_int) -> *const ::pair::PairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_neq(this_ptr: *const ::list::ListPairPairStringString, l: *const ::list::ListPairPairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_shl_l(this_ptr: *mut ::list::ListPairPairStringString, l: *const ::list::ListPairPairStringString) -> *mut ::list::ListPairPairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_operator_shl_t(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> *mut ::list::ListPairPairStringString;
  pub fn qt_core_c_QList_QPair_QString_QString_pop_back(this_ptr: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_pop_front(this_ptr: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_prepend(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_push_back(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_push_front(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_removeAll(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_removeAt(this_ptr: *mut ::list::ListPairPairStringString, i: ::libc::c_int);
  pub fn qt_core_c_QList_QPair_QString_QString_removeFirst(this_ptr: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_removeLast(this_ptr: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_removeOne(this_ptr: *mut ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_replace(this_ptr: *mut ::list::ListPairPairStringString, i: ::libc::c_int, t: *const ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_reserve(this_ptr: *mut ::list::ListPairPairStringString, size: ::libc::c_int);
  pub fn qt_core_c_QList_QPair_QString_QString_size(this_ptr: *const ::list::ListPairPairStringString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPair_QString_QString_startsWith(this_ptr: *const ::list::ListPairPairStringString, t: *const ::pair::PairStringString) -> bool;
  pub fn qt_core_c_QList_QPair_QString_QString_swap_i_j(this_ptr: *mut ::list::ListPairPairStringString, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QPair_QString_QString_swap_other(this_ptr: *mut ::list::ListPairPairStringString, other: *mut ::list::ListPairPairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_takeAt_to_output(this_ptr: *mut ::list::ListPairPairStringString, i: ::libc::c_int, output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_takeFirst_to_output(this_ptr: *mut ::list::ListPairPairStringString, output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_takeLast_to_output(this_ptr: *mut ::list::ListPairPairStringString, output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_value_to_output_i(this_ptr: *const ::list::ListPairPairStringString, i: ::libc::c_int, output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QList_QPair_QString_QString_value_to_output_i_defaultValue(this_ptr: *const ::list::ListPairPairStringString, i: ::libc::c_int, defaultValue: *const ::pair::PairStringString, output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QList_QPersistentModelIndex_append_QList_QPersistentModelIndex(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_append_QPersistentModelIndex(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_at(this_ptr: *const ::list::ListPersistentModelIndex, i: ::libc::c_int) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_back(this_ptr: *mut ::list::ListPersistentModelIndex) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_back_const(this_ptr: *const ::list::ListPersistentModelIndex) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_clear(this_ptr: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_constFirst(this_ptr: *const ::list::ListPersistentModelIndex) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_constLast(this_ptr: *const ::list::ListPersistentModelIndex) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_constructor_l(l: *const ::list::ListPersistentModelIndex, output: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_constructor_no_args(output: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_contains(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_count_no_args(this_ptr: *const ::list::ListPersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_count_t(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_destructor(this_ptr: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_empty(this_ptr: *const ::list::ListPersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_endsWith(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_first(this_ptr: *mut ::list::ListPersistentModelIndex) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_first_const(this_ptr: *const ::list::ListPersistentModelIndex) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_front(this_ptr: *mut ::list::ListPersistentModelIndex) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_front_const(this_ptr: *const ::list::ListPersistentModelIndex) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_indexOf_t(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_indexOf_t_from(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_insert(this_ptr: *mut ::list::ListPersistentModelIndex, i: ::libc::c_int, t: *const ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_isEmpty(this_ptr: *const ::list::ListPersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_last(this_ptr: *mut ::list::ListPersistentModelIndex) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_lastIndexOf_t(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_lastIndexOf_t_from(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_last_const(this_ptr: *const ::list::ListPersistentModelIndex) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_length(this_ptr: *const ::list::ListPersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_mid_to_output_pos(this_ptr: *const ::list::ListPersistentModelIndex, pos: ::libc::c_int, output: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_mid_to_output_pos_length(this_ptr: *const ::list::ListPersistentModelIndex, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_move(this_ptr: *mut ::list::ListPersistentModelIndex, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_add_assign_l(this_ptr: *mut ::list::ListPersistentModelIndex, l: *const ::list::ListPersistentModelIndex) -> *mut ::list::ListPersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_add_assign_t(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> *mut ::list::ListPersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_add_to_output(this_ptr: *const ::list::ListPersistentModelIndex, l: *const ::list::ListPersistentModelIndex, output: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_assign(this_ptr: *mut ::list::ListPersistentModelIndex, l: *const ::list::ListPersistentModelIndex) -> *mut ::list::ListPersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_eq(this_ptr: *const ::list::ListPersistentModelIndex, l: *const ::list::ListPersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_index(this_ptr: *mut ::list::ListPersistentModelIndex, i: ::libc::c_int) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_index_const(this_ptr: *const ::list::ListPersistentModelIndex, i: ::libc::c_int) -> *const ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_neq(this_ptr: *const ::list::ListPersistentModelIndex, l: *const ::list::ListPersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_shl_l(this_ptr: *mut ::list::ListPersistentModelIndex, l: *const ::list::ListPersistentModelIndex) -> *mut ::list::ListPersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_operator_shl_t(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> *mut ::list::ListPersistentModelIndex;
  pub fn qt_core_c_QList_QPersistentModelIndex_pop_back(this_ptr: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_pop_front(this_ptr: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_prepend(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_push_back(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_push_front(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_removeAll(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_removeAt(this_ptr: *mut ::list::ListPersistentModelIndex, i: ::libc::c_int);
  pub fn qt_core_c_QList_QPersistentModelIndex_removeFirst(this_ptr: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_removeLast(this_ptr: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_removeOne(this_ptr: *mut ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_replace(this_ptr: *mut ::list::ListPersistentModelIndex, i: ::libc::c_int, t: *const ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_reserve(this_ptr: *mut ::list::ListPersistentModelIndex, size: ::libc::c_int);
  pub fn qt_core_c_QList_QPersistentModelIndex_size(this_ptr: *const ::list::ListPersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QList_QPersistentModelIndex_startsWith(this_ptr: *const ::list::ListPersistentModelIndex, t: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QList_QPersistentModelIndex_swap_i_j(this_ptr: *mut ::list::ListPersistentModelIndex, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QPersistentModelIndex_swap_other(this_ptr: *mut ::list::ListPersistentModelIndex, other: *mut ::list::ListPersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_takeAt_to_output(this_ptr: *mut ::list::ListPersistentModelIndex, i: ::libc::c_int, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_takeFirst_to_output(this_ptr: *mut ::list::ListPersistentModelIndex, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_takeLast_to_output(this_ptr: *mut ::list::ListPersistentModelIndex, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_value_to_output_i(this_ptr: *const ::list::ListPersistentModelIndex, i: ::libc::c_int, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QPersistentModelIndex_value_to_output_i_defaultValue(this_ptr: *const ::list::ListPersistentModelIndex, i: ::libc::c_int, defaultValue: *const ::persistent_model_index::PersistentModelIndex, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QList_QStorageInfo_append_QList_QStorageInfo(this_ptr: *mut ::list::ListStorageInfo, t: *const ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_append_QStorageInfo(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_at(this_ptr: *const ::list::ListStorageInfo, i: ::libc::c_int) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_back(this_ptr: *mut ::list::ListStorageInfo) -> *mut ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_back_const(this_ptr: *const ::list::ListStorageInfo) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_clear(this_ptr: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_constFirst(this_ptr: *const ::list::ListStorageInfo) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_constLast(this_ptr: *const ::list::ListStorageInfo) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_constructor_l(l: *const ::list::ListStorageInfo, output: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_constructor_no_args(output: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_contains(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_count_no_args(this_ptr: *const ::list::ListStorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_count_t(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_destructor(this_ptr: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_empty(this_ptr: *const ::list::ListStorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_endsWith(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_first(this_ptr: *mut ::list::ListStorageInfo) -> *mut ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_first_const(this_ptr: *const ::list::ListStorageInfo) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_front(this_ptr: *mut ::list::ListStorageInfo) -> *mut ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_front_const(this_ptr: *const ::list::ListStorageInfo) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_indexOf_t(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_indexOf_t_from(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_insert(this_ptr: *mut ::list::ListStorageInfo, i: ::libc::c_int, t: *const ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_isEmpty(this_ptr: *const ::list::ListStorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_last(this_ptr: *mut ::list::ListStorageInfo) -> *mut ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_lastIndexOf_t(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_lastIndexOf_t_from(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_last_const(this_ptr: *const ::list::ListStorageInfo) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_length(this_ptr: *const ::list::ListStorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_mid_to_output_pos(this_ptr: *const ::list::ListStorageInfo, pos: ::libc::c_int, output: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_mid_to_output_pos_length(this_ptr: *const ::list::ListStorageInfo, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_move(this_ptr: *mut ::list::ListStorageInfo, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QStorageInfo_operator_add_assign_l(this_ptr: *mut ::list::ListStorageInfo, l: *const ::list::ListStorageInfo) -> *mut ::list::ListStorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_operator_add_assign_t(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> *mut ::list::ListStorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_operator_add_to_output(this_ptr: *const ::list::ListStorageInfo, l: *const ::list::ListStorageInfo, output: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_operator_assign(this_ptr: *mut ::list::ListStorageInfo, l: *const ::list::ListStorageInfo) -> *mut ::list::ListStorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_operator_eq(this_ptr: *const ::list::ListStorageInfo, l: *const ::list::ListStorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_operator_index(this_ptr: *mut ::list::ListStorageInfo, i: ::libc::c_int) -> *mut ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_operator_index_const(this_ptr: *const ::list::ListStorageInfo, i: ::libc::c_int) -> *const ::storage_info::StorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_operator_neq(this_ptr: *const ::list::ListStorageInfo, l: *const ::list::ListStorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_operator_shl_l(this_ptr: *mut ::list::ListStorageInfo, l: *const ::list::ListStorageInfo) -> *mut ::list::ListStorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_operator_shl_t(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> *mut ::list::ListStorageInfo;
  pub fn qt_core_c_QList_QStorageInfo_pop_back(this_ptr: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_pop_front(this_ptr: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_prepend(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_push_back(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_push_front(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_removeAll(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_removeAt(this_ptr: *mut ::list::ListStorageInfo, i: ::libc::c_int);
  pub fn qt_core_c_QList_QStorageInfo_removeFirst(this_ptr: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_removeLast(this_ptr: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_removeOne(this_ptr: *mut ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_replace(this_ptr: *mut ::list::ListStorageInfo, i: ::libc::c_int, t: *const ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_reserve(this_ptr: *mut ::list::ListStorageInfo, size: ::libc::c_int);
  pub fn qt_core_c_QList_QStorageInfo_size(this_ptr: *const ::list::ListStorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QList_QStorageInfo_startsWith(this_ptr: *const ::list::ListStorageInfo, t: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QList_QStorageInfo_swap_i_j(this_ptr: *mut ::list::ListStorageInfo, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QStorageInfo_swap_other(this_ptr: *mut ::list::ListStorageInfo, other: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_takeAt_to_output(this_ptr: *mut ::list::ListStorageInfo, i: ::libc::c_int, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_takeFirst_to_output(this_ptr: *mut ::list::ListStorageInfo, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_takeLast_to_output(this_ptr: *mut ::list::ListStorageInfo, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_value_to_output_i(this_ptr: *const ::list::ListStorageInfo, i: ::libc::c_int, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QStorageInfo_value_to_output_i_defaultValue(this_ptr: *const ::list::ListStorageInfo, i: ::libc::c_int, defaultValue: *const ::storage_info::StorageInfo, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QList_QString_append_QList_QString(this_ptr: *mut ::list::ListString, t: *const ::list::ListString);
  pub fn qt_core_c_QList_QString_append_QString(this_ptr: *mut ::list::ListString, t: *const ::string::String);
  pub fn qt_core_c_QList_QString_at(this_ptr: *const ::list::ListString, i: ::libc::c_int) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_back(this_ptr: *mut ::list::ListString) -> *mut ::string::String;
  pub fn qt_core_c_QList_QString_back_const(this_ptr: *const ::list::ListString) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_clear(this_ptr: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_constFirst(this_ptr: *const ::list::ListString) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_constLast(this_ptr: *const ::list::ListString) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_constructor_l(l: *const ::list::ListString, output: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_constructor_no_args(output: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_contains(this_ptr: *const ::list::ListString, t: *const ::string::String) -> bool;
  pub fn qt_core_c_QList_QString_count_no_args(this_ptr: *const ::list::ListString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_count_t(this_ptr: *const ::list::ListString, t: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_destructor(this_ptr: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_empty(this_ptr: *const ::list::ListString) -> bool;
  pub fn qt_core_c_QList_QString_endsWith(this_ptr: *const ::list::ListString, t: *const ::string::String) -> bool;
  pub fn qt_core_c_QList_QString_first(this_ptr: *mut ::list::ListString) -> *mut ::string::String;
  pub fn qt_core_c_QList_QString_first_const(this_ptr: *const ::list::ListString) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_front(this_ptr: *mut ::list::ListString) -> *mut ::string::String;
  pub fn qt_core_c_QList_QString_front_const(this_ptr: *const ::list::ListString) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_indexOf_t(this_ptr: *const ::list::ListString, t: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_indexOf_t_from(this_ptr: *const ::list::ListString, t: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_insert(this_ptr: *mut ::list::ListString, i: ::libc::c_int, t: *const ::string::String);
  pub fn qt_core_c_QList_QString_isEmpty(this_ptr: *const ::list::ListString) -> bool;
  pub fn qt_core_c_QList_QString_last(this_ptr: *mut ::list::ListString) -> *mut ::string::String;
  pub fn qt_core_c_QList_QString_lastIndexOf_t(this_ptr: *const ::list::ListString, t: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_lastIndexOf_t_from(this_ptr: *const ::list::ListString, t: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_last_const(this_ptr: *const ::list::ListString) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_length(this_ptr: *const ::list::ListString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_mid_to_output_pos(this_ptr: *const ::list::ListString, pos: ::libc::c_int, output: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_mid_to_output_pos_length(this_ptr: *const ::list::ListString, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_move(this_ptr: *mut ::list::ListString, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QString_operator_add_assign_l(this_ptr: *mut ::list::ListString, l: *const ::list::ListString) -> *mut ::list::ListString;
  pub fn qt_core_c_QList_QString_operator_add_assign_t(this_ptr: *mut ::list::ListString, t: *const ::string::String) -> *mut ::list::ListString;
  pub fn qt_core_c_QList_QString_operator_add_to_output(this_ptr: *const ::list::ListString, l: *const ::list::ListString, output: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_operator_assign(this_ptr: *mut ::list::ListString, l: *const ::list::ListString) -> *mut ::list::ListString;
  pub fn qt_core_c_QList_QString_operator_eq(this_ptr: *const ::list::ListString, l: *const ::list::ListString) -> bool;
  pub fn qt_core_c_QList_QString_operator_index(this_ptr: *mut ::list::ListString, i: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QList_QString_operator_index_const(this_ptr: *const ::list::ListString, i: ::libc::c_int) -> *const ::string::String;
  pub fn qt_core_c_QList_QString_operator_neq(this_ptr: *const ::list::ListString, l: *const ::list::ListString) -> bool;
  pub fn qt_core_c_QList_QString_operator_shl_l(this_ptr: *mut ::list::ListString, l: *const ::list::ListString) -> *mut ::list::ListString;
  pub fn qt_core_c_QList_QString_operator_shl_t(this_ptr: *mut ::list::ListString, t: *const ::string::String) -> *mut ::list::ListString;
  pub fn qt_core_c_QList_QString_pop_back(this_ptr: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_pop_front(this_ptr: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_prepend(this_ptr: *mut ::list::ListString, t: *const ::string::String);
  pub fn qt_core_c_QList_QString_push_back(this_ptr: *mut ::list::ListString, t: *const ::string::String);
  pub fn qt_core_c_QList_QString_push_front(this_ptr: *mut ::list::ListString, t: *const ::string::String);
  pub fn qt_core_c_QList_QString_removeAll(this_ptr: *mut ::list::ListString, t: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_removeAt(this_ptr: *mut ::list::ListString, i: ::libc::c_int);
  pub fn qt_core_c_QList_QString_removeFirst(this_ptr: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_removeLast(this_ptr: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_removeOne(this_ptr: *mut ::list::ListString, t: *const ::string::String) -> bool;
  pub fn qt_core_c_QList_QString_replace(this_ptr: *mut ::list::ListString, i: ::libc::c_int, t: *const ::string::String);
  pub fn qt_core_c_QList_QString_reserve(this_ptr: *mut ::list::ListString, size: ::libc::c_int);
  pub fn qt_core_c_QList_QString_size(this_ptr: *const ::list::ListString) -> ::libc::c_int;
  pub fn qt_core_c_QList_QString_startsWith(this_ptr: *const ::list::ListString, t: *const ::string::String) -> bool;
  pub fn qt_core_c_QList_QString_swap_i_j(this_ptr: *mut ::list::ListString, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QString_swap_other(this_ptr: *mut ::list::ListString, other: *mut ::list::ListString);
  pub fn qt_core_c_QList_QString_takeAt_to_output(this_ptr: *mut ::list::ListString, i: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QList_QString_takeFirst_to_output(this_ptr: *mut ::list::ListString, output: *mut ::string::String);
  pub fn qt_core_c_QList_QString_takeLast_to_output(this_ptr: *mut ::list::ListString, output: *mut ::string::String);
  pub fn qt_core_c_QList_QString_value_to_output_i(this_ptr: *const ::list::ListString, i: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QList_QString_value_to_output_i_defaultValue(this_ptr: *const ::list::ListString, i: ::libc::c_int, defaultValue: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QList_QUrl_append_QList_QUrl(this_ptr: *mut ::list::ListUrl, t: *const ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_append_QUrl(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url);
  pub fn qt_core_c_QList_QUrl_at(this_ptr: *const ::list::ListUrl, i: ::libc::c_int) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_back(this_ptr: *mut ::list::ListUrl) -> *mut ::url::Url;
  pub fn qt_core_c_QList_QUrl_back_const(this_ptr: *const ::list::ListUrl) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_clear(this_ptr: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_constFirst(this_ptr: *const ::list::ListUrl) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_constLast(this_ptr: *const ::list::ListUrl) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_constructor_l(l: *const ::list::ListUrl, output: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_constructor_no_args(output: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_contains(this_ptr: *const ::list::ListUrl, t: *const ::url::Url) -> bool;
  pub fn qt_core_c_QList_QUrl_count_no_args(this_ptr: *const ::list::ListUrl) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_count_t(this_ptr: *const ::list::ListUrl, t: *const ::url::Url) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_destructor(this_ptr: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_empty(this_ptr: *const ::list::ListUrl) -> bool;
  pub fn qt_core_c_QList_QUrl_endsWith(this_ptr: *const ::list::ListUrl, t: *const ::url::Url) -> bool;
  pub fn qt_core_c_QList_QUrl_first(this_ptr: *mut ::list::ListUrl) -> *mut ::url::Url;
  pub fn qt_core_c_QList_QUrl_first_const(this_ptr: *const ::list::ListUrl) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_front(this_ptr: *mut ::list::ListUrl) -> *mut ::url::Url;
  pub fn qt_core_c_QList_QUrl_front_const(this_ptr: *const ::list::ListUrl) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_indexOf_t(this_ptr: *const ::list::ListUrl, t: *const ::url::Url) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_indexOf_t_from(this_ptr: *const ::list::ListUrl, t: *const ::url::Url, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_insert(this_ptr: *mut ::list::ListUrl, i: ::libc::c_int, t: *const ::url::Url);
  pub fn qt_core_c_QList_QUrl_isEmpty(this_ptr: *const ::list::ListUrl) -> bool;
  pub fn qt_core_c_QList_QUrl_last(this_ptr: *mut ::list::ListUrl) -> *mut ::url::Url;
  pub fn qt_core_c_QList_QUrl_lastIndexOf_t(this_ptr: *const ::list::ListUrl, t: *const ::url::Url) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_lastIndexOf_t_from(this_ptr: *const ::list::ListUrl, t: *const ::url::Url, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_last_const(this_ptr: *const ::list::ListUrl) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_length(this_ptr: *const ::list::ListUrl) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_mid_to_output_pos(this_ptr: *const ::list::ListUrl, pos: ::libc::c_int, output: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_mid_to_output_pos_length(this_ptr: *const ::list::ListUrl, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_move(this_ptr: *mut ::list::ListUrl, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QUrl_operator_add_assign_l(this_ptr: *mut ::list::ListUrl, l: *const ::list::ListUrl) -> *mut ::list::ListUrl;
  pub fn qt_core_c_QList_QUrl_operator_add_assign_t(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url) -> *mut ::list::ListUrl;
  pub fn qt_core_c_QList_QUrl_operator_add_to_output(this_ptr: *const ::list::ListUrl, l: *const ::list::ListUrl, output: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_operator_assign(this_ptr: *mut ::list::ListUrl, l: *const ::list::ListUrl) -> *mut ::list::ListUrl;
  pub fn qt_core_c_QList_QUrl_operator_eq(this_ptr: *const ::list::ListUrl, l: *const ::list::ListUrl) -> bool;
  pub fn qt_core_c_QList_QUrl_operator_index(this_ptr: *mut ::list::ListUrl, i: ::libc::c_int) -> *mut ::url::Url;
  pub fn qt_core_c_QList_QUrl_operator_index_const(this_ptr: *const ::list::ListUrl, i: ::libc::c_int) -> *const ::url::Url;
  pub fn qt_core_c_QList_QUrl_operator_neq(this_ptr: *const ::list::ListUrl, l: *const ::list::ListUrl) -> bool;
  pub fn qt_core_c_QList_QUrl_operator_shl_l(this_ptr: *mut ::list::ListUrl, l: *const ::list::ListUrl) -> *mut ::list::ListUrl;
  pub fn qt_core_c_QList_QUrl_operator_shl_t(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url) -> *mut ::list::ListUrl;
  pub fn qt_core_c_QList_QUrl_pop_back(this_ptr: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_pop_front(this_ptr: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_prepend(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url);
  pub fn qt_core_c_QList_QUrl_push_back(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url);
  pub fn qt_core_c_QList_QUrl_push_front(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url);
  pub fn qt_core_c_QList_QUrl_removeAll(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_removeAt(this_ptr: *mut ::list::ListUrl, i: ::libc::c_int);
  pub fn qt_core_c_QList_QUrl_removeFirst(this_ptr: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_removeLast(this_ptr: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_removeOne(this_ptr: *mut ::list::ListUrl, t: *const ::url::Url) -> bool;
  pub fn qt_core_c_QList_QUrl_replace(this_ptr: *mut ::list::ListUrl, i: ::libc::c_int, t: *const ::url::Url);
  pub fn qt_core_c_QList_QUrl_reserve(this_ptr: *mut ::list::ListUrl, size: ::libc::c_int);
  pub fn qt_core_c_QList_QUrl_size(this_ptr: *const ::list::ListUrl) -> ::libc::c_int;
  pub fn qt_core_c_QList_QUrl_startsWith(this_ptr: *const ::list::ListUrl, t: *const ::url::Url) -> bool;
  pub fn qt_core_c_QList_QUrl_swap_i_j(this_ptr: *mut ::list::ListUrl, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QUrl_swap_other(this_ptr: *mut ::list::ListUrl, other: *mut ::list::ListUrl);
  pub fn qt_core_c_QList_QUrl_takeAt_to_output(this_ptr: *mut ::list::ListUrl, i: ::libc::c_int, output: *mut ::url::Url);
  pub fn qt_core_c_QList_QUrl_takeFirst_to_output(this_ptr: *mut ::list::ListUrl, output: *mut ::url::Url);
  pub fn qt_core_c_QList_QUrl_takeLast_to_output(this_ptr: *mut ::list::ListUrl, output: *mut ::url::Url);
  pub fn qt_core_c_QList_QUrl_value_to_output_i(this_ptr: *const ::list::ListUrl, i: ::libc::c_int, output: *mut ::url::Url);
  pub fn qt_core_c_QList_QUrl_value_to_output_i_defaultValue(this_ptr: *const ::list::ListUrl, i: ::libc::c_int, defaultValue: *const ::url::Url, output: *mut ::url::Url);
  pub fn qt_core_c_QList_QVariant_append_QList_QVariant(this_ptr: *mut ::list::ListVariant, t: *const ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_append_QVariant(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_at(this_ptr: *const ::list::ListVariant, i: ::libc::c_int) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_back(this_ptr: *mut ::list::ListVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_back_const(this_ptr: *const ::list::ListVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_clear(this_ptr: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_constFirst(this_ptr: *const ::list::ListVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_constLast(this_ptr: *const ::list::ListVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_constructor_l(l: *const ::list::ListVariant, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_constructor_no_args(output: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_contains(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QList_QVariant_count_no_args(this_ptr: *const ::list::ListVariant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_count_t(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_destructor(this_ptr: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_empty(this_ptr: *const ::list::ListVariant) -> bool;
  pub fn qt_core_c_QList_QVariant_endsWith(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QList_QVariant_first(this_ptr: *mut ::list::ListVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_first_const(this_ptr: *const ::list::ListVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_front(this_ptr: *mut ::list::ListVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_front_const(this_ptr: *const ::list::ListVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_indexOf_t(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_indexOf_t_from(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_insert(this_ptr: *mut ::list::ListVariant, i: ::libc::c_int, t: *const ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_isEmpty(this_ptr: *const ::list::ListVariant) -> bool;
  pub fn qt_core_c_QList_QVariant_last(this_ptr: *mut ::list::ListVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_lastIndexOf_t(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_lastIndexOf_t_from(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_last_const(this_ptr: *const ::list::ListVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_length(this_ptr: *const ::list::ListVariant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_mid_to_output_pos(this_ptr: *const ::list::ListVariant, pos: ::libc::c_int, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_mid_to_output_pos_length(this_ptr: *const ::list::ListVariant, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_move(this_ptr: *mut ::list::ListVariant, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_QVariant_operator_add_assign_l(this_ptr: *mut ::list::ListVariant, l: *const ::list::ListVariant) -> *mut ::list::ListVariant;
  pub fn qt_core_c_QList_QVariant_operator_add_assign_t(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant) -> *mut ::list::ListVariant;
  pub fn qt_core_c_QList_QVariant_operator_add_to_output(this_ptr: *const ::list::ListVariant, l: *const ::list::ListVariant, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_operator_assign(this_ptr: *mut ::list::ListVariant, l: *const ::list::ListVariant) -> *mut ::list::ListVariant;
  pub fn qt_core_c_QList_QVariant_operator_eq(this_ptr: *const ::list::ListVariant, l: *const ::list::ListVariant) -> bool;
  pub fn qt_core_c_QList_QVariant_operator_index(this_ptr: *mut ::list::ListVariant, i: ::libc::c_int) -> *mut ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_operator_index_const(this_ptr: *const ::list::ListVariant, i: ::libc::c_int) -> *const ::variant::Variant;
  pub fn qt_core_c_QList_QVariant_operator_neq(this_ptr: *const ::list::ListVariant, l: *const ::list::ListVariant) -> bool;
  pub fn qt_core_c_QList_QVariant_operator_shl_l(this_ptr: *mut ::list::ListVariant, l: *const ::list::ListVariant) -> *mut ::list::ListVariant;
  pub fn qt_core_c_QList_QVariant_operator_shl_t(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant) -> *mut ::list::ListVariant;
  pub fn qt_core_c_QList_QVariant_pop_back(this_ptr: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_pop_front(this_ptr: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_prepend(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_push_back(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_push_front(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_removeAll(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_removeAt(this_ptr: *mut ::list::ListVariant, i: ::libc::c_int);
  pub fn qt_core_c_QList_QVariant_removeFirst(this_ptr: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_removeLast(this_ptr: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_removeOne(this_ptr: *mut ::list::ListVariant, t: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QList_QVariant_replace(this_ptr: *mut ::list::ListVariant, i: ::libc::c_int, t: *const ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_reserve(this_ptr: *mut ::list::ListVariant, size: ::libc::c_int);
  pub fn qt_core_c_QList_QVariant_size(this_ptr: *const ::list::ListVariant) -> ::libc::c_int;
  pub fn qt_core_c_QList_QVariant_startsWith(this_ptr: *const ::list::ListVariant, t: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QList_QVariant_swap_i_j(this_ptr: *mut ::list::ListVariant, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_QVariant_swap_other(this_ptr: *mut ::list::ListVariant, other: *mut ::list::ListVariant);
  pub fn qt_core_c_QList_QVariant_takeAt_to_output(this_ptr: *mut ::list::ListVariant, i: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_takeFirst_to_output(this_ptr: *mut ::list::ListVariant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_takeLast_to_output(this_ptr: *mut ::list::ListVariant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_value_to_output_i(this_ptr: *const ::list::ListVariant, i: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QList_QVariant_value_to_output_i_defaultValue(this_ptr: *const ::list::ListVariant, i: ::libc::c_int, defaultValue: *const ::variant::Variant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QList_Qt_DayOfWeek_append_QList_Qt_DayOfWeek(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_append_Qt_DayOfWeek(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_at(this_ptr: *const ::list::ListQtDayOfWeek, i: ::libc::c_int) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_back(this_ptr: *mut ::list::ListQtDayOfWeek) -> *mut ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_back_const(this_ptr: *const ::list::ListQtDayOfWeek) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_clear(this_ptr: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_constFirst(this_ptr: *const ::list::ListQtDayOfWeek) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_constLast(this_ptr: *const ::list::ListQtDayOfWeek) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_constructor_l(l: *const ::list::ListQtDayOfWeek, output: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_constructor_no_args(output: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_contains(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_count_no_args(this_ptr: *const ::list::ListQtDayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_count_t(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_destructor(this_ptr: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_empty(this_ptr: *const ::list::ListQtDayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_endsWith(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_first(this_ptr: *mut ::list::ListQtDayOfWeek) -> *mut ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_first_const(this_ptr: *const ::list::ListQtDayOfWeek) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_front(this_ptr: *mut ::list::ListQtDayOfWeek) -> *mut ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_front_const(this_ptr: *const ::list::ListQtDayOfWeek) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_indexOf_t(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_indexOf_t_from(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_insert(this_ptr: *mut ::list::ListQtDayOfWeek, i: ::libc::c_int, t: *const ::qt::DayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_isEmpty(this_ptr: *const ::list::ListQtDayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_last(this_ptr: *mut ::list::ListQtDayOfWeek) -> *mut ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_lastIndexOf_t(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_lastIndexOf_t_from(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_last_const(this_ptr: *const ::list::ListQtDayOfWeek) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_length(this_ptr: *const ::list::ListQtDayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_mid_to_output_pos(this_ptr: *const ::list::ListQtDayOfWeek, pos: ::libc::c_int, output: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_mid_to_output_pos_length(this_ptr: *const ::list::ListQtDayOfWeek, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_move(this_ptr: *mut ::list::ListQtDayOfWeek, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_add_assign_l(this_ptr: *mut ::list::ListQtDayOfWeek, l: *const ::list::ListQtDayOfWeek) -> *mut ::list::ListQtDayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_add_assign_t(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> *mut ::list::ListQtDayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_add_to_output(this_ptr: *const ::list::ListQtDayOfWeek, l: *const ::list::ListQtDayOfWeek, output: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_assign(this_ptr: *mut ::list::ListQtDayOfWeek, l: *const ::list::ListQtDayOfWeek) -> *mut ::list::ListQtDayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_eq(this_ptr: *const ::list::ListQtDayOfWeek, l: *const ::list::ListQtDayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_index(this_ptr: *mut ::list::ListQtDayOfWeek, i: ::libc::c_int) -> *mut ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_index_const(this_ptr: *const ::list::ListQtDayOfWeek, i: ::libc::c_int) -> *const ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_neq(this_ptr: *const ::list::ListQtDayOfWeek, l: *const ::list::ListQtDayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_shl_l(this_ptr: *mut ::list::ListQtDayOfWeek, l: *const ::list::ListQtDayOfWeek) -> *mut ::list::ListQtDayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_operator_shl_t(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> *mut ::list::ListQtDayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_pop_back(this_ptr: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_pop_front(this_ptr: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_prepend(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_push_back(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_push_front(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_removeAll(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_removeAt(this_ptr: *mut ::list::ListQtDayOfWeek, i: ::libc::c_int);
  pub fn qt_core_c_QList_Qt_DayOfWeek_removeFirst(this_ptr: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_removeLast(this_ptr: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_removeOne(this_ptr: *mut ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_replace(this_ptr: *mut ::list::ListQtDayOfWeek, i: ::libc::c_int, t: *const ::qt::DayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_reserve(this_ptr: *mut ::list::ListQtDayOfWeek, size: ::libc::c_int);
  pub fn qt_core_c_QList_Qt_DayOfWeek_size(this_ptr: *const ::list::ListQtDayOfWeek) -> ::libc::c_int;
  pub fn qt_core_c_QList_Qt_DayOfWeek_startsWith(this_ptr: *const ::list::ListQtDayOfWeek, t: *const ::qt::DayOfWeek) -> bool;
  pub fn qt_core_c_QList_Qt_DayOfWeek_swap_i_j(this_ptr: *mut ::list::ListQtDayOfWeek, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_Qt_DayOfWeek_swap_other(this_ptr: *mut ::list::ListQtDayOfWeek, other: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QList_Qt_DayOfWeek_takeAt(this_ptr: *mut ::list::ListQtDayOfWeek, i: ::libc::c_int) -> ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_takeFirst(this_ptr: *mut ::list::ListQtDayOfWeek) -> ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_takeLast(this_ptr: *mut ::list::ListQtDayOfWeek) -> ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_value_i(this_ptr: *const ::list::ListQtDayOfWeek, i: ::libc::c_int) -> ::qt::DayOfWeek;
  pub fn qt_core_c_QList_Qt_DayOfWeek_value_i_defaultValue(this_ptr: *const ::list::ListQtDayOfWeek, i: ::libc::c_int, defaultValue: *const ::qt::DayOfWeek) -> ::qt::DayOfWeek;
  pub fn qt_core_c_QList_int_append_QList_int(this_ptr: *mut ::list::ListCInt, t: *const ::list::ListCInt);
  pub fn qt_core_c_QList_int_append_int(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QList_int_at(this_ptr: *const ::list::ListCInt, i: ::libc::c_int) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_back(this_ptr: *mut ::list::ListCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QList_int_back_const(this_ptr: *const ::list::ListCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_clear(this_ptr: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_constFirst(this_ptr: *const ::list::ListCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_constLast(this_ptr: *const ::list::ListCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_constructor_l(l: *const ::list::ListCInt, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_constructor_no_args(output: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_contains(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QList_int_count_no_args(this_ptr: *const ::list::ListCInt) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_count_t(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_destructor(this_ptr: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_empty(this_ptr: *const ::list::ListCInt) -> bool;
  pub fn qt_core_c_QList_int_endsWith(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QList_int_first(this_ptr: *mut ::list::ListCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QList_int_first_const(this_ptr: *const ::list::ListCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_fromVector_to_output(vector: *const ::vector::VectorCInt, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_front(this_ptr: *mut ::list::ListCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QList_int_front_const(this_ptr: *const ::list::ListCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_indexOf_t(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_indexOf_t_from(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_insert(this_ptr: *mut ::list::ListCInt, i: ::libc::c_int, t: *const ::libc::c_int);
  pub fn qt_core_c_QList_int_isEmpty(this_ptr: *const ::list::ListCInt) -> bool;
  pub fn qt_core_c_QList_int_last(this_ptr: *mut ::list::ListCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QList_int_lastIndexOf_t(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_lastIndexOf_t_from(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_last_const(this_ptr: *const ::list::ListCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_length(this_ptr: *const ::list::ListCInt) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_mid_to_output_pos(this_ptr: *const ::list::ListCInt, pos: ::libc::c_int, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_mid_to_output_pos_length(this_ptr: *const ::list::ListCInt, pos: ::libc::c_int, length: ::libc::c_int, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_move(this_ptr: *mut ::list::ListCInt, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QList_int_operator_add_assign_l(this_ptr: *mut ::list::ListCInt, l: *const ::list::ListCInt) -> *mut ::list::ListCInt;
  pub fn qt_core_c_QList_int_operator_add_assign_t(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int) -> *mut ::list::ListCInt;
  pub fn qt_core_c_QList_int_operator_add_to_output(this_ptr: *const ::list::ListCInt, l: *const ::list::ListCInt, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_operator_assign(this_ptr: *mut ::list::ListCInt, l: *const ::list::ListCInt) -> *mut ::list::ListCInt;
  pub fn qt_core_c_QList_int_operator_eq(this_ptr: *const ::list::ListCInt, l: *const ::list::ListCInt) -> bool;
  pub fn qt_core_c_QList_int_operator_index(this_ptr: *mut ::list::ListCInt, i: ::libc::c_int) -> *mut ::libc::c_int;
  pub fn qt_core_c_QList_int_operator_index_const(this_ptr: *const ::list::ListCInt, i: ::libc::c_int) -> *const ::libc::c_int;
  pub fn qt_core_c_QList_int_operator_neq(this_ptr: *const ::list::ListCInt, l: *const ::list::ListCInt) -> bool;
  pub fn qt_core_c_QList_int_operator_shl_l(this_ptr: *mut ::list::ListCInt, l: *const ::list::ListCInt) -> *mut ::list::ListCInt;
  pub fn qt_core_c_QList_int_operator_shl_t(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int) -> *mut ::list::ListCInt;
  pub fn qt_core_c_QList_int_pop_back(this_ptr: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_pop_front(this_ptr: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_prepend(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QList_int_push_back(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QList_int_push_front(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QList_int_removeAll(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_removeAt(this_ptr: *mut ::list::ListCInt, i: ::libc::c_int);
  pub fn qt_core_c_QList_int_removeFirst(this_ptr: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_removeLast(this_ptr: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_removeOne(this_ptr: *mut ::list::ListCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QList_int_replace(this_ptr: *mut ::list::ListCInt, i: ::libc::c_int, t: *const ::libc::c_int);
  pub fn qt_core_c_QList_int_reserve(this_ptr: *mut ::list::ListCInt, size: ::libc::c_int);
  pub fn qt_core_c_QList_int_size(this_ptr: *const ::list::ListCInt) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_startsWith(this_ptr: *const ::list::ListCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QList_int_swap_i_j(this_ptr: *mut ::list::ListCInt, i: ::libc::c_int, j: ::libc::c_int);
  pub fn qt_core_c_QList_int_swap_other(this_ptr: *mut ::list::ListCInt, other: *mut ::list::ListCInt);
  pub fn qt_core_c_QList_int_takeAt(this_ptr: *mut ::list::ListCInt, i: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_takeFirst(this_ptr: *mut ::list::ListCInt) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_takeLast(this_ptr: *mut ::list::ListCInt) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_toVector_to_output(this_ptr: *const ::list::ListCInt, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QList_int_value_i(this_ptr: *const ::list::ListCInt, i: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QList_int_value_i_defaultValue(this_ptr: *const ::list::ListCInt, i: ::libc::c_int, defaultValue: *const ::libc::c_int) -> ::libc::c_int;

  // Header: QLocale
  pub fn qt_core_c_QLocale_G_operator_shl(arg1: *mut ::data_stream::DataStream, arg2: *const ::locale::Locale) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QLocale_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::locale::Locale, output: *mut ::debug::Debug);
  pub fn qt_core_c_QLocale_G_operator_shr(arg1: *mut ::data_stream::DataStream, arg2: *mut ::locale::Locale) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QLocale_G_qHash_key(key: *const ::locale::Locale) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_G_qHash_key_seed(key: *const ::locale::Locale, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_G_swap(value1: *mut ::locale::Locale, value2: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_amText_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_bcp47Name_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_c_to_output(output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_constructor_language(language: ::locale::Language, output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_constructor_language_country(language: ::locale::Language, country: ::locale::Country, output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_constructor_language_script_country(language: ::locale::Language, script: ::locale::Script, country: ::locale::Country, output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_constructor_name(name: *const ::string::String, output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_constructor_no_args(output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_constructor_other(other: *const ::locale::Locale, output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_countriesForLanguage_to_output(lang: ::locale::Language, output: *mut ::list::ListLocaleCountry);
  pub fn qt_core_c_QLocale_country(this_ptr: *const ::locale::Locale) -> ::locale::Country;
  pub fn qt_core_c_QLocale_countryToString_to_output(country: ::locale::Country, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_createSeparatedList_to_output(this_ptr: *const ::locale::Locale, strl: *const ::string_list::StringList, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_currencySymbol_to_output_arg1(this_ptr: *const ::locale::Locale, arg1: ::locale::CurrencySymbolFormat, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_currencySymbol_to_output_no_args(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_dateFormat_to_output_format(this_ptr: *const ::locale::Locale, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_dateFormat_to_output_no_args(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_dateTimeFormat_to_output_format(this_ptr: *const ::locale::Locale, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_dateTimeFormat_to_output_no_args(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_dayName_to_output_arg1(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_dayName_to_output_arg1_format(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_decimalPoint_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);
  pub fn qt_core_c_QLocale_destructor(this_ptr: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_exponential_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);
  pub fn qt_core_c_QLocale_groupSeparator_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);
  pub fn qt_core_c_QLocale_language(this_ptr: *const ::locale::Locale) -> ::locale::Language;
  pub fn qt_core_c_QLocale_languageToString_to_output(language: ::locale::Language, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_matchingLocales_to_output(language: *const ::locale::Language, script: *const ::locale::Script, country: *const ::locale::Country, output: *mut ::list::ListLocale);
  pub fn qt_core_c_QLocale_measurementSystem(this_ptr: *const ::locale::Locale) -> ::locale::MeasurementSystem;
  pub fn qt_core_c_QLocale_monthName_to_output_arg1(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_monthName_to_output_arg1_format(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_name_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_nativeCountryName_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_nativeLanguageName_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_negativeSign_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);
  pub fn qt_core_c_QLocale_numberOptions(this_ptr: *const ::locale::Locale) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_operator_assign(this_ptr: *mut ::locale::Locale, other: *const ::locale::Locale) -> *mut ::locale::Locale;
  pub fn qt_core_c_QLocale_operator_eq(this_ptr: *const ::locale::Locale, other: *const ::locale::Locale) -> bool;
  pub fn qt_core_c_QLocale_operator_neq(this_ptr: *const ::locale::Locale, other: *const ::locale::Locale) -> bool;
  pub fn qt_core_c_QLocale_percent_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);
  pub fn qt_core_c_QLocale_pmText_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_positiveSign_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);
  pub fn qt_core_c_QLocale_quoteString_to_output_QString(this_ptr: *const ::locale::Locale, str: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_quoteString_to_output_QStringRef(this_ptr: *const ::locale::Locale, str: *const ::string_ref::StringRef, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_quoteString_to_output_QStringRef_QLocale_QuotationStyle(this_ptr: *const ::locale::Locale, str: *const ::string_ref::StringRef, style: ::locale::QuotationStyle, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_quoteString_to_output_QString_QLocale_QuotationStyle(this_ptr: *const ::locale::Locale, str: *const ::string::String, style: ::locale::QuotationStyle, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_script(this_ptr: *const ::locale::Locale) -> ::locale::Script;
  pub fn qt_core_c_QLocale_scriptToString_to_output(script: ::locale::Script, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_setDefault(locale: *const ::locale::Locale);
  pub fn qt_core_c_QLocale_setNumberOptions(this_ptr: *mut ::locale::Locale, options: ::libc::c_uint);
  pub fn qt_core_c_QLocale_standaloneDayName_to_output_arg1(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_standaloneDayName_to_output_arg1_format(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_standaloneMonthName_to_output_arg1(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_standaloneMonthName_to_output_arg1_format(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_swap(this_ptr: *mut ::locale::Locale, other: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_system_to_output(output: *mut ::locale::Locale);
  pub fn qt_core_c_QLocale_timeFormat_to_output_format(this_ptr: *const ::locale::Locale, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_timeFormat_to_output_no_args(this_ptr: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_double(this_ptr: *const ::locale::Locale, arg1: ::libc::c_double, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_double_QString(this_ptr: *const ::locale::Locale, arg1: ::libc::c_double, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_double_QString_int(this_ptr: *const ::locale::Locale, arg1: ::libc::c_double, symbol: *const ::string::String, precision: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_float(this_ptr: *const ::locale::Locale, i: ::libc::c_float, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_float_QString(this_ptr: *const ::locale::Locale, i: ::libc::c_float, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_float_QString_int(this_ptr: *const ::locale::Locale, i: ::libc::c_float, symbol: *const ::string::String, precision: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_int(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_int_QString(this_ptr: *const ::locale::Locale, arg1: ::libc::c_int, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_qlonglong(this_ptr: *const ::locale::Locale, arg1: i64, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_qlonglong_QString(this_ptr: *const ::locale::Locale, arg1: i64, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_qulonglong(this_ptr: *const ::locale::Locale, arg1: u64, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_qulonglong_QString(this_ptr: *const ::locale::Locale, arg1: u64, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_short(this_ptr: *const ::locale::Locale, arg1: ::libc::c_short, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_short_QString(this_ptr: *const ::locale::Locale, arg1: ::libc::c_short, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_unsigned_int(this_ptr: *const ::locale::Locale, arg1: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_unsigned_int_QString(this_ptr: *const ::locale::Locale, arg1: ::libc::c_uint, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_unsigned_short(this_ptr: *const ::locale::Locale, arg1: ::libc::c_ushort, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toCurrencyString_to_output_unsigned_short_QString(this_ptr: *const ::locale::Locale, arg1: ::libc::c_ushort, symbol: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toDateTime_to_output_QString(this_ptr: *const ::locale::Locale, string: *const ::string::String, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QLocale_toDateTime_to_output_QString_QLocale_FormatType(this_ptr: *const ::locale::Locale, string: *const ::string::String, format: ::locale::FormatType, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QLocale_toDateTime_to_output_QString_QString(this_ptr: *const ::locale::Locale, string: *const ::string::String, format: *const ::string::String, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QLocale_toDate_to_output_string(this_ptr: *const ::locale::Locale, string: *const ::string::String, output: *mut ::date::Date);
  pub fn qt_core_c_QLocale_toDate_to_output_string_arg2(this_ptr: *const ::locale::Locale, string: *const ::string::String, arg2: ::locale::FormatType, output: *mut ::date::Date);
  pub fn qt_core_c_QLocale_toDate_to_output_string_format(this_ptr: *const ::locale::Locale, string: *const ::string::String, format: *const ::string::String, output: *mut ::date::Date);
  pub fn qt_core_c_QLocale_toDouble_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> ::libc::c_double;
  pub fn qt_core_c_QLocale_toDouble_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> ::libc::c_double;
  pub fn qt_core_c_QLocale_toDouble_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QLocale_toDouble_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QLocale_toFloat_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> ::libc::c_float;
  pub fn qt_core_c_QLocale_toFloat_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> ::libc::c_float;
  pub fn qt_core_c_QLocale_toFloat_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_float;
  pub fn qt_core_c_QLocale_toFloat_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> ::libc::c_float;
  pub fn qt_core_c_QLocale_toInt_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QLocale_toInt_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QLocale_toInt_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QLocale_toInt_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QLocale_toLongLong_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> i64;
  pub fn qt_core_c_QLocale_toLongLong_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> i64;
  pub fn qt_core_c_QLocale_toLongLong_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> i64;
  pub fn qt_core_c_QLocale_toLongLong_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> i64;
  pub fn qt_core_c_QLocale_toLower_to_output(this_ptr: *const ::locale::Locale, str: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toShort_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> ::libc::c_short;
  pub fn qt_core_c_QLocale_toShort_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> ::libc::c_short;
  pub fn qt_core_c_QLocale_toShort_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_short;
  pub fn qt_core_c_QLocale_toShort_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> ::libc::c_short;
  pub fn qt_core_c_QLocale_toString_to_output_QDate(this_ptr: *const ::locale::Locale, date: *const ::date::Date, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QDateTime(this_ptr: *const ::locale::Locale, dateTime: *const ::date_time::DateTime, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QDateTime_QLocale_FormatType(this_ptr: *const ::locale::Locale, dateTime: *const ::date_time::DateTime, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QDateTime_QString(this_ptr: *const ::locale::Locale, dateTime: *const ::date_time::DateTime, format: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QDate_QLocale_FormatType(this_ptr: *const ::locale::Locale, date: *const ::date::Date, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QDate_QString(this_ptr: *const ::locale::Locale, date: *const ::date::Date, formatStr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QTime(this_ptr: *const ::locale::Locale, time: *const ::time::Time, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QTime_QLocale_FormatType(this_ptr: *const ::locale::Locale, time: *const ::time::Time, format: ::locale::FormatType, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_QTime_QString(this_ptr: *const ::locale::Locale, time: *const ::time::Time, formatStr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_double(this_ptr: *const ::locale::Locale, i: ::libc::c_double, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_double_char(this_ptr: *const ::locale::Locale, i: ::libc::c_double, f: ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_double_char_int(this_ptr: *const ::locale::Locale, i: ::libc::c_double, f: ::libc::c_char, prec: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_float(this_ptr: *const ::locale::Locale, i: ::libc::c_float, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_float_char(this_ptr: *const ::locale::Locale, i: ::libc::c_float, f: ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_float_char_int(this_ptr: *const ::locale::Locale, i: ::libc::c_float, f: ::libc::c_char, prec: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_int(this_ptr: *const ::locale::Locale, i: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_qlonglong(this_ptr: *const ::locale::Locale, i: i64, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_qulonglong(this_ptr: *const ::locale::Locale, i: u64, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_short(this_ptr: *const ::locale::Locale, i: ::libc::c_short, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_unsigned_int(this_ptr: *const ::locale::Locale, i: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toString_to_output_unsigned_short(this_ptr: *const ::locale::Locale, i: ::libc::c_ushort, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_toTime_to_output_string(this_ptr: *const ::locale::Locale, string: *const ::string::String, output: *mut ::time::Time);
  pub fn qt_core_c_QLocale_toTime_to_output_string_arg2(this_ptr: *const ::locale::Locale, string: *const ::string::String, arg2: ::locale::FormatType, output: *mut ::time::Time);
  pub fn qt_core_c_QLocale_toTime_to_output_string_format(this_ptr: *const ::locale::Locale, string: *const ::string::String, format: *const ::string::String, output: *mut ::time::Time);
  pub fn qt_core_c_QLocale_toUInt_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_toUInt_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_toUInt_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_toUInt_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> ::libc::c_uint;
  pub fn qt_core_c_QLocale_toULongLong_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> u64;
  pub fn qt_core_c_QLocale_toULongLong_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> u64;
  pub fn qt_core_c_QLocale_toULongLong_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> u64;
  pub fn qt_core_c_QLocale_toULongLong_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> u64;
  pub fn qt_core_c_QLocale_toUShort_QString(this_ptr: *const ::locale::Locale, s: *const ::string::String) -> ::libc::c_ushort;
  pub fn qt_core_c_QLocale_toUShort_QStringRef(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef) -> ::libc::c_ushort;
  pub fn qt_core_c_QLocale_toUShort_QStringRef_bool(this_ptr: *const ::locale::Locale, s: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_ushort;
  pub fn qt_core_c_QLocale_toUShort_QString_bool(this_ptr: *const ::locale::Locale, s: *const ::string::String, ok: *mut bool) -> ::libc::c_ushort;
  pub fn qt_core_c_QLocale_toUpper_to_output(this_ptr: *const ::locale::Locale, str: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QLocale_uiLanguages_to_output(this_ptr: *const ::locale::Locale, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QLocale_weekdays_to_output(this_ptr: *const ::locale::Locale, output: *mut ::list::ListQtDayOfWeek);
  pub fn qt_core_c_QLocale_zeroDigit_to_output(this_ptr: *const ::locale::Locale, output: *mut ::char::Char);

  // Header: QLockFile
  pub fn qt_core_c_QLockFile_constructor(fileName: *const ::string::String, output: *mut ::lock_file::LockFile);
  pub fn qt_core_c_QLockFile_destructor(this_ptr: *mut ::lock_file::LockFile);
  pub fn qt_core_c_QLockFile_error(this_ptr: *const ::lock_file::LockFile) -> ::lock_file::LockError;
  pub fn qt_core_c_QLockFile_getLockInfo(this_ptr: *const ::lock_file::LockFile, pid: *mut i64, hostname: *mut ::string::String, appname: *mut ::string::String) -> bool;
  pub fn qt_core_c_QLockFile_isLocked(this_ptr: *const ::lock_file::LockFile) -> bool;
  pub fn qt_core_c_QLockFile_lock(this_ptr: *mut ::lock_file::LockFile) -> bool;
  pub fn qt_core_c_QLockFile_removeStaleLockFile(this_ptr: *mut ::lock_file::LockFile) -> bool;
  pub fn qt_core_c_QLockFile_setStaleLockTime(this_ptr: *mut ::lock_file::LockFile, arg1: ::libc::c_int);
  pub fn qt_core_c_QLockFile_staleLockTime(this_ptr: *const ::lock_file::LockFile) -> ::libc::c_int;
  pub fn qt_core_c_QLockFile_tryLock_no_args(this_ptr: *mut ::lock_file::LockFile) -> bool;
  pub fn qt_core_c_QLockFile_tryLock_timeout(this_ptr: *mut ::lock_file::LockFile, timeout: ::libc::c_int) -> bool;
  pub fn qt_core_c_QLockFile_unlock(this_ptr: *mut ::lock_file::LockFile);

  // Header: QLoggingCategory
  pub fn qt_core_c_QLoggingCategory_categoryName(this_ptr: *const ::logging_category::LoggingCategory) -> *const ::libc::c_char;
  pub fn qt_core_c_QLoggingCategory_constructor_category(category: *const ::libc::c_char, output: *mut ::logging_category::LoggingCategory);
  pub fn qt_core_c_QLoggingCategory_constructor_category_severityLevel(category: *const ::libc::c_char, severityLevel: ::message_log_context::MsgType, output: *mut ::logging_category::LoggingCategory);
  pub fn qt_core_c_QLoggingCategory_defaultCategory() -> *mut ::logging_category::LoggingCategory;
  pub fn qt_core_c_QLoggingCategory_destructor(this_ptr: *mut ::logging_category::LoggingCategory);
  pub fn qt_core_c_QLoggingCategory_installFilter(arg1: extern "C" fn(*mut ::logging_category::LoggingCategory)) -> extern "C" fn(*mut ::logging_category::LoggingCategory);
  pub fn qt_core_c_QLoggingCategory_isCriticalEnabled(this_ptr: *const ::logging_category::LoggingCategory) -> bool;
  pub fn qt_core_c_QLoggingCategory_isDebugEnabled(this_ptr: *const ::logging_category::LoggingCategory) -> bool;
  pub fn qt_core_c_QLoggingCategory_isEnabled(this_ptr: *const ::logging_category::LoggingCategory, type_: ::message_log_context::MsgType) -> bool;
  pub fn qt_core_c_QLoggingCategory_isInfoEnabled(this_ptr: *const ::logging_category::LoggingCategory) -> bool;
  pub fn qt_core_c_QLoggingCategory_isWarningEnabled(this_ptr: *const ::logging_category::LoggingCategory) -> bool;
  pub fn qt_core_c_QLoggingCategory_operator_call(this_ptr: *mut ::logging_category::LoggingCategory) -> *mut ::logging_category::LoggingCategory;
  pub fn qt_core_c_QLoggingCategory_operator_call_const(this_ptr: *const ::logging_category::LoggingCategory) -> *const ::logging_category::LoggingCategory;
  pub fn qt_core_c_QLoggingCategory_setEnabled(this_ptr: *mut ::logging_category::LoggingCategory, type_: ::message_log_context::MsgType, enable: bool);
  pub fn qt_core_c_QLoggingCategory_setFilterRules(rules: *const ::string::String);

  // Header: QMap
  pub fn qt_core_c_QMap_QString_QVariant_clear(this_ptr: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QMap_QString_QVariant_constructor_no_args(output: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QMap_QString_QVariant_constructor_other(other: *const ::map::MapStringVariant, output: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QMap_QString_QVariant_contains(this_ptr: *const ::map::MapStringVariant, key: *const ::string::String) -> bool;
  pub fn qt_core_c_QMap_QString_QVariant_count_key(this_ptr: *const ::map::MapStringVariant, key: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QMap_QString_QVariant_count_no_args(this_ptr: *const ::map::MapStringVariant) -> ::libc::c_int;
  pub fn qt_core_c_QMap_QString_QVariant_destructor(this_ptr: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QMap_QString_QVariant_empty(this_ptr: *const ::map::MapStringVariant) -> bool;
  pub fn qt_core_c_QMap_QString_QVariant_first(this_ptr: *mut ::map::MapStringVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QMap_QString_QVariant_firstKey(this_ptr: *const ::map::MapStringVariant) -> *const ::string::String;
  pub fn qt_core_c_QMap_QString_QVariant_first_const(this_ptr: *const ::map::MapStringVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QMap_QString_QVariant_isEmpty(this_ptr: *const ::map::MapStringVariant) -> bool;
  pub fn qt_core_c_QMap_QString_QVariant_key_to_output_value(this_ptr: *const ::map::MapStringVariant, value: *const ::variant::Variant, output: *mut ::string::String);
  pub fn qt_core_c_QMap_QString_QVariant_key_to_output_value_defaultKey(this_ptr: *const ::map::MapStringVariant, value: *const ::variant::Variant, defaultKey: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QMap_QString_QVariant_keys_to_output_no_args(this_ptr: *const ::map::MapStringVariant, output: *mut ::list::ListString);
  pub fn qt_core_c_QMap_QString_QVariant_keys_to_output_value(this_ptr: *const ::map::MapStringVariant, value: *const ::variant::Variant, output: *mut ::list::ListString);
  pub fn qt_core_c_QMap_QString_QVariant_last(this_ptr: *mut ::map::MapStringVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QMap_QString_QVariant_lastKey(this_ptr: *const ::map::MapStringVariant) -> *const ::string::String;
  pub fn qt_core_c_QMap_QString_QVariant_last_const(this_ptr: *const ::map::MapStringVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QMap_QString_QVariant_operator_assign(this_ptr: *mut ::map::MapStringVariant, other: *const ::map::MapStringVariant) -> *mut ::map::MapStringVariant;
  pub fn qt_core_c_QMap_QString_QVariant_operator_eq(this_ptr: *const ::map::MapStringVariant, other: *const ::map::MapStringVariant) -> bool;
  pub fn qt_core_c_QMap_QString_QVariant_operator_index(this_ptr: *mut ::map::MapStringVariant, key: *const ::string::String) -> *mut ::variant::Variant;
  pub fn qt_core_c_QMap_QString_QVariant_operator_index_to_output(this_ptr: *const ::map::MapStringVariant, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_QString_QVariant_operator_neq(this_ptr: *const ::map::MapStringVariant, other: *const ::map::MapStringVariant) -> bool;
  pub fn qt_core_c_QMap_QString_QVariant_remove(this_ptr: *mut ::map::MapStringVariant, key: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QMap_QString_QVariant_size(this_ptr: *const ::map::MapStringVariant) -> ::libc::c_int;
  pub fn qt_core_c_QMap_QString_QVariant_swap(this_ptr: *mut ::map::MapStringVariant, other: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QMap_QString_QVariant_take_to_output(this_ptr: *mut ::map::MapStringVariant, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_QString_QVariant_uniqueKeys_to_output(this_ptr: *const ::map::MapStringVariant, output: *mut ::list::ListString);
  pub fn qt_core_c_QMap_QString_QVariant_unite(this_ptr: *mut ::map::MapStringVariant, other: *const ::map::MapStringVariant) -> *mut ::map::MapStringVariant;
  pub fn qt_core_c_QMap_QString_QVariant_value_to_output_key(this_ptr: *const ::map::MapStringVariant, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_QString_QVariant_value_to_output_key_defaultValue(this_ptr: *const ::map::MapStringVariant, key: *const ::string::String, defaultValue: *const ::variant::Variant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_QString_QVariant_values_to_output_key(this_ptr: *const ::map::MapStringVariant, key: *const ::string::String, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QMap_QString_QVariant_values_to_output_no_args(this_ptr: *const ::map::MapStringVariant, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QMap_int_QVariant_clear(this_ptr: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QMap_int_QVariant_constructor_no_args(output: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QMap_int_QVariant_constructor_other(other: *const ::map::MapCIntVariant, output: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QMap_int_QVariant_contains(this_ptr: *const ::map::MapCIntVariant, key: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QMap_int_QVariant_count_key(this_ptr: *const ::map::MapCIntVariant, key: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_count_no_args(this_ptr: *const ::map::MapCIntVariant) -> ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_destructor(this_ptr: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QMap_int_QVariant_empty(this_ptr: *const ::map::MapCIntVariant) -> bool;
  pub fn qt_core_c_QMap_int_QVariant_first(this_ptr: *mut ::map::MapCIntVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QMap_int_QVariant_firstKey(this_ptr: *const ::map::MapCIntVariant) -> *const ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_first_const(this_ptr: *const ::map::MapCIntVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QMap_int_QVariant_isEmpty(this_ptr: *const ::map::MapCIntVariant) -> bool;
  pub fn qt_core_c_QMap_int_QVariant_key_value(this_ptr: *const ::map::MapCIntVariant, value: *const ::variant::Variant) -> ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_key_value_defaultKey(this_ptr: *const ::map::MapCIntVariant, value: *const ::variant::Variant, defaultKey: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_keys_to_output_no_args(this_ptr: *const ::map::MapCIntVariant, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QMap_int_QVariant_keys_to_output_value(this_ptr: *const ::map::MapCIntVariant, value: *const ::variant::Variant, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QMap_int_QVariant_last(this_ptr: *mut ::map::MapCIntVariant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QMap_int_QVariant_lastKey(this_ptr: *const ::map::MapCIntVariant) -> *const ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_last_const(this_ptr: *const ::map::MapCIntVariant) -> *const ::variant::Variant;
  pub fn qt_core_c_QMap_int_QVariant_operator_assign(this_ptr: *mut ::map::MapCIntVariant, other: *const ::map::MapCIntVariant) -> *mut ::map::MapCIntVariant;
  pub fn qt_core_c_QMap_int_QVariant_operator_eq(this_ptr: *const ::map::MapCIntVariant, other: *const ::map::MapCIntVariant) -> bool;
  pub fn qt_core_c_QMap_int_QVariant_operator_index(this_ptr: *mut ::map::MapCIntVariant, key: *const ::libc::c_int) -> *mut ::variant::Variant;
  pub fn qt_core_c_QMap_int_QVariant_operator_index_to_output(this_ptr: *const ::map::MapCIntVariant, key: *const ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_int_QVariant_operator_neq(this_ptr: *const ::map::MapCIntVariant, other: *const ::map::MapCIntVariant) -> bool;
  pub fn qt_core_c_QMap_int_QVariant_remove(this_ptr: *mut ::map::MapCIntVariant, key: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_size(this_ptr: *const ::map::MapCIntVariant) -> ::libc::c_int;
  pub fn qt_core_c_QMap_int_QVariant_swap(this_ptr: *mut ::map::MapCIntVariant, other: *mut ::map::MapCIntVariant);
  pub fn qt_core_c_QMap_int_QVariant_take_to_output(this_ptr: *mut ::map::MapCIntVariant, key: *const ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_int_QVariant_uniqueKeys_to_output(this_ptr: *const ::map::MapCIntVariant, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QMap_int_QVariant_unite(this_ptr: *mut ::map::MapCIntVariant, other: *const ::map::MapCIntVariant) -> *mut ::map::MapCIntVariant;
  pub fn qt_core_c_QMap_int_QVariant_value_to_output_key(this_ptr: *const ::map::MapCIntVariant, key: *const ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_int_QVariant_value_to_output_key_defaultValue(this_ptr: *const ::map::MapCIntVariant, key: *const ::libc::c_int, defaultValue: *const ::variant::Variant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMap_int_QVariant_values_to_output_key(this_ptr: *const ::map::MapCIntVariant, key: *const ::libc::c_int, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QMap_int_QVariant_values_to_output_no_args(this_ptr: *const ::map::MapCIntVariant, output: *mut ::list::ListVariant);

  // Header: QMargins
  pub fn qt_core_c_QMargins_G_operator_add_to_output_QMarginsF_QMarginsF(lhs: *const ::margins_f::MarginsF, rhs: *const ::margins_f::MarginsF, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_add_to_output_QMarginsF_double(lhs: *const ::margins_f::MarginsF, rhs: ::libc::c_double, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_add_to_output_QMargins_QMargins(m1: *const ::margins::Margins, m2: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_add_to_output_QMargins_int(lhs: *const ::margins::Margins, rhs: ::libc::c_int, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_add_to_output_double_QMarginsF(lhs: ::libc::c_double, rhs: *const ::margins_f::MarginsF, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_add_to_output_int_QMargins(lhs: ::libc::c_int, rhs: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_div_to_output_QMarginsF_double(lhs: *const ::margins_f::MarginsF, divisor: ::libc::c_double, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_div_to_output_QMargins_double(margins: *const ::margins::Margins, divisor: ::libc::c_double, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_div_to_output_QMargins_int(margins: *const ::margins::Margins, divisor: ::libc::c_int, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_eq(lhs: *const ::margins_f::MarginsF, rhs: *const ::margins_f::MarginsF) -> bool;
  pub fn qt_core_c_QMargins_G_operator_mul_to_output_QMarginsF_double(lhs: *const ::margins_f::MarginsF, rhs: ::libc::c_double, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_mul_to_output_QMargins_double(margins: *const ::margins::Margins, factor: ::libc::c_double, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_mul_to_output_QMargins_int(margins: *const ::margins::Margins, factor: ::libc::c_int, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_mul_to_output_double_QMargins(factor: ::libc::c_double, margins: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_mul_to_output_double_QMarginsF(lhs: ::libc::c_double, rhs: *const ::margins_f::MarginsF, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_mul_to_output_int_QMargins(factor: ::libc::c_int, margins: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_neg_to_output_QMargins(margins: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_neg_to_output_QMarginsF(margins: *const ::margins_f::MarginsF, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_neq(lhs: *const ::margins_f::MarginsF, rhs: *const ::margins_f::MarginsF) -> bool;
  pub fn qt_core_c_QMargins_G_operator_shl_QDataStream_QMargins(arg1: *mut ::data_stream::DataStream, arg2: *const ::margins::Margins) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QMargins_G_operator_shl_QDataStream_QMarginsF(arg1: *mut ::data_stream::DataStream, arg2: *const ::margins_f::MarginsF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QMargins_G_operator_shl_to_output_QDebug_QMargins(arg1: *const ::debug::Debug, arg2: *const ::margins::Margins, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMargins_G_operator_shl_to_output_QDebug_QMarginsF(arg1: *const ::debug::Debug, arg2: *const ::margins_f::MarginsF, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMargins_G_operator_shr_QDataStream_QMargins(arg1: *mut ::data_stream::DataStream, arg2: *mut ::margins::Margins) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QMargins_G_operator_shr_QDataStream_QMarginsF(arg1: *mut ::data_stream::DataStream, arg2: *mut ::margins_f::MarginsF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QMargins_G_operator_sub_to_output_QMarginsF_QMarginsF(lhs: *const ::margins_f::MarginsF, rhs: *const ::margins_f::MarginsF, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_sub_to_output_QMarginsF_double(lhs: *const ::margins_f::MarginsF, rhs: ::libc::c_double, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_G_operator_sub_to_output_QMargins_QMargins(m1: *const ::margins::Margins, m2: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_sub_to_output_QMargins_int(lhs: *const ::margins::Margins, rhs: ::libc::c_int, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_unary_plus_to_output_QMargins(margins: *const ::margins::Margins, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_G_operator_unary_plus_to_output_QMarginsF(margins: *const ::margins_f::MarginsF, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMargins_bottom(this_ptr: *const ::margins::Margins) -> ::libc::c_int;
  pub fn qt_core_c_QMargins_constructor_left_top_right_bottom(left: ::libc::c_int, top: ::libc::c_int, right: ::libc::c_int, bottom: ::libc::c_int, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_constructor_no_args(output: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_destructor(this_ptr: *mut ::margins::Margins);
  pub fn qt_core_c_QMargins_isNull(this_ptr: *const ::margins::Margins) -> bool;
  pub fn qt_core_c_QMargins_left(this_ptr: *const ::margins::Margins) -> ::libc::c_int;
  pub fn qt_core_c_QMargins_operator_add_assign_arg1(this_ptr: *mut ::margins::Margins, arg1: ::libc::c_int) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_add_assign_margins(this_ptr: *mut ::margins::Margins, margins: *const ::margins::Margins) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_div_assign_double(this_ptr: *mut ::margins::Margins, arg1: ::libc::c_double) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_div_assign_int(this_ptr: *mut ::margins::Margins, arg1: ::libc::c_int) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_mul_assign_double(this_ptr: *mut ::margins::Margins, arg1: ::libc::c_double) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_mul_assign_int(this_ptr: *mut ::margins::Margins, arg1: ::libc::c_int) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_sub_assign_arg1(this_ptr: *mut ::margins::Margins, arg1: ::libc::c_int) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_operator_sub_assign_margins(this_ptr: *mut ::margins::Margins, margins: *const ::margins::Margins) -> *mut ::margins::Margins;
  pub fn qt_core_c_QMargins_right(this_ptr: *const ::margins::Margins) -> ::libc::c_int;
  pub fn qt_core_c_QMargins_setBottom(this_ptr: *mut ::margins::Margins, bottom: ::libc::c_int);
  pub fn qt_core_c_QMargins_setLeft(this_ptr: *mut ::margins::Margins, left: ::libc::c_int);
  pub fn qt_core_c_QMargins_setRight(this_ptr: *mut ::margins::Margins, right: ::libc::c_int);
  pub fn qt_core_c_QMargins_setTop(this_ptr: *mut ::margins::Margins, top: ::libc::c_int);
  pub fn qt_core_c_QMargins_top(this_ptr: *const ::margins::Margins) -> ::libc::c_int;

  // Header: QMarginsF
  pub fn qt_core_c_QMarginsF_bottom(this_ptr: *const ::margins_f::MarginsF) -> ::libc::c_double;
  pub fn qt_core_c_QMarginsF_constructor_left_top_right_bottom(left: ::libc::c_double, top: ::libc::c_double, right: ::libc::c_double, bottom: ::libc::c_double, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMarginsF_constructor_margins(margins: *const ::margins::Margins, output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMarginsF_constructor_no_args(output: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMarginsF_destructor(this_ptr: *mut ::margins_f::MarginsF);
  pub fn qt_core_c_QMarginsF_isNull(this_ptr: *const ::margins_f::MarginsF) -> bool;
  pub fn qt_core_c_QMarginsF_left(this_ptr: *const ::margins_f::MarginsF) -> ::libc::c_double;
  pub fn qt_core_c_QMarginsF_operator_add_assign_addend(this_ptr: *mut ::margins_f::MarginsF, addend: ::libc::c_double) -> *mut ::margins_f::MarginsF;
  pub fn qt_core_c_QMarginsF_operator_add_assign_margins(this_ptr: *mut ::margins_f::MarginsF, margins: *const ::margins_f::MarginsF) -> *mut ::margins_f::MarginsF;
  pub fn qt_core_c_QMarginsF_operator_div_assign(this_ptr: *mut ::margins_f::MarginsF, divisor: ::libc::c_double) -> *mut ::margins_f::MarginsF;
  pub fn qt_core_c_QMarginsF_operator_mul_assign(this_ptr: *mut ::margins_f::MarginsF, factor: ::libc::c_double) -> *mut ::margins_f::MarginsF;
  pub fn qt_core_c_QMarginsF_operator_sub_assign_margins(this_ptr: *mut ::margins_f::MarginsF, margins: *const ::margins_f::MarginsF) -> *mut ::margins_f::MarginsF;
  pub fn qt_core_c_QMarginsF_operator_sub_assign_subtrahend(this_ptr: *mut ::margins_f::MarginsF, subtrahend: ::libc::c_double) -> *mut ::margins_f::MarginsF;
  pub fn qt_core_c_QMarginsF_right(this_ptr: *const ::margins_f::MarginsF) -> ::libc::c_double;
  pub fn qt_core_c_QMarginsF_setBottom(this_ptr: *mut ::margins_f::MarginsF, bottom: ::libc::c_double);
  pub fn qt_core_c_QMarginsF_setLeft(this_ptr: *mut ::margins_f::MarginsF, left: ::libc::c_double);
  pub fn qt_core_c_QMarginsF_setRight(this_ptr: *mut ::margins_f::MarginsF, right: ::libc::c_double);
  pub fn qt_core_c_QMarginsF_setTop(this_ptr: *mut ::margins_f::MarginsF, top: ::libc::c_double);
  pub fn qt_core_c_QMarginsF_toMargins_to_output(this_ptr: *const ::margins_f::MarginsF, output: *mut ::margins::Margins);
  pub fn qt_core_c_QMarginsF_top(this_ptr: *const ::margins_f::MarginsF) -> ::libc::c_double;

  // Header: QMessageAuthenticationCode
  pub fn qt_core_c_QMessageAuthenticationCode_addData_data(this_ptr: *mut ::message_authentication_code::MessageAuthenticationCode, data: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QMessageAuthenticationCode_addData_data_length(this_ptr: *mut ::message_authentication_code::MessageAuthenticationCode, data: *const ::libc::c_char, length: ::libc::c_int);
  pub fn qt_core_c_QMessageAuthenticationCode_addData_device(this_ptr: *mut ::message_authentication_code::MessageAuthenticationCode, device: *mut ::io_device::IODevice) -> bool;
  pub fn qt_core_c_QMessageAuthenticationCode_constructor_method(method: *const ::cryptographic_hash::Algorithm, output: *mut ::message_authentication_code::MessageAuthenticationCode);
  pub fn qt_core_c_QMessageAuthenticationCode_constructor_method_key(method: *const ::cryptographic_hash::Algorithm, key: *const ::byte_array::ByteArray, output: *mut ::message_authentication_code::MessageAuthenticationCode);
  pub fn qt_core_c_QMessageAuthenticationCode_destructor(this_ptr: *mut ::message_authentication_code::MessageAuthenticationCode);
  pub fn qt_core_c_QMessageAuthenticationCode_hash_to_output(message: *const ::byte_array::ByteArray, key: *const ::byte_array::ByteArray, method: *const ::cryptographic_hash::Algorithm, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMessageAuthenticationCode_reset(this_ptr: *mut ::message_authentication_code::MessageAuthenticationCode);
  pub fn qt_core_c_QMessageAuthenticationCode_result_to_output(this_ptr: *const ::message_authentication_code::MessageAuthenticationCode, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMessageAuthenticationCode_setKey(this_ptr: *mut ::message_authentication_code::MessageAuthenticationCode, key: *const ::byte_array::ByteArray);

  // Header: QMessageLogContext
  pub fn qt_core_c_QMessageLogContext_G_qFormatLogMessage_to_output(type_: ::message_log_context::MsgType, context: *const ::message_log_context::MessageLogContext, buf: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QMessageLogContext_G_qSetMessagePattern(messagePattern: *const ::string::String);
  pub fn qt_core_c_QMessageLogContext_category(this_ptr: *const ::message_log_context::MessageLogContext) -> *const ::libc::c_char;
  pub fn qt_core_c_QMessageLogContext_constructor_fileName_lineNumber_functionName_categoryName(fileName: *const ::libc::c_char, lineNumber: ::libc::c_int, functionName: *const ::libc::c_char, categoryName: *const ::libc::c_char, output: *mut ::message_log_context::MessageLogContext);
  pub fn qt_core_c_QMessageLogContext_constructor_no_args(output: *mut ::message_log_context::MessageLogContext);
  pub fn qt_core_c_QMessageLogContext_destructor(this_ptr: *mut ::message_log_context::MessageLogContext);
  pub fn qt_core_c_QMessageLogContext_file(this_ptr: *const ::message_log_context::MessageLogContext) -> *const ::libc::c_char;
  pub fn qt_core_c_QMessageLogContext_function(this_ptr: *const ::message_log_context::MessageLogContext) -> *const ::libc::c_char;
  pub fn qt_core_c_QMessageLogContext_line(this_ptr: *const ::message_log_context::MessageLogContext) -> ::libc::c_int;
  pub fn qt_core_c_QMessageLogContext_set_category(this_ptr: *mut ::message_log_context::MessageLogContext, value: *const ::libc::c_char);
  pub fn qt_core_c_QMessageLogContext_set_file(this_ptr: *mut ::message_log_context::MessageLogContext, value: *const ::libc::c_char);
  pub fn qt_core_c_QMessageLogContext_set_function(this_ptr: *mut ::message_log_context::MessageLogContext, value: *const ::libc::c_char);
  pub fn qt_core_c_QMessageLogContext_set_line(this_ptr: *mut ::message_log_context::MessageLogContext, value: ::libc::c_int);
  pub fn qt_core_c_QMessageLogContext_set_version(this_ptr: *mut ::message_log_context::MessageLogContext, value: ::libc::c_int);
  pub fn qt_core_c_QMessageLogContext_version(this_ptr: *const ::message_log_context::MessageLogContext) -> ::libc::c_int;

  // Header: QMessageLogger
  pub fn qt_core_c_QMessageLogger_constructor_file_line_function(file: *const ::libc::c_char, line: ::libc::c_int, function: *const ::libc::c_char, output: *mut ::message_logger::MessageLogger);
  pub fn qt_core_c_QMessageLogger_constructor_file_line_function_category(file: *const ::libc::c_char, line: ::libc::c_int, function: *const ::libc::c_char, category: *const ::libc::c_char, output: *mut ::message_logger::MessageLogger);
  pub fn qt_core_c_QMessageLogger_constructor_no_args(output: *mut ::message_logger::MessageLogger);
  pub fn qt_core_c_QMessageLogger_critical_to_output_cat(this_ptr: *const ::message_logger::MessageLogger, cat: *const ::logging_category::LoggingCategory, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_critical_to_output_no_args(this_ptr: *const ::message_logger::MessageLogger, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_debug_to_output_cat(this_ptr: *const ::message_logger::MessageLogger, cat: *const ::logging_category::LoggingCategory, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_debug_to_output_no_args(this_ptr: *const ::message_logger::MessageLogger, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_destructor(this_ptr: *mut ::message_logger::MessageLogger);
  pub fn qt_core_c_QMessageLogger_info_to_output_cat(this_ptr: *const ::message_logger::MessageLogger, cat: *const ::logging_category::LoggingCategory, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_info_to_output_no_args(this_ptr: *const ::message_logger::MessageLogger, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_warning_to_output_cat(this_ptr: *const ::message_logger::MessageLogger, cat: *const ::logging_category::LoggingCategory, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMessageLogger_warning_to_output_no_args(this_ptr: *const ::message_logger::MessageLogger, output: *mut ::debug::Debug);

  // Header: QMetaClassInfo
  pub fn qt_core_c_QMetaClassInfo_constructor(output: *mut ::meta_class_info::MetaClassInfo);
  pub fn qt_core_c_QMetaClassInfo_destructor(this_ptr: *mut ::meta_class_info::MetaClassInfo);
  pub fn qt_core_c_QMetaClassInfo_enclosingMetaObject(this_ptr: *const ::meta_class_info::MetaClassInfo) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaClassInfo_name(this_ptr: *const ::meta_class_info::MetaClassInfo) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaClassInfo_value(this_ptr: *const ::meta_class_info::MetaClassInfo) -> *const ::libc::c_char;

  // Header: QMetaEnum
  pub fn qt_core_c_QMetaEnum_constructor(output: *mut ::meta_enum::MetaEnum);
  pub fn qt_core_c_QMetaEnum_destructor(this_ptr: *mut ::meta_enum::MetaEnum);
  pub fn qt_core_c_QMetaEnum_enclosingMetaObject(this_ptr: *const ::meta_enum::MetaEnum) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaEnum_isFlag(this_ptr: *const ::meta_enum::MetaEnum) -> bool;
  pub fn qt_core_c_QMetaEnum_isScoped(this_ptr: *const ::meta_enum::MetaEnum) -> bool;
  pub fn qt_core_c_QMetaEnum_isValid(this_ptr: *const ::meta_enum::MetaEnum) -> bool;
  pub fn qt_core_c_QMetaEnum_key(this_ptr: *const ::meta_enum::MetaEnum, index: ::libc::c_int) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaEnum_keyCount(this_ptr: *const ::meta_enum::MetaEnum) -> ::libc::c_int;
  pub fn qt_core_c_QMetaEnum_keyToValue_key(this_ptr: *const ::meta_enum::MetaEnum, key: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaEnum_keyToValue_key_ok(this_ptr: *const ::meta_enum::MetaEnum, key: *const ::libc::c_char, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QMetaEnum_keysToValue_keys(this_ptr: *const ::meta_enum::MetaEnum, keys: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaEnum_keysToValue_keys_ok(this_ptr: *const ::meta_enum::MetaEnum, keys: *const ::libc::c_char, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QMetaEnum_name(this_ptr: *const ::meta_enum::MetaEnum) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaEnum_scope(this_ptr: *const ::meta_enum::MetaEnum) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaEnum_value(this_ptr: *const ::meta_enum::MetaEnum, index: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMetaEnum_valueToKey(this_ptr: *const ::meta_enum::MetaEnum, value: ::libc::c_int) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaEnum_valueToKeys_to_output(this_ptr: *const ::meta_enum::MetaEnum, value: ::libc::c_int, output: *mut ::byte_array::ByteArray);

  // Header: QMetaMethod
  pub fn qt_core_c_QMetaMethod_access(this_ptr: *const ::meta_method::MetaMethod) -> ::meta_method::Access;
  pub fn qt_core_c_QMetaMethod_attributes(this_ptr: *const ::meta_method::MetaMethod) -> ::libc::c_int;
  pub fn qt_core_c_QMetaMethod_constructor(output: *mut ::meta_method::MetaMethod);
  pub fn qt_core_c_QMetaMethod_destructor(this_ptr: *mut ::meta_method::MetaMethod);
  pub fn qt_core_c_QMetaMethod_enclosingMetaObject(this_ptr: *const ::meta_method::MetaMethod) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaMethod_getParameterTypes(this_ptr: *const ::meta_method::MetaMethod, types: *mut ::libc::c_int);
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3_val4(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_returnValue_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3_val4(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invokeOnGadget_gadget_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_method::MetaMethod, gadget: *mut ::libc::c_void, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3_val4(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_returnValue_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3_val4(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_connectionType_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, connectionType: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3_val4(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_returnValue_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, returnValue: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3_val4(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_invoke_object_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_method::MetaMethod, object: *mut ::object::Object, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaMethod_isValid(this_ptr: *const ::meta_method::MetaMethod) -> bool;
  pub fn qt_core_c_QMetaMethod_methodIndex(this_ptr: *const ::meta_method::MetaMethod) -> ::libc::c_int;
  pub fn qt_core_c_QMetaMethod_methodSignature_to_output(this_ptr: *const ::meta_method::MetaMethod, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMetaMethod_methodType(this_ptr: *const ::meta_method::MetaMethod) -> ::meta_method::MethodType;
  pub fn qt_core_c_QMetaMethod_name_to_output(this_ptr: *const ::meta_method::MetaMethod, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMetaMethod_parameterCount(this_ptr: *const ::meta_method::MetaMethod) -> ::libc::c_int;
  pub fn qt_core_c_QMetaMethod_parameterNames_to_output(this_ptr: *const ::meta_method::MetaMethod, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QMetaMethod_parameterType(this_ptr: *const ::meta_method::MetaMethod, index: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMetaMethod_parameterTypes_to_output(this_ptr: *const ::meta_method::MetaMethod, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QMetaMethod_returnType(this_ptr: *const ::meta_method::MetaMethod) -> ::libc::c_int;
  pub fn qt_core_c_QMetaMethod_revision(this_ptr: *const ::meta_method::MetaMethod) -> ::libc::c_int;
  pub fn qt_core_c_QMetaMethod_tag(this_ptr: *const ::meta_method::MetaMethod) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaMethod_typeName(this_ptr: *const ::meta_method::MetaMethod) -> *const ::libc::c_char;

  // Header: QMetaObject
  pub fn qt_core_c_QMetaObject_Connection_constructor_no_args(output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QMetaObject_Connection_constructor_other(other: *const ::meta_object::Connection, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QMetaObject_Connection_destructor(this_ptr: *mut ::meta_object::Connection);
  pub fn qt_core_c_QMetaObject_Connection_operator_assign(this_ptr: *mut ::meta_object::Connection, other: *const ::meta_object::Connection) -> *mut ::meta_object::Connection;
  pub fn qt_core_c_QMetaObject_activate_sender_arg2_local_signal_index_argv(sender: *mut ::object::Object, arg2: *const ::meta_object::MetaObject, local_signal_index: ::libc::c_int, argv: *mut *mut ::libc::c_void);
  pub fn qt_core_c_QMetaObject_activate_sender_signal_index_argv(sender: *mut ::object::Object, signal_index: ::libc::c_int, argv: *mut *mut ::libc::c_void);
  pub fn qt_core_c_QMetaObject_activate_sender_signal_offset_local_signal_index_argv(sender: *mut ::object::Object, signal_offset: ::libc::c_int, local_signal_index: ::libc::c_int, argv: *mut *mut ::libc::c_void);
  pub fn qt_core_c_QMetaObject_cast_QObject_ptr(this_ptr: *const ::meta_object::MetaObject, obj: *mut ::object::Object) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_cast_const_QObject_ptr(this_ptr: *const ::meta_object::MetaObject, obj: *const ::object::Object) -> *const ::object::Object;
  pub fn qt_core_c_QMetaObject_checkConnectArgs_QMetaMethod_QMetaMethod(signal: *const ::meta_method::MetaMethod, method: *const ::meta_method::MetaMethod) -> bool;
  pub fn qt_core_c_QMetaObject_checkConnectArgs_char_char(signal: *const ::libc::c_char, method: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QMetaObject_classInfoCount(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_classInfoOffset(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_classInfo_to_output(this_ptr: *const ::meta_object::MetaObject, index: ::libc::c_int, output: *mut ::meta_class_info::MetaClassInfo);
  pub fn qt_core_c_QMetaObject_className(this_ptr: *const ::meta_object::MetaObject) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaObject_connectSlotsByName(o: *mut ::object::Object);
  pub fn qt_core_c_QMetaObject_connect_to_output_sender_signal_index_receiver_method_index(sender: *const ::object::Object, signal_index: ::libc::c_int, receiver: *const ::object::Object, method_index: ::libc::c_int, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QMetaObject_connect_to_output_sender_signal_index_receiver_method_index_type(sender: *const ::object::Object, signal_index: ::libc::c_int, receiver: *const ::object::Object, method_index: ::libc::c_int, type_: ::libc::c_int, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QMetaObject_connect_to_output_sender_signal_index_receiver_method_index_type_types(sender: *const ::object::Object, signal_index: ::libc::c_int, receiver: *const ::object::Object, method_index: ::libc::c_int, type_: ::libc::c_int, types: *mut ::libc::c_int, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QMetaObject_constructorCount(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_constructor_to_output(this_ptr: *const ::meta_object::MetaObject, index: ::libc::c_int, output: *mut ::meta_method::MetaMethod);
  pub fn qt_core_c_QMetaObject_delete(this_ptr: *mut ::meta_object::MetaObject);
  pub fn qt_core_c_QMetaObject_disconnect(sender: *const ::object::Object, signal_index: ::libc::c_int, receiver: *const ::object::Object, method_index: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaObject_disconnectOne(sender: *const ::object::Object, signal_index: ::libc::c_int, receiver: *const ::object::Object, method_index: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaObject_enumeratorCount(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_enumeratorOffset(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_enumerator_to_output(this_ptr: *const ::meta_object::MetaObject, index: ::libc::c_int, output: *mut ::meta_enum::MetaEnum);
  pub fn qt_core_c_QMetaObject_indexOfClassInfo(this_ptr: *const ::meta_object::MetaObject, name: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_indexOfConstructor(this_ptr: *const ::meta_object::MetaObject, constructor: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_indexOfEnumerator(this_ptr: *const ::meta_object::MetaObject, name: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_indexOfMethod(this_ptr: *const ::meta_object::MetaObject, method: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_indexOfProperty(this_ptr: *const ::meta_object::MetaObject, name: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_indexOfSignal(this_ptr: *const ::meta_object::MetaObject, signal: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_indexOfSlot(this_ptr: *const ::meta_object::MetaObject, slot: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_inherits(this_ptr: *const ::meta_object::MetaObject, metaObject: *const ::meta_object::MetaObject) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member(obj: *mut ::object::Object, member: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3_val4(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3_val4_val5(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3_val4_val5_val6(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3_val4_val5_val6_val7(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3_val4_val5_val6_val7_val8(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_arg3_ret_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(obj: *mut ::object::Object, member: *const ::libc::c_char, arg3: *const ::qt::ConnectionType, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3_val4(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3_val4_val5(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3_val4_val5_val6(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3_val4_val5_val6_val7(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3_val4_val5_val6_val7_val8(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_ret_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(obj: *mut ::object::Object, member: *const ::libc::c_char, ret: *const ::generic_return_argument::GenericReturnArgument, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3_val4(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3_val4_val5(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3_val4_val5_val6(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3_val4_val5_val6_val7(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3_val4_val5_val6_val7_val8(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_type_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(obj: *mut ::object::Object, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3_val4(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3_val4_val5(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3_val4_val5_val6(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3_val4_val5_val6_val7(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3_val4_val5_val6_val7_val8(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_invokeMethod_obj_member_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(obj: *mut ::object::Object, member: *const ::libc::c_char, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> bool;
  pub fn qt_core_c_QMetaObject_metacall(arg1: *mut ::object::Object, arg2: ::meta_object::Call, arg3: ::libc::c_int, arg4: *mut *mut ::libc::c_void) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_methodCount(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_methodOffset(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_method_to_output(this_ptr: *const ::meta_object::MetaObject, index: ::libc::c_int, output: *mut ::meta_method::MetaMethod);
  pub fn qt_core_c_QMetaObject_newInstance_no_args(this_ptr: *const ::meta_object::MetaObject) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3_val4(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3_val4_val5(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3_val4_val5_val6(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3_val4_val5_val6_val7(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3_val4_val5_val6_val7_val8(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_newInstance_val0_val1_val2_val3_val4_val5_val6_val7_val8_val9(this_ptr: *const ::meta_object::MetaObject, val0: *const ::generic_argument::GenericArgument, val1: *const ::generic_argument::GenericArgument, val2: *const ::generic_argument::GenericArgument, val3: *const ::generic_argument::GenericArgument, val4: *const ::generic_argument::GenericArgument, val5: *const ::generic_argument::GenericArgument, val6: *const ::generic_argument::GenericArgument, val7: *const ::generic_argument::GenericArgument, val8: *const ::generic_argument::GenericArgument, val9: *const ::generic_argument::GenericArgument) -> *mut ::object::Object;
  pub fn qt_core_c_QMetaObject_normalizedSignature_to_output(method: *const ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMetaObject_normalizedType_to_output(type_: *const ::libc::c_char, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMetaObject_propertyCount(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_propertyOffset(this_ptr: *const ::meta_object::MetaObject) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_property_to_output(this_ptr: *const ::meta_object::MetaObject, index: ::libc::c_int, output: *mut ::meta_property::MetaProperty);
  pub fn qt_core_c_QMetaObject_static_metacall(this_ptr: *const ::meta_object::MetaObject, arg1: ::meta_object::Call, arg2: ::libc::c_int, arg3: *mut *mut ::libc::c_void) -> ::libc::c_int;
  pub fn qt_core_c_QMetaObject_superClass(this_ptr: *const ::meta_object::MetaObject) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaObject_tr_to_output_s_c(this_ptr: *const ::meta_object::MetaObject, s: *const ::libc::c_char, c: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QMetaObject_tr_to_output_s_c_n(this_ptr: *const ::meta_object::MetaObject, s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QMetaObject_userProperty_to_output(this_ptr: *const ::meta_object::MetaObject, output: *mut ::meta_property::MetaProperty);

  // Header: QMetaProperty
  pub fn qt_core_c_QMetaProperty_constructor(output: *mut ::meta_property::MetaProperty);
  pub fn qt_core_c_QMetaProperty_destructor(this_ptr: *mut ::meta_property::MetaProperty);
  pub fn qt_core_c_QMetaProperty_enclosingMetaObject(this_ptr: *const ::meta_property::MetaProperty) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaProperty_enumerator_to_output(this_ptr: *const ::meta_property::MetaProperty, output: *mut ::meta_enum::MetaEnum);
  pub fn qt_core_c_QMetaProperty_hasNotifySignal(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_hasStdCppSet(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isConstant(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isDesignable_no_args(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isDesignable_obj(this_ptr: *const ::meta_property::MetaProperty, obj: *const ::object::Object) -> bool;
  pub fn qt_core_c_QMetaProperty_isEditable_no_args(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isEditable_obj(this_ptr: *const ::meta_property::MetaProperty, obj: *const ::object::Object) -> bool;
  pub fn qt_core_c_QMetaProperty_isEnumType(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isFinal(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isFlagType(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isReadable(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isResettable(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isScriptable_no_args(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isScriptable_obj(this_ptr: *const ::meta_property::MetaProperty, obj: *const ::object::Object) -> bool;
  pub fn qt_core_c_QMetaProperty_isStored_no_args(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isStored_obj(this_ptr: *const ::meta_property::MetaProperty, obj: *const ::object::Object) -> bool;
  pub fn qt_core_c_QMetaProperty_isUser_no_args(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isUser_obj(this_ptr: *const ::meta_property::MetaProperty, obj: *const ::object::Object) -> bool;
  pub fn qt_core_c_QMetaProperty_isValid(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_isWritable(this_ptr: *const ::meta_property::MetaProperty) -> bool;
  pub fn qt_core_c_QMetaProperty_name(this_ptr: *const ::meta_property::MetaProperty) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaProperty_notifySignalIndex(this_ptr: *const ::meta_property::MetaProperty) -> ::libc::c_int;
  pub fn qt_core_c_QMetaProperty_notifySignal_to_output(this_ptr: *const ::meta_property::MetaProperty, output: *mut ::meta_method::MetaMethod);
  pub fn qt_core_c_QMetaProperty_propertyIndex(this_ptr: *const ::meta_property::MetaProperty) -> ::libc::c_int;
  pub fn qt_core_c_QMetaProperty_readOnGadget_to_output(this_ptr: *const ::meta_property::MetaProperty, gadget: *const ::libc::c_void, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMetaProperty_read_to_output(this_ptr: *const ::meta_property::MetaProperty, obj: *const ::object::Object, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMetaProperty_reset(this_ptr: *const ::meta_property::MetaProperty, obj: *mut ::object::Object) -> bool;
  pub fn qt_core_c_QMetaProperty_resetOnGadget(this_ptr: *const ::meta_property::MetaProperty, gadget: *mut ::libc::c_void) -> bool;
  pub fn qt_core_c_QMetaProperty_revision(this_ptr: *const ::meta_property::MetaProperty) -> ::libc::c_int;
  pub fn qt_core_c_QMetaProperty_typeName(this_ptr: *const ::meta_property::MetaProperty) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaProperty_userType(this_ptr: *const ::meta_property::MetaProperty) -> ::libc::c_int;
  pub fn qt_core_c_QMetaProperty_write(this_ptr: *const ::meta_property::MetaProperty, obj: *mut ::object::Object, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QMetaProperty_writeOnGadget(this_ptr: *const ::meta_property::MetaProperty, gadget: *mut ::libc::c_void, value: *const ::variant::Variant) -> bool;

  // Header: QMetaType
  pub fn qt_core_c_QMetaType_compare(lhs: *const ::libc::c_void, rhs: *const ::libc::c_void, typeId: ::libc::c_int, result: *mut ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_construct_type_where_copy(type_: ::libc::c_int, where_: *mut ::libc::c_void, copy: *const ::libc::c_void) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_construct_where(this_ptr: *const ::meta_type::MetaType, where_: *mut ::libc::c_void) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_construct_where_copy(this_ptr: *const ::meta_type::MetaType, where_: *mut ::libc::c_void, copy: *const ::libc::c_void) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_constructor(type_: ::libc::c_int, output: *mut ::meta_type::MetaType);
  pub fn qt_core_c_QMetaType_convert(from: *const ::libc::c_void, fromTypeId: ::libc::c_int, to: *mut ::libc::c_void, toTypeId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_create_copy(this_ptr: *const ::meta_type::MetaType, copy: *const ::libc::c_void) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_create_no_args(this_ptr: *const ::meta_type::MetaType) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_create_type(type_: ::libc::c_int) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_create_type_copy(type_: ::libc::c_int, copy: *const ::libc::c_void) -> *mut ::libc::c_void;
  pub fn qt_core_c_QMetaType_debugStream(dbg: *mut ::debug::Debug, rhs: *const ::libc::c_void, typeId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_destroy_data(this_ptr: *const ::meta_type::MetaType, data: *mut ::libc::c_void);
  pub fn qt_core_c_QMetaType_destroy_type_data(type_: ::libc::c_int, data: *mut ::libc::c_void);
  pub fn qt_core_c_QMetaType_destruct_data(this_ptr: *const ::meta_type::MetaType, data: *mut ::libc::c_void);
  pub fn qt_core_c_QMetaType_destruct_type_where(type_: ::libc::c_int, where_: *mut ::libc::c_void);
  pub fn qt_core_c_QMetaType_destructor(this_ptr: *mut ::meta_type::MetaType);
  pub fn qt_core_c_QMetaType_equals(lhs: *const ::libc::c_void, rhs: *const ::libc::c_void, typeId: ::libc::c_int, result: *mut ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_flags(this_ptr: *const ::meta_type::MetaType) -> ::libc::c_uint;
  pub fn qt_core_c_QMetaType_hasRegisteredComparators(typeId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_hasRegisteredConverterFunction(fromTypeId: ::libc::c_int, toTypeId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_hasRegisteredDebugStreamOperator(typeId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_isRegistered_no_args(this_ptr: *const ::meta_type::MetaType) -> bool;
  pub fn qt_core_c_QMetaType_isRegistered_type(type_: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMetaType_isValid(this_ptr: *const ::meta_type::MetaType) -> bool;
  pub fn qt_core_c_QMetaType_load(stream: *mut ::data_stream::DataStream, type_: ::libc::c_int, data: *mut ::libc::c_void) -> bool;
  pub fn qt_core_c_QMetaType_metaObject(this_ptr: *const ::meta_type::MetaType) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaType_metaObjectForType(type_: ::libc::c_int) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMetaType_registerNormalizedTypedef(normalizedTypeName: *const ::byte_array::ByteArray, aliasId: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_registerType(typeName: *const ::libc::c_char, deleter: extern "C" fn(*mut ::libc::c_void), creator: extern "C" fn(*const ::libc::c_void) -> *mut ::libc::c_void) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_registerTypedef(typeName: *const ::libc::c_char, aliasId: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_save(stream: *mut ::data_stream::DataStream, type_: ::libc::c_int, data: *const ::libc::c_void) -> bool;
  pub fn qt_core_c_QMetaType_sizeOf_no_args(this_ptr: *const ::meta_type::MetaType) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_sizeOf_type(type_: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_typeFlags(type_: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QMetaType_typeName(type_: ::libc::c_int) -> *const ::libc::c_char;
  pub fn qt_core_c_QMetaType_type_QByteArray(typeName: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_type_char(typeName: *const ::libc::c_char) -> ::libc::c_int;
  pub fn qt_core_c_QMetaType_unregisterType(type_: ::libc::c_int) -> bool;

  // Header: QMimeData
  pub fn qt_core_c_QMimeData_G_dynamic_cast_QMimeData_ptr(ptr: *mut ::object::Object) -> *mut ::mime_data::MimeData;
  pub fn qt_core_c_QMimeData_G_static_cast_QMimeData_ptr(ptr: *mut ::object::Object) -> *mut ::mime_data::MimeData;
  pub fn qt_core_c_QMimeData_G_static_cast_QObject_ptr(ptr: *mut ::mime_data::MimeData) -> *mut ::object::Object;
  pub fn qt_core_c_QMimeData_clear(this_ptr: *mut ::mime_data::MimeData);
  pub fn qt_core_c_QMimeData_colorData_to_output(this_ptr: *const ::mime_data::MimeData, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMimeData_data_to_output(this_ptr: *const ::mime_data::MimeData, mimetype: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QMimeData_delete(this_ptr: *mut ::mime_data::MimeData);
  pub fn qt_core_c_QMimeData_formats_to_output(this_ptr: *const ::mime_data::MimeData, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QMimeData_hasColor(this_ptr: *const ::mime_data::MimeData) -> bool;
  pub fn qt_core_c_QMimeData_hasFormat(this_ptr: *const ::mime_data::MimeData, mimetype: *const ::string::String) -> bool;
  pub fn qt_core_c_QMimeData_hasHtml(this_ptr: *const ::mime_data::MimeData) -> bool;
  pub fn qt_core_c_QMimeData_hasImage(this_ptr: *const ::mime_data::MimeData) -> bool;
  pub fn qt_core_c_QMimeData_hasText(this_ptr: *const ::mime_data::MimeData) -> bool;
  pub fn qt_core_c_QMimeData_hasUrls(this_ptr: *const ::mime_data::MimeData) -> bool;
  pub fn qt_core_c_QMimeData_html_to_output(this_ptr: *const ::mime_data::MimeData, output: *mut ::string::String);
  pub fn qt_core_c_QMimeData_imageData_to_output(this_ptr: *const ::mime_data::MimeData, output: *mut ::variant::Variant);
  pub fn qt_core_c_QMimeData_metaObject(this_ptr: *const ::mime_data::MimeData) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QMimeData_new() -> *mut ::mime_data::MimeData;
  pub fn qt_core_c_QMimeData_removeFormat(this_ptr: *mut ::mime_data::MimeData, mimetype: *const ::string::String);
  pub fn qt_core_c_QMimeData_setColorData(this_ptr: *mut ::mime_data::MimeData, color: *const ::variant::Variant);
  pub fn qt_core_c_QMimeData_setData(this_ptr: *mut ::mime_data::MimeData, mimetype: *const ::string::String, data: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QMimeData_setHtml(this_ptr: *mut ::mime_data::MimeData, html: *const ::string::String);
  pub fn qt_core_c_QMimeData_setImageData(this_ptr: *mut ::mime_data::MimeData, image: *const ::variant::Variant);
  pub fn qt_core_c_QMimeData_setText(this_ptr: *mut ::mime_data::MimeData, text: *const ::string::String);
  pub fn qt_core_c_QMimeData_setUrls(this_ptr: *mut ::mime_data::MimeData, urls: *const ::list::ListUrl);
  pub fn qt_core_c_QMimeData_text_to_output(this_ptr: *const ::mime_data::MimeData, output: *mut ::string::String);
  pub fn qt_core_c_QMimeData_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QMimeData_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QMimeData_urls_to_output(this_ptr: *const ::mime_data::MimeData, output: *mut ::list::ListUrl);

  // Header: QMimeDatabase
  pub fn qt_core_c_QMimeDatabase_allMimeTypes_to_output(this_ptr: *const ::mime_database::MimeDatabase, output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QMimeDatabase_constructor(output: *mut ::mime_database::MimeDatabase);
  pub fn qt_core_c_QMimeDatabase_destructor(this_ptr: *mut ::mime_database::MimeDatabase);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForData_to_output_data(this_ptr: *const ::mime_database::MimeDatabase, data: *const ::byte_array::ByteArray, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForData_to_output_device(this_ptr: *const ::mime_database::MimeDatabase, device: *mut ::io_device::IODevice, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForFileNameAndData_to_output_fileName_data(this_ptr: *const ::mime_database::MimeDatabase, fileName: *const ::string::String, data: *const ::byte_array::ByteArray, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForFileNameAndData_to_output_fileName_device(this_ptr: *const ::mime_database::MimeDatabase, fileName: *const ::string::String, device: *mut ::io_device::IODevice, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForFile_to_output_fileInfo(this_ptr: *const ::mime_database::MimeDatabase, fileInfo: *const ::file_info::FileInfo, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForFile_to_output_fileInfo_mode(this_ptr: *const ::mime_database::MimeDatabase, fileInfo: *const ::file_info::FileInfo, mode: ::mime_database::MatchMode, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForFile_to_output_fileName(this_ptr: *const ::mime_database::MimeDatabase, fileName: *const ::string::String, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForFile_to_output_fileName_mode(this_ptr: *const ::mime_database::MimeDatabase, fileName: *const ::string::String, mode: ::mime_database::MatchMode, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForName_to_output(this_ptr: *const ::mime_database::MimeDatabase, nameOrAlias: *const ::string::String, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypeForUrl_to_output(this_ptr: *const ::mime_database::MimeDatabase, url: *const ::url::Url, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeDatabase_mimeTypesForFileName_to_output(this_ptr: *const ::mime_database::MimeDatabase, fileName: *const ::string::String, output: *mut ::list::ListMimeType);
  pub fn qt_core_c_QMimeDatabase_suffixForFileName_to_output(this_ptr: *const ::mime_database::MimeDatabase, fileName: *const ::string::String, output: *mut ::string::String);

  // Header: QMimeType
  pub fn qt_core_c_QMimeType_G_operator_shl_to_output(debug: *const ::debug::Debug, mime: *const ::mime_type::MimeType, output: *mut ::debug::Debug);
  pub fn qt_core_c_QMimeType_G_qHash_key(key: *const ::mime_type::MimeType) -> ::libc::c_uint;
  pub fn qt_core_c_QMimeType_G_qHash_key_seed(key: *const ::mime_type::MimeType, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QMimeType_G_swap(value1: *mut ::mime_type::MimeType, value2: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeType_aliases_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QMimeType_allAncestors_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QMimeType_comment_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string::String);
  pub fn qt_core_c_QMimeType_constructor_no_args(output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeType_constructor_other(other: *const ::mime_type::MimeType, output: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeType_destructor(this_ptr: *mut ::mime_type::MimeType);
  pub fn qt_core_c_QMimeType_filterString_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string::String);
  pub fn qt_core_c_QMimeType_genericIconName_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string::String);
  pub fn qt_core_c_QMimeType_globPatterns_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QMimeType_iconName_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string::String);
  pub fn qt_core_c_QMimeType_inherits(this_ptr: *const ::mime_type::MimeType, mimeTypeName: *const ::string::String) -> bool;
  pub fn qt_core_c_QMimeType_isDefault(this_ptr: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QMimeType_isValid(this_ptr: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QMimeType_name_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string::String);
  pub fn qt_core_c_QMimeType_operator_assign(this_ptr: *mut ::mime_type::MimeType, other: *const ::mime_type::MimeType) -> *mut ::mime_type::MimeType;
  pub fn qt_core_c_QMimeType_operator_eq(this_ptr: *const ::mime_type::MimeType, other: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QMimeType_operator_neq(this_ptr: *const ::mime_type::MimeType, other: *const ::mime_type::MimeType) -> bool;
  pub fn qt_core_c_QMimeType_parentMimeTypes_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QMimeType_preferredSuffix_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string::String);
  pub fn qt_core_c_QMimeType_suffixes_to_output(this_ptr: *const ::mime_type::MimeType, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QMimeType_swap(this_ptr: *mut ::mime_type::MimeType, other: *mut ::mime_type::MimeType);

  // Header: QModelIndex
  pub fn qt_core_c_QModelIndex_child_to_output(this_ptr: *const ::model_index::ModelIndex, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QModelIndex_column(this_ptr: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QModelIndex_constructor(output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QModelIndex_data_to_output_no_args(this_ptr: *const ::model_index::ModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QModelIndex_data_to_output_role(this_ptr: *const ::model_index::ModelIndex, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QModelIndex_destructor(this_ptr: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QModelIndex_internalId(this_ptr: *const ::model_index::ModelIndex) -> usize;
  pub fn qt_core_c_QModelIndex_internalPointer(this_ptr: *const ::model_index::ModelIndex) -> *mut ::libc::c_void;
  pub fn qt_core_c_QModelIndex_isValid(this_ptr: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QModelIndex_model(this_ptr: *const ::model_index::ModelIndex) -> *const ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QModelIndex_operator_eq(this_ptr: *const ::model_index::ModelIndex, other: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QModelIndex_operator_lt(this_ptr: *const ::model_index::ModelIndex, other: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QModelIndex_operator_neq(this_ptr: *const ::model_index::ModelIndex, other: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QModelIndex_parent_to_output(this_ptr: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QModelIndex_row(this_ptr: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QModelIndex_sibling_to_output(this_ptr: *const ::model_index::ModelIndex, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);

  // Header: QMutex
  pub fn qt_core_c_QMutex_G_static_cast_QBasicMutex_ptr(ptr: *mut ::mutex::Mutex) -> *mut ::basic_mutex::BasicMutex;
  pub fn qt_core_c_QMutex_G_static_cast_QMutex_ptr(ptr: *mut ::basic_mutex::BasicMutex) -> *mut ::mutex::Mutex;
  pub fn qt_core_c_QMutex_delete(this_ptr: *mut ::mutex::Mutex);
  pub fn qt_core_c_QMutex_isRecursive(this_ptr: *const ::mutex::Mutex) -> bool;
  pub fn qt_core_c_QMutex_lock(this_ptr: *mut ::mutex::Mutex);
  pub fn qt_core_c_QMutex_new_mode(mode: ::mutex::RecursionMode) -> *mut ::mutex::Mutex;
  pub fn qt_core_c_QMutex_new_no_args() -> *mut ::mutex::Mutex;
  pub fn qt_core_c_QMutex_tryLock_no_args(this_ptr: *mut ::mutex::Mutex) -> bool;
  pub fn qt_core_c_QMutex_tryLock_timeout(this_ptr: *mut ::mutex::Mutex, timeout: ::libc::c_int) -> bool;
  pub fn qt_core_c_QMutex_try_lock(this_ptr: *mut ::mutex::Mutex) -> bool;
  pub fn qt_core_c_QMutex_unlock(this_ptr: *mut ::mutex::Mutex);

  // Header: QMutexLocker
  pub fn qt_core_c_QMutexLocker_constructor(m: *mut ::basic_mutex::BasicMutex, output: *mut ::mutex_locker::MutexLocker);
  pub fn qt_core_c_QMutexLocker_destructor(this_ptr: *mut ::mutex_locker::MutexLocker);
  pub fn qt_core_c_QMutexLocker_mutex(this_ptr: *const ::mutex_locker::MutexLocker) -> *mut ::mutex::Mutex;
  pub fn qt_core_c_QMutexLocker_relock(this_ptr: *mut ::mutex_locker::MutexLocker);
  pub fn qt_core_c_QMutexLocker_unlock(this_ptr: *mut ::mutex_locker::MutexLocker);

  // Header: QObject
  pub fn qt_core_c_QObject_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::object::Object, output: *mut ::debug::Debug);
  pub fn qt_core_c_QObject_blockSignals(this_ptr: *mut ::object::Object, b: bool) -> bool;
  pub fn qt_core_c_QObject_children(this_ptr: *const ::object::Object) -> *const ::list::ListObjectMutPtr;
  pub fn qt_core_c_QObject_connect_to_output_sender_signal_member(this_ptr: *const ::object::Object, sender: *const ::object::Object, signal: *const ::libc::c_char, member: *const ::libc::c_char, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QObject_connect_to_output_sender_signal_member_type(this_ptr: *const ::object::Object, sender: *const ::object::Object, signal: *const ::libc::c_char, member: *const ::libc::c_char, type_: *const ::qt::ConnectionType, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QObject_connect_to_output_sender_signal_receiver_member(sender: *const ::object::Object, signal: *const ::libc::c_char, receiver: *const ::object::Object, member: *const ::libc::c_char, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QObject_connect_to_output_sender_signal_receiver_member_arg5(sender: *const ::object::Object, signal: *const ::libc::c_char, receiver: *const ::object::Object, member: *const ::libc::c_char, arg5: *const ::qt::ConnectionType, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QObject_connect_to_output_sender_signal_receiver_method(sender: *const ::object::Object, signal: *const ::meta_method::MetaMethod, receiver: *const ::object::Object, method: *const ::meta_method::MetaMethod, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QObject_connect_to_output_sender_signal_receiver_method_type(sender: *const ::object::Object, signal: *const ::meta_method::MetaMethod, receiver: *const ::object::Object, method: *const ::meta_method::MetaMethod, type_: *const ::qt::ConnectionType, output: *mut ::meta_object::Connection);
  pub fn qt_core_c_QObject_delete(this_ptr: *mut ::object::Object);
  pub fn qt_core_c_QObject_deleteLater(this_ptr: *mut ::object::Object);
  pub fn qt_core_c_QObject_destroyed_arg1(this_ptr: *mut ::object::Object, arg1: *mut ::object::Object);
  pub fn qt_core_c_QObject_destroyed_no_args(this_ptr: *mut ::object::Object);
  pub fn qt_core_c_QObject_disconnect_QMetaObject_Connection(arg1: *const ::meta_object::Connection) -> bool;
  pub fn qt_core_c_QObject_disconnect_QObject(this_ptr: *const ::object::Object, receiver: *const ::object::Object) -> bool;
  pub fn qt_core_c_QObject_disconnect_QObject_QMetaMethod_QObject_QMetaMethod(sender: *const ::object::Object, signal: *const ::meta_method::MetaMethod, receiver: *const ::object::Object, member: *const ::meta_method::MetaMethod) -> bool;
  pub fn qt_core_c_QObject_disconnect_QObject_char(this_ptr: *const ::object::Object, receiver: *const ::object::Object, member: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QObject_disconnect_QObject_char_QObject_char(sender: *const ::object::Object, signal: *const ::libc::c_char, receiver: *const ::object::Object, member: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QObject_disconnect_char(this_ptr: *const ::object::Object, signal: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QObject_disconnect_char_QObject(this_ptr: *const ::object::Object, signal: *const ::libc::c_char, receiver: *const ::object::Object) -> bool;
  pub fn qt_core_c_QObject_disconnect_char_QObject_char(this_ptr: *const ::object::Object, signal: *const ::libc::c_char, receiver: *const ::object::Object, member: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QObject_disconnect_no_args(this_ptr: *const ::object::Object) -> bool;
  pub fn qt_core_c_QObject_dumpObjectInfo(this_ptr: *mut ::object::Object);
  pub fn qt_core_c_QObject_dumpObjectInfo_const(this_ptr: *const ::object::Object);
  pub fn qt_core_c_QObject_dumpObjectTree(this_ptr: *mut ::object::Object);
  pub fn qt_core_c_QObject_dumpObjectTree_const(this_ptr: *const ::object::Object);
  pub fn qt_core_c_QObject_dynamicPropertyNames_to_output(this_ptr: *const ::object::Object, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QObject_event(this_ptr: *mut ::object::Object, event: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QObject_eventFilter(this_ptr: *mut ::object::Object, watched: *mut ::object::Object, event: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QObject_inherits(this_ptr: *const ::object::Object, classname: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QObject_installEventFilter(this_ptr: *mut ::object::Object, filterObj: *mut ::object::Object);
  pub fn qt_core_c_QObject_isWidgetType(this_ptr: *const ::object::Object) -> bool;
  pub fn qt_core_c_QObject_isWindowType(this_ptr: *const ::object::Object) -> bool;
  pub fn qt_core_c_QObject_killTimer(this_ptr: *mut ::object::Object, id: ::libc::c_int);
  pub fn qt_core_c_QObject_metaObject(this_ptr: *const ::object::Object) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QObject_moveToThread(this_ptr: *mut ::object::Object, thread: *mut ::thread::Thread);
  pub fn qt_core_c_QObject_new_no_args() -> *mut ::object::Object;
  pub fn qt_core_c_QObject_new_parent(parent: *mut ::object::Object) -> *mut ::object::Object;
  pub fn qt_core_c_QObject_objectName_to_output(this_ptr: *const ::object::Object, output: *mut ::string::String);
  pub fn qt_core_c_QObject_parent(this_ptr: *const ::object::Object) -> *mut ::object::Object;
  pub fn qt_core_c_QObject_property_to_output(this_ptr: *const ::object::Object, name: *const ::libc::c_char, output: *mut ::variant::Variant);
  pub fn qt_core_c_QObject_removeEventFilter(this_ptr: *mut ::object::Object, obj: *mut ::object::Object);
  pub fn qt_core_c_QObject_setObjectName(this_ptr: *mut ::object::Object, name: *const ::string::String);
  pub fn qt_core_c_QObject_setParent(this_ptr: *mut ::object::Object, parent: *mut ::object::Object);
  pub fn qt_core_c_QObject_setProperty(this_ptr: *mut ::object::Object, name: *const ::libc::c_char, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QObject_signalsBlocked(this_ptr: *const ::object::Object) -> bool;
  pub fn qt_core_c_QObject_startTimer_interval(this_ptr: *mut ::object::Object, interval: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QObject_startTimer_interval_timerType(this_ptr: *mut ::object::Object, interval: ::libc::c_int, timerType: *const ::qt::TimerType) -> ::libc::c_int;
  pub fn qt_core_c_QObject_thread(this_ptr: *const ::object::Object) -> *mut ::thread::Thread;
  pub fn qt_core_c_QObject_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QObject_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QObjectCleanupHandler
  pub fn qt_core_c_QObjectCleanupHandler_G_dynamic_cast_QObjectCleanupHandler_ptr(ptr: *mut ::object::Object) -> *mut ::object_cleanup_handler::ObjectCleanupHandler;
  pub fn qt_core_c_QObjectCleanupHandler_G_static_cast_QObjectCleanupHandler_ptr(ptr: *mut ::object::Object) -> *mut ::object_cleanup_handler::ObjectCleanupHandler;
  pub fn qt_core_c_QObjectCleanupHandler_G_static_cast_QObject_ptr(ptr: *mut ::object_cleanup_handler::ObjectCleanupHandler) -> *mut ::object::Object;
  pub fn qt_core_c_QObjectCleanupHandler_add(this_ptr: *mut ::object_cleanup_handler::ObjectCleanupHandler, object: *mut ::object::Object) -> *mut ::object::Object;
  pub fn qt_core_c_QObjectCleanupHandler_clear(this_ptr: *mut ::object_cleanup_handler::ObjectCleanupHandler);
  pub fn qt_core_c_QObjectCleanupHandler_delete(this_ptr: *mut ::object_cleanup_handler::ObjectCleanupHandler);
  pub fn qt_core_c_QObjectCleanupHandler_isEmpty(this_ptr: *const ::object_cleanup_handler::ObjectCleanupHandler) -> bool;
  pub fn qt_core_c_QObjectCleanupHandler_metaObject(this_ptr: *const ::object_cleanup_handler::ObjectCleanupHandler) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QObjectCleanupHandler_new() -> *mut ::object_cleanup_handler::ObjectCleanupHandler;
  pub fn qt_core_c_QObjectCleanupHandler_remove(this_ptr: *mut ::object_cleanup_handler::ObjectCleanupHandler, object: *mut ::object::Object);
  pub fn qt_core_c_QObjectCleanupHandler_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QObjectCleanupHandler_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QOperatingSystemVersion
  pub fn qt_core_c_QOperatingSystemVersion_constructor_osType_vmajor(osType: ::operating_system_version::OSType, vmajor: ::libc::c_int, output: *mut ::operating_system_version::OperatingSystemVersion);
  pub fn qt_core_c_QOperatingSystemVersion_constructor_osType_vmajor_vminor(osType: ::operating_system_version::OSType, vmajor: ::libc::c_int, vminor: ::libc::c_int, output: *mut ::operating_system_version::OperatingSystemVersion);
  pub fn qt_core_c_QOperatingSystemVersion_constructor_osType_vmajor_vminor_vmicro(osType: ::operating_system_version::OSType, vmajor: ::libc::c_int, vminor: ::libc::c_int, vmicro: ::libc::c_int, output: *mut ::operating_system_version::OperatingSystemVersion);
  pub fn qt_core_c_QOperatingSystemVersion_constructor_other(other: *const ::operating_system_version::OperatingSystemVersion, output: *mut ::operating_system_version::OperatingSystemVersion);
  pub fn qt_core_c_QOperatingSystemVersion_current_to_output(output: *mut ::operating_system_version::OperatingSystemVersion);
  pub fn qt_core_c_QOperatingSystemVersion_destructor(this_ptr: *mut ::operating_system_version::OperatingSystemVersion);
  pub fn qt_core_c_QOperatingSystemVersion_majorVersion(this_ptr: *const ::operating_system_version::OperatingSystemVersion) -> ::libc::c_int;
  pub fn qt_core_c_QOperatingSystemVersion_microVersion(this_ptr: *const ::operating_system_version::OperatingSystemVersion) -> ::libc::c_int;
  pub fn qt_core_c_QOperatingSystemVersion_minorVersion(this_ptr: *const ::operating_system_version::OperatingSystemVersion) -> ::libc::c_int;
  pub fn qt_core_c_QOperatingSystemVersion_name_to_output(this_ptr: *const ::operating_system_version::OperatingSystemVersion, output: *mut ::string::String);
  pub fn qt_core_c_QOperatingSystemVersion_segmentCount(this_ptr: *const ::operating_system_version::OperatingSystemVersion) -> ::libc::c_int;
  pub fn qt_core_c_QOperatingSystemVersion_type(this_ptr: *const ::operating_system_version::OperatingSystemVersion) -> ::operating_system_version::OSType;

  // Header: QPair
  pub fn qt_core_c_QPair_QString_QString_constructor_no_args(output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QPair_QString_QString_constructor_t1_t2(t1: *const ::string::String, t2: *const ::string::String, output: *mut ::pair::PairStringString);
  pub fn qt_core_c_QPair_QString_QString_destructor(this_ptr: *mut ::pair::PairStringString);
  pub fn qt_core_c_QPair_QString_QString_swap(this_ptr: *mut ::pair::PairStringString, other: *mut ::pair::PairStringString);
  pub fn qt_core_c_QPair_double_QVariant_constructor_no_args(output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QPair_double_QVariant_constructor_t1_t2(t1: *const ::libc::c_double, t2: *const ::variant::Variant, output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QPair_double_QVariant_destructor(this_ptr: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QPair_double_QVariant_swap(this_ptr: *mut ::pair::PairCDoubleVariant, other: *mut ::pair::PairCDoubleVariant);

  // Header: QParallelAnimationGroup
  pub fn qt_core_c_QParallelAnimationGroup_G_dynamic_cast_QParallelAnimationGroup_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_G_dynamic_cast_QParallelAnimationGroup_ptr_QAnimationGroup(ptr: *mut ::animation_group::AnimationGroup) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_G_dynamic_cast_QParallelAnimationGroup_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::parallel_animation_group::ParallelAnimationGroup) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QParallelAnimationGroup_G_static_cast_QAnimationGroup_ptr(ptr: *mut ::parallel_animation_group::ParallelAnimationGroup) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_G_static_cast_QObject_ptr(ptr: *mut ::parallel_animation_group::ParallelAnimationGroup) -> *mut ::object::Object;
  pub fn qt_core_c_QParallelAnimationGroup_G_static_cast_QParallelAnimationGroup_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_G_static_cast_QParallelAnimationGroup_ptr_QAnimationGroup(ptr: *mut ::animation_group::AnimationGroup) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_G_static_cast_QParallelAnimationGroup_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_delete(this_ptr: *mut ::parallel_animation_group::ParallelAnimationGroup);
  pub fn qt_core_c_QParallelAnimationGroup_duration(this_ptr: *const ::parallel_animation_group::ParallelAnimationGroup) -> ::libc::c_int;
  pub fn qt_core_c_QParallelAnimationGroup_metaObject(this_ptr: *const ::parallel_animation_group::ParallelAnimationGroup) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QParallelAnimationGroup_new_no_args() -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_new_parent(parent: *mut ::object::Object) -> *mut ::parallel_animation_group::ParallelAnimationGroup;
  pub fn qt_core_c_QParallelAnimationGroup_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QParallelAnimationGroup_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QPauseAnimation
  pub fn qt_core_c_QPauseAnimation_G_dynamic_cast_QPauseAnimation_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_G_dynamic_cast_QPauseAnimation_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::pause_animation::PauseAnimation) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QPauseAnimation_G_static_cast_QObject_ptr(ptr: *mut ::pause_animation::PauseAnimation) -> *mut ::object::Object;
  pub fn qt_core_c_QPauseAnimation_G_static_cast_QPauseAnimation_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_G_static_cast_QPauseAnimation_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_delete(this_ptr: *mut ::pause_animation::PauseAnimation);
  pub fn qt_core_c_QPauseAnimation_duration(this_ptr: *const ::pause_animation::PauseAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QPauseAnimation_metaObject(this_ptr: *const ::pause_animation::PauseAnimation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QPauseAnimation_new_msecs(msecs: ::libc::c_int) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_new_msecs_parent(msecs: ::libc::c_int, parent: *mut ::object::Object) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_new_no_args() -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_new_parent(parent: *mut ::object::Object) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QPauseAnimation_setDuration(this_ptr: *mut ::pause_animation::PauseAnimation, msecs: ::libc::c_int);
  pub fn qt_core_c_QPauseAnimation_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QPauseAnimation_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QPersistentModelIndex
  pub fn qt_core_c_QPersistentModelIndex_child_to_output(this_ptr: *const ::persistent_model_index::PersistentModelIndex, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_column(this_ptr: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QPersistentModelIndex_constructor_index(index: *const ::model_index::ModelIndex, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_constructor_no_args(output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_constructor_other(other: *const ::persistent_model_index::PersistentModelIndex, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_convert_to_QModelIndex_ref(this_ptr: *const ::persistent_model_index::PersistentModelIndex) -> *const ::model_index::ModelIndex;
  pub fn qt_core_c_QPersistentModelIndex_data_to_output_no_args(this_ptr: *const ::persistent_model_index::PersistentModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QPersistentModelIndex_data_to_output_role(this_ptr: *const ::persistent_model_index::PersistentModelIndex, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QPersistentModelIndex_destructor(this_ptr: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_isValid(this_ptr: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QPersistentModelIndex_model(this_ptr: *const ::persistent_model_index::PersistentModelIndex) -> *const ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QPersistentModelIndex_operator_assign_QModelIndex(this_ptr: *mut ::persistent_model_index::PersistentModelIndex, other: *const ::model_index::ModelIndex) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QPersistentModelIndex_operator_assign_QPersistentModelIndex(this_ptr: *mut ::persistent_model_index::PersistentModelIndex, other: *const ::persistent_model_index::PersistentModelIndex) -> *mut ::persistent_model_index::PersistentModelIndex;
  pub fn qt_core_c_QPersistentModelIndex_operator_eq_QModelIndex(this_ptr: *const ::persistent_model_index::PersistentModelIndex, other: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QPersistentModelIndex_operator_eq_QPersistentModelIndex(this_ptr: *const ::persistent_model_index::PersistentModelIndex, other: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QPersistentModelIndex_operator_lt(this_ptr: *const ::persistent_model_index::PersistentModelIndex, other: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QPersistentModelIndex_operator_neq_QModelIndex(this_ptr: *const ::persistent_model_index::PersistentModelIndex, other: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QPersistentModelIndex_operator_neq_QPersistentModelIndex(this_ptr: *const ::persistent_model_index::PersistentModelIndex, other: *const ::persistent_model_index::PersistentModelIndex) -> bool;
  pub fn qt_core_c_QPersistentModelIndex_parent_to_output(this_ptr: *const ::persistent_model_index::PersistentModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_row(this_ptr: *const ::persistent_model_index::PersistentModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QPersistentModelIndex_sibling_to_output(this_ptr: *const ::persistent_model_index::PersistentModelIndex, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QPersistentModelIndex_swap(this_ptr: *mut ::persistent_model_index::PersistentModelIndex, other: *mut ::persistent_model_index::PersistentModelIndex);

  // Header: QPluginLoader
  pub fn qt_core_c_QPluginLoader_G_dynamic_cast_QPluginLoader_ptr(ptr: *mut ::object::Object) -> *mut ::plugin_loader::PluginLoader;
  pub fn qt_core_c_QPluginLoader_G_static_cast_QObject_ptr(ptr: *mut ::plugin_loader::PluginLoader) -> *mut ::object::Object;
  pub fn qt_core_c_QPluginLoader_G_static_cast_QPluginLoader_ptr(ptr: *mut ::object::Object) -> *mut ::plugin_loader::PluginLoader;
  pub fn qt_core_c_QPluginLoader_delete(this_ptr: *mut ::plugin_loader::PluginLoader);
  pub fn qt_core_c_QPluginLoader_errorString_to_output(this_ptr: *const ::plugin_loader::PluginLoader, output: *mut ::string::String);
  pub fn qt_core_c_QPluginLoader_fileName_to_output(this_ptr: *const ::plugin_loader::PluginLoader, output: *mut ::string::String);
  pub fn qt_core_c_QPluginLoader_instance(this_ptr: *mut ::plugin_loader::PluginLoader) -> *mut ::object::Object;
  pub fn qt_core_c_QPluginLoader_isLoaded(this_ptr: *const ::plugin_loader::PluginLoader) -> bool;
  pub fn qt_core_c_QPluginLoader_load(this_ptr: *mut ::plugin_loader::PluginLoader) -> bool;
  pub fn qt_core_c_QPluginLoader_metaData_to_output(this_ptr: *const ::plugin_loader::PluginLoader, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QPluginLoader_metaObject(this_ptr: *const ::plugin_loader::PluginLoader) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QPluginLoader_new_fileName(fileName: *const ::string::String) -> *mut ::plugin_loader::PluginLoader;
  pub fn qt_core_c_QPluginLoader_new_fileName_parent(fileName: *const ::string::String, parent: *mut ::object::Object) -> *mut ::plugin_loader::PluginLoader;
  pub fn qt_core_c_QPluginLoader_new_no_args() -> *mut ::plugin_loader::PluginLoader;
  pub fn qt_core_c_QPluginLoader_new_parent(parent: *mut ::object::Object) -> *mut ::plugin_loader::PluginLoader;
  pub fn qt_core_c_QPluginLoader_setFileName(this_ptr: *mut ::plugin_loader::PluginLoader, fileName: *const ::string::String);
  pub fn qt_core_c_QPluginLoader_staticInstances_to_output(output: *mut ::list::ListObjectMutPtr);
  pub fn qt_core_c_QPluginLoader_staticPlugins_to_output(output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QPluginLoader_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QPluginLoader_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QPluginLoader_unload(this_ptr: *mut ::plugin_loader::PluginLoader) -> bool;

  // Header: QPoint
  pub fn qt_core_c_QPoint_G_operator_shl_QDataStream_QPoint(arg1: *mut ::data_stream::DataStream, arg2: *const ::point::Point) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QPoint_G_operator_shl_QDataStream_QPointF(arg1: *mut ::data_stream::DataStream, arg2: *const ::point_f::PointF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QPoint_G_operator_shl_to_output_arg1_arg2(arg1: *const ::debug::Debug, arg2: *const ::point::Point, output: *mut ::debug::Debug);
  pub fn qt_core_c_QPoint_G_operator_shl_to_output_d_p(d: *const ::debug::Debug, p: *const ::point_f::PointF, output: *mut ::debug::Debug);
  pub fn qt_core_c_QPoint_G_operator_shr_QDataStream_QPoint(arg1: *mut ::data_stream::DataStream, arg2: *mut ::point::Point) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QPoint_G_operator_shr_QDataStream_QPointF(arg1: *mut ::data_stream::DataStream, arg2: *mut ::point_f::PointF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QPoint_constructor_no_args(output: *mut ::point::Point);
  pub fn qt_core_c_QPoint_constructor_xpos_ypos(xpos: ::libc::c_int, ypos: ::libc::c_int, output: *mut ::point::Point);
  pub fn qt_core_c_QPoint_destructor(this_ptr: *mut ::point::Point);
  pub fn qt_core_c_QPoint_dotProduct(p1: *const ::point::Point, p2: *const ::point::Point) -> ::libc::c_int;
  pub fn qt_core_c_QPoint_isNull(this_ptr: *const ::point::Point) -> bool;
  pub fn qt_core_c_QPoint_manhattanLength(this_ptr: *const ::point::Point) -> ::libc::c_int;
  pub fn qt_core_c_QPoint_operator_add_assign(this_ptr: *mut ::point::Point, p: *const ::point::Point) -> *mut ::point::Point;
  pub fn qt_core_c_QPoint_operator_div_assign(this_ptr: *mut ::point::Point, divisor: ::libc::c_double) -> *mut ::point::Point;
  pub fn qt_core_c_QPoint_operator_mul_assign_double(this_ptr: *mut ::point::Point, factor: ::libc::c_double) -> *mut ::point::Point;
  pub fn qt_core_c_QPoint_operator_mul_assign_float(this_ptr: *mut ::point::Point, factor: ::libc::c_float) -> *mut ::point::Point;
  pub fn qt_core_c_QPoint_operator_mul_assign_int(this_ptr: *mut ::point::Point, factor: ::libc::c_int) -> *mut ::point::Point;
  pub fn qt_core_c_QPoint_operator_sub_assign(this_ptr: *mut ::point::Point, p: *const ::point::Point) -> *mut ::point::Point;
  pub fn qt_core_c_QPoint_rx(this_ptr: *mut ::point::Point) -> *mut ::libc::c_int;
  pub fn qt_core_c_QPoint_ry(this_ptr: *mut ::point::Point) -> *mut ::libc::c_int;
  pub fn qt_core_c_QPoint_setX(this_ptr: *mut ::point::Point, x: ::libc::c_int);
  pub fn qt_core_c_QPoint_setY(this_ptr: *mut ::point::Point, y: ::libc::c_int);
  pub fn qt_core_c_QPoint_x(this_ptr: *const ::point::Point) -> ::libc::c_int;
  pub fn qt_core_c_QPoint_y(this_ptr: *const ::point::Point) -> ::libc::c_int;

  // Header: QPointF
  pub fn qt_core_c_QPointF_constructor_no_args(output: *mut ::point_f::PointF);
  pub fn qt_core_c_QPointF_constructor_p(p: *const ::point::Point, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QPointF_constructor_xpos_ypos(xpos: ::libc::c_double, ypos: ::libc::c_double, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QPointF_destructor(this_ptr: *mut ::point_f::PointF);
  pub fn qt_core_c_QPointF_dotProduct(p1: *const ::point_f::PointF, p2: *const ::point_f::PointF) -> ::libc::c_double;
  pub fn qt_core_c_QPointF_isNull(this_ptr: *const ::point_f::PointF) -> bool;
  pub fn qt_core_c_QPointF_manhattanLength(this_ptr: *const ::point_f::PointF) -> ::libc::c_double;
  pub fn qt_core_c_QPointF_operator_add_assign(this_ptr: *mut ::point_f::PointF, p: *const ::point_f::PointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QPointF_operator_div_assign(this_ptr: *mut ::point_f::PointF, c: ::libc::c_double) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QPointF_operator_mul_assign(this_ptr: *mut ::point_f::PointF, c: ::libc::c_double) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QPointF_operator_sub_assign(this_ptr: *mut ::point_f::PointF, p: *const ::point_f::PointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QPointF_rx(this_ptr: *mut ::point_f::PointF) -> *mut ::libc::c_double;
  pub fn qt_core_c_QPointF_ry(this_ptr: *mut ::point_f::PointF) -> *mut ::libc::c_double;
  pub fn qt_core_c_QPointF_setX(this_ptr: *mut ::point_f::PointF, x: ::libc::c_double);
  pub fn qt_core_c_QPointF_setY(this_ptr: *mut ::point_f::PointF, y: ::libc::c_double);
  pub fn qt_core_c_QPointF_toPoint_to_output(this_ptr: *const ::point_f::PointF, output: *mut ::point::Point);
  pub fn qt_core_c_QPointF_x(this_ptr: *const ::point_f::PointF) -> ::libc::c_double;
  pub fn qt_core_c_QPointF_y(this_ptr: *const ::point_f::PointF) -> ::libc::c_double;

  // Header: QProcess
  pub fn qt_core_c_QProcess_G_dynamic_cast_QProcess_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::process::Process;
  pub fn qt_core_c_QProcess_G_dynamic_cast_QProcess_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::process::Process;
  pub fn qt_core_c_QProcess_G_static_cast_QIODevice_ptr(ptr: *mut ::process::Process) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QProcess_G_static_cast_QObject_ptr(ptr: *mut ::process::Process) -> *mut ::object::Object;
  pub fn qt_core_c_QProcess_G_static_cast_QProcess_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::process::Process;
  pub fn qt_core_c_QProcess_G_static_cast_QProcess_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::process::Process;
  pub fn qt_core_c_QProcess_G_swap(value1: *mut ::process_environment::ProcessEnvironment, value2: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcess_arguments_to_output(this_ptr: *const ::process::Process, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QProcess_atEnd(this_ptr: *const ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_bytesAvailable(this_ptr: *const ::process::Process) -> i64;
  pub fn qt_core_c_QProcess_bytesToWrite(this_ptr: *const ::process::Process) -> i64;
  pub fn qt_core_c_QProcess_canReadLine(this_ptr: *const ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_close(this_ptr: *mut ::process::Process);
  pub fn qt_core_c_QProcess_closeReadChannel(this_ptr: *mut ::process::Process, channel: ::process::ProcessChannel);
  pub fn qt_core_c_QProcess_closeWriteChannel(this_ptr: *mut ::process::Process);
  pub fn qt_core_c_QProcess_delete(this_ptr: *mut ::process::Process);
  pub fn qt_core_c_QProcess_environment_to_output(this_ptr: *const ::process::Process, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QProcess_execute_command(command: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QProcess_execute_program_arguments(program: *const ::string::String, arguments: *const ::string_list::StringList) -> ::libc::c_int;
  pub fn qt_core_c_QProcess_exitCode(this_ptr: *const ::process::Process) -> ::libc::c_int;
  pub fn qt_core_c_QProcess_inputChannelMode(this_ptr: *const ::process::Process) -> ::process::InputChannelMode;
  pub fn qt_core_c_QProcess_isSequential(this_ptr: *const ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_kill(this_ptr: *mut ::process::Process);
  pub fn qt_core_c_QProcess_metaObject(this_ptr: *const ::process::Process) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QProcess_new_no_args() -> *mut ::process::Process;
  pub fn qt_core_c_QProcess_new_parent(parent: *mut ::object::Object) -> *mut ::process::Process;
  pub fn qt_core_c_QProcess_nullDevice_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QProcess_open_mode(this_ptr: *mut ::process::Process, mode: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QProcess_open_no_args(this_ptr: *mut ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_processChannelMode(this_ptr: *const ::process::Process) -> ::process::ProcessChannelMode;
  pub fn qt_core_c_QProcess_processEnvironment_to_output(this_ptr: *const ::process::Process, output: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcess_processId(this_ptr: *const ::process::Process) -> i64;
  pub fn qt_core_c_QProcess_program_to_output(this_ptr: *const ::process::Process, output: *mut ::string::String);
  pub fn qt_core_c_QProcess_readAllStandardError_to_output(this_ptr: *mut ::process::Process, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QProcess_readAllStandardOutput_to_output(this_ptr: *mut ::process::Process, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QProcess_readChannel(this_ptr: *const ::process::Process) -> ::process::ProcessChannel;
  pub fn qt_core_c_QProcess_readChannelMode(this_ptr: *const ::process::Process) -> ::process::ProcessChannelMode;
  pub fn qt_core_c_QProcess_setArguments(this_ptr: *mut ::process::Process, arguments: *const ::string_list::StringList);
  pub fn qt_core_c_QProcess_setEnvironment(this_ptr: *mut ::process::Process, environment: *const ::string_list::StringList);
  pub fn qt_core_c_QProcess_setInputChannelMode(this_ptr: *mut ::process::Process, mode: ::process::InputChannelMode);
  pub fn qt_core_c_QProcess_setProcessChannelMode(this_ptr: *mut ::process::Process, mode: ::process::ProcessChannelMode);
  pub fn qt_core_c_QProcess_setProcessEnvironment(this_ptr: *mut ::process::Process, environment: *const ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcess_setProgram(this_ptr: *mut ::process::Process, program: *const ::string::String);
  pub fn qt_core_c_QProcess_setReadChannel(this_ptr: *mut ::process::Process, channel: ::process::ProcessChannel);
  pub fn qt_core_c_QProcess_setReadChannelMode(this_ptr: *mut ::process::Process, mode: ::process::ProcessChannelMode);
  pub fn qt_core_c_QProcess_setStandardErrorFile_fileName(this_ptr: *mut ::process::Process, fileName: *const ::string::String);
  pub fn qt_core_c_QProcess_setStandardErrorFile_fileName_mode(this_ptr: *mut ::process::Process, fileName: *const ::string::String, mode: ::libc::c_uint);
  pub fn qt_core_c_QProcess_setStandardInputFile(this_ptr: *mut ::process::Process, fileName: *const ::string::String);
  pub fn qt_core_c_QProcess_setStandardOutputFile_fileName(this_ptr: *mut ::process::Process, fileName: *const ::string::String);
  pub fn qt_core_c_QProcess_setStandardOutputFile_fileName_mode(this_ptr: *mut ::process::Process, fileName: *const ::string::String, mode: ::libc::c_uint);
  pub fn qt_core_c_QProcess_setStandardOutputProcess(this_ptr: *mut ::process::Process, destination: *mut ::process::Process);
  pub fn qt_core_c_QProcess_setWorkingDirectory(this_ptr: *mut ::process::Process, dir: *const ::string::String);
  pub fn qt_core_c_QProcess_startDetached_command(command: *const ::string::String) -> bool;
  pub fn qt_core_c_QProcess_startDetached_program_arguments(program: *const ::string::String, arguments: *const ::string_list::StringList) -> bool;
  pub fn qt_core_c_QProcess_startDetached_program_arguments_workingDirectory(program: *const ::string::String, arguments: *const ::string_list::StringList, workingDirectory: *const ::string::String) -> bool;
  pub fn qt_core_c_QProcess_startDetached_program_arguments_workingDirectory_pid(program: *const ::string::String, arguments: *const ::string_list::StringList, workingDirectory: *const ::string::String, pid: *mut i64) -> bool;
  pub fn qt_core_c_QProcess_start_command(this_ptr: *mut ::process::Process, command: *const ::string::String);
  pub fn qt_core_c_QProcess_start_command_mode(this_ptr: *mut ::process::Process, command: *const ::string::String, mode: ::libc::c_uint);
  pub fn qt_core_c_QProcess_start_mode(this_ptr: *mut ::process::Process, mode: ::libc::c_uint);
  pub fn qt_core_c_QProcess_start_no_args(this_ptr: *mut ::process::Process);
  pub fn qt_core_c_QProcess_start_program_arguments(this_ptr: *mut ::process::Process, program: *const ::string::String, arguments: *const ::string_list::StringList);
  pub fn qt_core_c_QProcess_start_program_arguments_mode(this_ptr: *mut ::process::Process, program: *const ::string::String, arguments: *const ::string_list::StringList, mode: ::libc::c_uint);
  pub fn qt_core_c_QProcess_systemEnvironment_to_output(output: *mut ::string_list::StringList);
  pub fn qt_core_c_QProcess_terminate(this_ptr: *mut ::process::Process);
  pub fn qt_core_c_QProcess_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QProcess_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QProcess_waitForBytesWritten_msecs(this_ptr: *mut ::process::Process, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QProcess_waitForBytesWritten_no_args(this_ptr: *mut ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_waitForFinished_msecs(this_ptr: *mut ::process::Process, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QProcess_waitForFinished_no_args(this_ptr: *mut ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_waitForReadyRead_msecs(this_ptr: *mut ::process::Process, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QProcess_waitForReadyRead_no_args(this_ptr: *mut ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_waitForStarted_msecs(this_ptr: *mut ::process::Process, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QProcess_waitForStarted_no_args(this_ptr: *mut ::process::Process) -> bool;
  pub fn qt_core_c_QProcess_workingDirectory_to_output(this_ptr: *const ::process::Process, output: *mut ::string::String);

  // Header: QProcessEnvironment
  pub fn qt_core_c_QProcessEnvironment_clear(this_ptr: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_constructor_no_args(output: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_constructor_other(other: *const ::process_environment::ProcessEnvironment, output: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_contains(this_ptr: *const ::process_environment::ProcessEnvironment, name: *const ::string::String) -> bool;
  pub fn qt_core_c_QProcessEnvironment_destructor(this_ptr: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_insert_e(this_ptr: *mut ::process_environment::ProcessEnvironment, e: *const ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_insert_name_value(this_ptr: *mut ::process_environment::ProcessEnvironment, name: *const ::string::String, value: *const ::string::String);
  pub fn qt_core_c_QProcessEnvironment_isEmpty(this_ptr: *const ::process_environment::ProcessEnvironment) -> bool;
  pub fn qt_core_c_QProcessEnvironment_keys_to_output(this_ptr: *const ::process_environment::ProcessEnvironment, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QProcessEnvironment_operator_assign(this_ptr: *mut ::process_environment::ProcessEnvironment, other: *const ::process_environment::ProcessEnvironment) -> *mut ::process_environment::ProcessEnvironment;
  pub fn qt_core_c_QProcessEnvironment_operator_eq(this_ptr: *const ::process_environment::ProcessEnvironment, other: *const ::process_environment::ProcessEnvironment) -> bool;
  pub fn qt_core_c_QProcessEnvironment_operator_neq(this_ptr: *const ::process_environment::ProcessEnvironment, other: *const ::process_environment::ProcessEnvironment) -> bool;
  pub fn qt_core_c_QProcessEnvironment_remove(this_ptr: *mut ::process_environment::ProcessEnvironment, name: *const ::string::String);
  pub fn qt_core_c_QProcessEnvironment_swap(this_ptr: *mut ::process_environment::ProcessEnvironment, other: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_systemEnvironment_to_output(output: *mut ::process_environment::ProcessEnvironment);
  pub fn qt_core_c_QProcessEnvironment_toStringList_to_output(this_ptr: *const ::process_environment::ProcessEnvironment, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QProcessEnvironment_value_to_output_name(this_ptr: *const ::process_environment::ProcessEnvironment, name: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QProcessEnvironment_value_to_output_name_defaultValue(this_ptr: *const ::process_environment::ProcessEnvironment, name: *const ::string::String, defaultValue: *const ::string::String, output: *mut ::string::String);

  // Header: QPropertyAnimation
  pub fn qt_core_c_QPropertyAnimation_G_dynamic_cast_QPropertyAnimation_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_dynamic_cast_QPropertyAnimation_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_dynamic_cast_QPropertyAnimation_ptr_QVariantAnimation(ptr: *mut ::variant_animation::VariantAnimation) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::property_animation::PropertyAnimation) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_static_cast_QObject_ptr(ptr: *mut ::property_animation::PropertyAnimation) -> *mut ::object::Object;
  pub fn qt_core_c_QPropertyAnimation_G_static_cast_QPropertyAnimation_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_static_cast_QPropertyAnimation_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_static_cast_QPropertyAnimation_ptr_QVariantAnimation(ptr: *mut ::variant_animation::VariantAnimation) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_G_static_cast_QVariantAnimation_ptr(ptr: *mut ::property_animation::PropertyAnimation) -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QPropertyAnimation_delete(this_ptr: *mut ::property_animation::PropertyAnimation);
  pub fn qt_core_c_QPropertyAnimation_metaObject(this_ptr: *const ::property_animation::PropertyAnimation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QPropertyAnimation_new_no_args() -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_new_parent(parent: *mut ::object::Object) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_new_target_propertyName(target: *mut ::object::Object, propertyName: *const ::byte_array::ByteArray) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_new_target_propertyName_parent(target: *mut ::object::Object, propertyName: *const ::byte_array::ByteArray, parent: *mut ::object::Object) -> *mut ::property_animation::PropertyAnimation;
  pub fn qt_core_c_QPropertyAnimation_propertyName_to_output(this_ptr: *const ::property_animation::PropertyAnimation, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QPropertyAnimation_setPropertyName(this_ptr: *mut ::property_animation::PropertyAnimation, propertyName: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QPropertyAnimation_setTargetObject(this_ptr: *mut ::property_animation::PropertyAnimation, target: *mut ::object::Object);
  pub fn qt_core_c_QPropertyAnimation_targetObject(this_ptr: *const ::property_animation::PropertyAnimation) -> *mut ::object::Object;
  pub fn qt_core_c_QPropertyAnimation_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QPropertyAnimation_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QReadLocker
  pub fn qt_core_c_QReadLocker_constructor(readWriteLock: *mut ::read_write_lock::ReadWriteLock, output: *mut ::read_locker::ReadLocker);
  pub fn qt_core_c_QReadLocker_destructor(this_ptr: *mut ::read_locker::ReadLocker);
  pub fn qt_core_c_QReadLocker_readWriteLock(this_ptr: *const ::read_locker::ReadLocker) -> *mut ::read_write_lock::ReadWriteLock;
  pub fn qt_core_c_QReadLocker_relock(this_ptr: *mut ::read_locker::ReadLocker);
  pub fn qt_core_c_QReadLocker_unlock(this_ptr: *mut ::read_locker::ReadLocker);

  // Header: QReadWriteLock
  pub fn qt_core_c_QReadWriteLock_delete(this_ptr: *mut ::read_write_lock::ReadWriteLock);
  pub fn qt_core_c_QReadWriteLock_lockForRead(this_ptr: *mut ::read_write_lock::ReadWriteLock);
  pub fn qt_core_c_QReadWriteLock_lockForWrite(this_ptr: *mut ::read_write_lock::ReadWriteLock);
  pub fn qt_core_c_QReadWriteLock_new_no_args() -> *mut ::read_write_lock::ReadWriteLock;
  pub fn qt_core_c_QReadWriteLock_new_recursionMode(recursionMode: ::read_write_lock::RecursionMode) -> *mut ::read_write_lock::ReadWriteLock;
  pub fn qt_core_c_QReadWriteLock_tryLockForRead_no_args(this_ptr: *mut ::read_write_lock::ReadWriteLock) -> bool;
  pub fn qt_core_c_QReadWriteLock_tryLockForRead_timeout(this_ptr: *mut ::read_write_lock::ReadWriteLock, timeout: ::libc::c_int) -> bool;
  pub fn qt_core_c_QReadWriteLock_tryLockForWrite_no_args(this_ptr: *mut ::read_write_lock::ReadWriteLock) -> bool;
  pub fn qt_core_c_QReadWriteLock_tryLockForWrite_timeout(this_ptr: *mut ::read_write_lock::ReadWriteLock, timeout: ::libc::c_int) -> bool;
  pub fn qt_core_c_QReadWriteLock_unlock(this_ptr: *mut ::read_write_lock::ReadWriteLock);

  // Header: QRect
  pub fn qt_core_c_QRect_G_operator_add_to_output_QMarginsF_QRectF(lhs: *const ::margins_f::MarginsF, rhs: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRect_G_operator_add_to_output_QMargins_QRect(margins: *const ::margins::Margins, rectangle: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_G_operator_add_to_output_QRectF_QMarginsF(lhs: *const ::rect_f::RectF, rhs: *const ::margins_f::MarginsF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRect_G_operator_add_to_output_QRect_QMargins(rectangle: *const ::rect::Rect, margins: *const ::margins::Margins, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_G_operator_shl_QDataStream_QRect(arg1: *mut ::data_stream::DataStream, arg2: *const ::rect::Rect) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRect_G_operator_shl_QDataStream_QRectF(arg1: *mut ::data_stream::DataStream, arg2: *const ::rect_f::RectF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRect_G_operator_shl_to_output_QDebug_QRect(arg1: *const ::debug::Debug, arg2: *const ::rect::Rect, output: *mut ::debug::Debug);
  pub fn qt_core_c_QRect_G_operator_shl_to_output_QDebug_QRectF(arg1: *const ::debug::Debug, arg2: *const ::rect_f::RectF, output: *mut ::debug::Debug);
  pub fn qt_core_c_QRect_G_operator_shr_QDataStream_QRect(arg1: *mut ::data_stream::DataStream, arg2: *mut ::rect::Rect) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRect_G_operator_shr_QDataStream_QRectF(arg1: *mut ::data_stream::DataStream, arg2: *mut ::rect_f::RectF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRect_G_operator_sub_to_output_QRectF_QMarginsF(lhs: *const ::rect_f::RectF, rhs: *const ::margins_f::MarginsF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRect_G_operator_sub_to_output_QRect_QMargins(lhs: *const ::rect::Rect, rhs: *const ::margins::Margins, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_adjust(this_ptr: *mut ::rect::Rect, x1: ::libc::c_int, y1: ::libc::c_int, x2: ::libc::c_int, y2: ::libc::c_int);
  pub fn qt_core_c_QRect_adjusted_to_output(this_ptr: *const ::rect::Rect, x1: ::libc::c_int, y1: ::libc::c_int, x2: ::libc::c_int, y2: ::libc::c_int, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_bottom(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_bottomLeft_to_output(this_ptr: *const ::rect::Rect, output: *mut ::point::Point);
  pub fn qt_core_c_QRect_bottomRight_to_output(this_ptr: *const ::rect::Rect, output: *mut ::point::Point);
  pub fn qt_core_c_QRect_center_to_output(this_ptr: *const ::rect::Rect, output: *mut ::point::Point);
  pub fn qt_core_c_QRect_constructor_left_top_width_height(left: ::libc::c_int, top: ::libc::c_int, width: ::libc::c_int, height: ::libc::c_int, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_constructor_no_args(output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_constructor_topleft_bottomright(topleft: *const ::point::Point, bottomright: *const ::point::Point, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_constructor_topleft_size(topleft: *const ::point::Point, size: *const ::size::Size, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_contains_p(this_ptr: *const ::rect::Rect, p: *const ::point::Point) -> bool;
  pub fn qt_core_c_QRect_contains_p_proper(this_ptr: *const ::rect::Rect, p: *const ::point::Point, proper: bool) -> bool;
  pub fn qt_core_c_QRect_contains_r(this_ptr: *const ::rect::Rect, r: *const ::rect::Rect) -> bool;
  pub fn qt_core_c_QRect_contains_r_proper(this_ptr: *const ::rect::Rect, r: *const ::rect::Rect, proper: bool) -> bool;
  pub fn qt_core_c_QRect_contains_x_y(this_ptr: *const ::rect::Rect, x: ::libc::c_int, y: ::libc::c_int) -> bool;
  pub fn qt_core_c_QRect_contains_x_y_proper(this_ptr: *const ::rect::Rect, x: ::libc::c_int, y: ::libc::c_int, proper: bool) -> bool;
  pub fn qt_core_c_QRect_destructor(this_ptr: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_getCoords(this_ptr: *const ::rect::Rect, x1: *mut ::libc::c_int, y1: *mut ::libc::c_int, x2: *mut ::libc::c_int, y2: *mut ::libc::c_int);
  pub fn qt_core_c_QRect_getRect(this_ptr: *const ::rect::Rect, x: *mut ::libc::c_int, y: *mut ::libc::c_int, w: *mut ::libc::c_int, h: *mut ::libc::c_int);
  pub fn qt_core_c_QRect_height(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_intersected_to_output(this_ptr: *const ::rect::Rect, other: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_intersects(this_ptr: *const ::rect::Rect, r: *const ::rect::Rect) -> bool;
  pub fn qt_core_c_QRect_isEmpty(this_ptr: *const ::rect::Rect) -> bool;
  pub fn qt_core_c_QRect_isNull(this_ptr: *const ::rect::Rect) -> bool;
  pub fn qt_core_c_QRect_isValid(this_ptr: *const ::rect::Rect) -> bool;
  pub fn qt_core_c_QRect_left(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_marginsAdded_to_output(this_ptr: *const ::rect::Rect, margins: *const ::margins::Margins, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_marginsRemoved_to_output(this_ptr: *const ::rect::Rect, margins: *const ::margins::Margins, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_moveBottom(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_moveBottomLeft(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_moveBottomRight(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_moveCenter(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_moveLeft(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_moveRight(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_moveTo_p(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_moveTo_x_t(this_ptr: *mut ::rect::Rect, x: ::libc::c_int, t: ::libc::c_int);
  pub fn qt_core_c_QRect_moveTop(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_moveTopLeft(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_moveTopRight(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_normalized_to_output(this_ptr: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_operator_add_assign(this_ptr: *mut ::rect::Rect, margins: *const ::margins::Margins) -> *mut ::rect::Rect;
  pub fn qt_core_c_QRect_operator_bit_and_assign(this_ptr: *mut ::rect::Rect, r: *const ::rect::Rect) -> *mut ::rect::Rect;
  pub fn qt_core_c_QRect_operator_bit_and_to_output(this_ptr: *const ::rect::Rect, r: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_operator_bit_or_assign(this_ptr: *mut ::rect::Rect, r: *const ::rect::Rect) -> *mut ::rect::Rect;
  pub fn qt_core_c_QRect_operator_bit_or_to_output(this_ptr: *const ::rect::Rect, r: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_operator_sub_assign(this_ptr: *mut ::rect::Rect, margins: *const ::margins::Margins) -> *mut ::rect::Rect;
  pub fn qt_core_c_QRect_right(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_setBottom(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_setBottomLeft(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_setBottomRight(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_setCoords(this_ptr: *mut ::rect::Rect, x1: ::libc::c_int, y1: ::libc::c_int, x2: ::libc::c_int, y2: ::libc::c_int);
  pub fn qt_core_c_QRect_setHeight(this_ptr: *mut ::rect::Rect, h: ::libc::c_int);
  pub fn qt_core_c_QRect_setLeft(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_setRect(this_ptr: *mut ::rect::Rect, x: ::libc::c_int, y: ::libc::c_int, w: ::libc::c_int, h: ::libc::c_int);
  pub fn qt_core_c_QRect_setRight(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_setSize(this_ptr: *mut ::rect::Rect, s: *const ::size::Size);
  pub fn qt_core_c_QRect_setTop(this_ptr: *mut ::rect::Rect, pos: ::libc::c_int);
  pub fn qt_core_c_QRect_setTopLeft(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_setTopRight(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_setWidth(this_ptr: *mut ::rect::Rect, w: ::libc::c_int);
  pub fn qt_core_c_QRect_setX(this_ptr: *mut ::rect::Rect, x: ::libc::c_int);
  pub fn qt_core_c_QRect_setY(this_ptr: *mut ::rect::Rect, y: ::libc::c_int);
  pub fn qt_core_c_QRect_size_to_output(this_ptr: *const ::rect::Rect, output: *mut ::size::Size);
  pub fn qt_core_c_QRect_top(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_topLeft_to_output(this_ptr: *const ::rect::Rect, output: *mut ::point::Point);
  pub fn qt_core_c_QRect_topRight_to_output(this_ptr: *const ::rect::Rect, output: *mut ::point::Point);
  pub fn qt_core_c_QRect_translate_dx_dy(this_ptr: *mut ::rect::Rect, dx: ::libc::c_int, dy: ::libc::c_int);
  pub fn qt_core_c_QRect_translate_p(this_ptr: *mut ::rect::Rect, p: *const ::point::Point);
  pub fn qt_core_c_QRect_translated_to_output_dx_dy(this_ptr: *const ::rect::Rect, dx: ::libc::c_int, dy: ::libc::c_int, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_translated_to_output_p(this_ptr: *const ::rect::Rect, p: *const ::point::Point, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_transposed_to_output(this_ptr: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_united_to_output(this_ptr: *const ::rect::Rect, other: *const ::rect::Rect, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRect_width(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_x(this_ptr: *const ::rect::Rect) -> ::libc::c_int;
  pub fn qt_core_c_QRect_y(this_ptr: *const ::rect::Rect) -> ::libc::c_int;

  // Header: QRectF
  pub fn qt_core_c_QRectF_adjust(this_ptr: *mut ::rect_f::RectF, x1: ::libc::c_double, y1: ::libc::c_double, x2: ::libc::c_double, y2: ::libc::c_double);
  pub fn qt_core_c_QRectF_adjusted_to_output(this_ptr: *const ::rect_f::RectF, x1: ::libc::c_double, y1: ::libc::c_double, x2: ::libc::c_double, y2: ::libc::c_double, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_bottom(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_bottomLeft_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QRectF_bottomRight_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QRectF_center_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QRectF_constructor_left_top_width_height(left: ::libc::c_double, top: ::libc::c_double, width: ::libc::c_double, height: ::libc::c_double, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_constructor_no_args(output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_constructor_rect(rect: *const ::rect::Rect, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_constructor_topleft_bottomRight(topleft: *const ::point_f::PointF, bottomRight: *const ::point_f::PointF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_constructor_topleft_size(topleft: *const ::point_f::PointF, size: *const ::size_f::SizeF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_contains_p(this_ptr: *const ::rect_f::RectF, p: *const ::point_f::PointF) -> bool;
  pub fn qt_core_c_QRectF_contains_r(this_ptr: *const ::rect_f::RectF, r: *const ::rect_f::RectF) -> bool;
  pub fn qt_core_c_QRectF_contains_x_y(this_ptr: *const ::rect_f::RectF, x: ::libc::c_double, y: ::libc::c_double) -> bool;
  pub fn qt_core_c_QRectF_destructor(this_ptr: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_getCoords(this_ptr: *const ::rect_f::RectF, x1: *mut ::libc::c_double, y1: *mut ::libc::c_double, x2: *mut ::libc::c_double, y2: *mut ::libc::c_double);
  pub fn qt_core_c_QRectF_getRect(this_ptr: *const ::rect_f::RectF, x: *mut ::libc::c_double, y: *mut ::libc::c_double, w: *mut ::libc::c_double, h: *mut ::libc::c_double);
  pub fn qt_core_c_QRectF_height(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_intersected_to_output(this_ptr: *const ::rect_f::RectF, other: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_intersects(this_ptr: *const ::rect_f::RectF, r: *const ::rect_f::RectF) -> bool;
  pub fn qt_core_c_QRectF_isEmpty(this_ptr: *const ::rect_f::RectF) -> bool;
  pub fn qt_core_c_QRectF_isNull(this_ptr: *const ::rect_f::RectF) -> bool;
  pub fn qt_core_c_QRectF_isValid(this_ptr: *const ::rect_f::RectF) -> bool;
  pub fn qt_core_c_QRectF_left(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_marginsAdded_to_output(this_ptr: *const ::rect_f::RectF, margins: *const ::margins_f::MarginsF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_marginsRemoved_to_output(this_ptr: *const ::rect_f::RectF, margins: *const ::margins_f::MarginsF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_moveBottom(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_moveBottomLeft(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_moveBottomRight(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_moveCenter(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_moveLeft(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_moveRight(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_moveTo_p(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_moveTo_x_y(this_ptr: *mut ::rect_f::RectF, x: ::libc::c_double, y: ::libc::c_double);
  pub fn qt_core_c_QRectF_moveTop(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_moveTopLeft(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_moveTopRight(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_normalized_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_operator_add_assign(this_ptr: *mut ::rect_f::RectF, margins: *const ::margins_f::MarginsF) -> *mut ::rect_f::RectF;
  pub fn qt_core_c_QRectF_operator_bit_and_assign(this_ptr: *mut ::rect_f::RectF, r: *const ::rect_f::RectF) -> *mut ::rect_f::RectF;
  pub fn qt_core_c_QRectF_operator_bit_and_to_output(this_ptr: *const ::rect_f::RectF, r: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_operator_bit_or_assign(this_ptr: *mut ::rect_f::RectF, r: *const ::rect_f::RectF) -> *mut ::rect_f::RectF;
  pub fn qt_core_c_QRectF_operator_bit_or_to_output(this_ptr: *const ::rect_f::RectF, r: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_operator_sub_assign(this_ptr: *mut ::rect_f::RectF, margins: *const ::margins_f::MarginsF) -> *mut ::rect_f::RectF;
  pub fn qt_core_c_QRectF_right(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_setBottom(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_setBottomLeft(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_setBottomRight(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_setCoords(this_ptr: *mut ::rect_f::RectF, x1: ::libc::c_double, y1: ::libc::c_double, x2: ::libc::c_double, y2: ::libc::c_double);
  pub fn qt_core_c_QRectF_setHeight(this_ptr: *mut ::rect_f::RectF, h: ::libc::c_double);
  pub fn qt_core_c_QRectF_setLeft(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_setRect(this_ptr: *mut ::rect_f::RectF, x: ::libc::c_double, y: ::libc::c_double, w: ::libc::c_double, h: ::libc::c_double);
  pub fn qt_core_c_QRectF_setRight(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_setSize(this_ptr: *mut ::rect_f::RectF, s: *const ::size_f::SizeF);
  pub fn qt_core_c_QRectF_setTop(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_setTopLeft(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_setTopRight(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_setWidth(this_ptr: *mut ::rect_f::RectF, w: ::libc::c_double);
  pub fn qt_core_c_QRectF_setX(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_setY(this_ptr: *mut ::rect_f::RectF, pos: ::libc::c_double);
  pub fn qt_core_c_QRectF_size_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QRectF_toAlignedRect_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRectF_toRect_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::rect::Rect);
  pub fn qt_core_c_QRectF_top(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_topLeft_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QRectF_topRight_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QRectF_translate_dx_dy(this_ptr: *mut ::rect_f::RectF, dx: ::libc::c_double, dy: ::libc::c_double);
  pub fn qt_core_c_QRectF_translate_p(this_ptr: *mut ::rect_f::RectF, p: *const ::point_f::PointF);
  pub fn qt_core_c_QRectF_translated_to_output_dx_dy(this_ptr: *const ::rect_f::RectF, dx: ::libc::c_double, dy: ::libc::c_double, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_translated_to_output_p(this_ptr: *const ::rect_f::RectF, p: *const ::point_f::PointF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_transposed_to_output(this_ptr: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_united_to_output(this_ptr: *const ::rect_f::RectF, other: *const ::rect_f::RectF, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QRectF_width(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_x(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;
  pub fn qt_core_c_QRectF_y(this_ptr: *const ::rect_f::RectF) -> ::libc::c_double;

  // Header: QRegExp
  pub fn qt_core_c_QRegExp_G_operator_shl(out: *mut ::data_stream::DataStream, regExp: *const ::reg_exp::RegExp) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRegExp_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::reg_exp::RegExp, output: *mut ::debug::Debug);
  pub fn qt_core_c_QRegExp_G_operator_shr(in_: *mut ::data_stream::DataStream, regExp: *mut ::reg_exp::RegExp) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRegExp_G_qHash_key(key: *const ::reg_exp::RegExp) -> ::libc::c_uint;
  pub fn qt_core_c_QRegExp_G_qHash_key_seed(key: *const ::reg_exp::RegExp, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QRegExp_cap_to_output_const_no_args(this_ptr: *const ::reg_exp::RegExp, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_cap_to_output_const_nth(this_ptr: *const ::reg_exp::RegExp, nth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_cap_to_output_no_args(this_ptr: *mut ::reg_exp::RegExp, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_cap_to_output_nth(this_ptr: *mut ::reg_exp::RegExp, nth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_captureCount(this_ptr: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_capturedTexts_to_output(this_ptr: *mut ::reg_exp::RegExp, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QRegExp_capturedTexts_to_output_const(this_ptr: *const ::reg_exp::RegExp, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QRegExp_constructor_no_args(output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QRegExp_constructor_pattern(pattern: *const ::string::String, output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QRegExp_constructor_pattern_cs(pattern: *const ::string::String, cs: *const ::qt::CaseSensitivity, output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QRegExp_constructor_pattern_cs_syntax(pattern: *const ::string::String, cs: *const ::qt::CaseSensitivity, syntax: ::reg_exp::PatternSyntax, output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QRegExp_constructor_rx(rx: *const ::reg_exp::RegExp, output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QRegExp_destructor(this_ptr: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QRegExp_errorString_to_output(this_ptr: *mut ::reg_exp::RegExp, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_errorString_to_output_const(this_ptr: *const ::reg_exp::RegExp, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_escape_to_output(str: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_exactMatch(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String) -> bool;
  pub fn qt_core_c_QRegExp_indexIn_str(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_indexIn_str_offset(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String, offset: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_indexIn_str_offset_caretMode(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String, offset: ::libc::c_int, caretMode: ::reg_exp::CaretMode) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_isEmpty(this_ptr: *const ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QRegExp_isMinimal(this_ptr: *const ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QRegExp_isValid(this_ptr: *const ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QRegExp_lastIndexIn_str(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_lastIndexIn_str_offset(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String, offset: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_lastIndexIn_str_offset_caretMode(this_ptr: *const ::reg_exp::RegExp, str: *const ::string::String, offset: ::libc::c_int, caretMode: ::reg_exp::CaretMode) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_matchedLength(this_ptr: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_operator_assign(this_ptr: *mut ::reg_exp::RegExp, rx: *const ::reg_exp::RegExp) -> *mut ::reg_exp::RegExp;
  pub fn qt_core_c_QRegExp_operator_eq(this_ptr: *const ::reg_exp::RegExp, rx: *const ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QRegExp_operator_neq(this_ptr: *const ::reg_exp::RegExp, rx: *const ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QRegExp_patternSyntax(this_ptr: *const ::reg_exp::RegExp) -> ::reg_exp::PatternSyntax;
  pub fn qt_core_c_QRegExp_pattern_to_output(this_ptr: *const ::reg_exp::RegExp, output: *mut ::string::String);
  pub fn qt_core_c_QRegExp_pos_const_no_args(this_ptr: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_pos_const_nth(this_ptr: *const ::reg_exp::RegExp, nth: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_pos_no_args(this_ptr: *mut ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_pos_nth(this_ptr: *mut ::reg_exp::RegExp, nth: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegExp_setCaseSensitivity(this_ptr: *mut ::reg_exp::RegExp, cs: *const ::qt::CaseSensitivity);
  pub fn qt_core_c_QRegExp_setMinimal(this_ptr: *mut ::reg_exp::RegExp, minimal: bool);
  pub fn qt_core_c_QRegExp_setPattern(this_ptr: *mut ::reg_exp::RegExp, pattern: *const ::string::String);
  pub fn qt_core_c_QRegExp_setPatternSyntax(this_ptr: *mut ::reg_exp::RegExp, syntax: ::reg_exp::PatternSyntax);
  pub fn qt_core_c_QRegExp_swap(this_ptr: *mut ::reg_exp::RegExp, other: *mut ::reg_exp::RegExp);

  // Header: QRegularExpression
  pub fn qt_core_c_QRegularExpression_G_operator_shl(out: *mut ::data_stream::DataStream, re: *const ::regular_expression::RegularExpression) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRegularExpression_G_operator_shl_to_output_debug_match(debug: *const ::debug::Debug, match_: *const ::regular_expression_match::RegularExpressionMatch, output: *mut ::debug::Debug);
  pub fn qt_core_c_QRegularExpression_G_operator_shl_to_output_debug_re(debug: *const ::debug::Debug, re: *const ::regular_expression::RegularExpression, output: *mut ::debug::Debug);
  pub fn qt_core_c_QRegularExpression_G_operator_shr(in_: *mut ::data_stream::DataStream, re: *mut ::regular_expression::RegularExpression) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QRegularExpression_G_qHash_key(key: *const ::regular_expression::RegularExpression) -> ::libc::c_uint;
  pub fn qt_core_c_QRegularExpression_G_qHash_key_seed(key: *const ::regular_expression::RegularExpression, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QRegularExpression_G_swap_QRegularExpressionMatchIterator_QRegularExpressionMatchIterator(value1: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator, value2: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_G_swap_QRegularExpressionMatch_QRegularExpressionMatch(value1: *mut ::regular_expression_match::RegularExpressionMatch, value2: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_G_swap_QRegularExpression_QRegularExpression(value1: *mut ::regular_expression::RegularExpression, value2: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_captureCount(this_ptr: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpression_constructor_no_args(output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_constructor_pattern(pattern: *const ::string::String, output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_constructor_pattern_options(pattern: *const ::string::String, options: ::libc::c_uint, output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_constructor_re(re: *const ::regular_expression::RegularExpression, output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_destructor(this_ptr: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_errorString_to_output(this_ptr: *const ::regular_expression::RegularExpression, output: *mut ::string::String);
  pub fn qt_core_c_QRegularExpression_escape_to_output(str: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subject(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subjectRef(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subjectRef_offset(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, offset: ::libc::c_int, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subjectRef_offset_matchType(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subjectRef_offset_matchType_matchOptions(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, matchOptions: ::libc::c_uint, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subject_offset(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, offset: ::libc::c_int, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subject_offset_matchType(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_globalMatch_to_output_subject_offset_matchType_matchOptions(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, matchOptions: ::libc::c_uint, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpression_isValid(this_ptr: *const ::regular_expression::RegularExpression) -> bool;
  pub fn qt_core_c_QRegularExpression_match_to_output_subject(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subjectRef(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subjectRef_offset(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, offset: ::libc::c_int, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subjectRef_offset_matchType(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subjectRef_offset_matchType_matchOptions(this_ptr: *const ::regular_expression::RegularExpression, subjectRef: *const ::string_ref::StringRef, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, matchOptions: ::libc::c_uint, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subject_offset(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, offset: ::libc::c_int, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subject_offset_matchType(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_match_to_output_subject_offset_matchType_matchOptions(this_ptr: *const ::regular_expression::RegularExpression, subject: *const ::string::String, offset: ::libc::c_int, matchType: ::regular_expression::MatchType, matchOptions: ::libc::c_uint, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpression_namedCaptureGroups_to_output(this_ptr: *const ::regular_expression::RegularExpression, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QRegularExpression_operator_assign(this_ptr: *mut ::regular_expression::RegularExpression, re: *const ::regular_expression::RegularExpression) -> *mut ::regular_expression::RegularExpression;
  pub fn qt_core_c_QRegularExpression_operator_eq(this_ptr: *const ::regular_expression::RegularExpression, re: *const ::regular_expression::RegularExpression) -> bool;
  pub fn qt_core_c_QRegularExpression_operator_neq(this_ptr: *const ::regular_expression::RegularExpression, re: *const ::regular_expression::RegularExpression) -> bool;
  pub fn qt_core_c_QRegularExpression_optimize(this_ptr: *const ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpression_patternErrorOffset(this_ptr: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpression_patternOptions(this_ptr: *const ::regular_expression::RegularExpression) -> ::libc::c_uint;
  pub fn qt_core_c_QRegularExpression_pattern_to_output(this_ptr: *const ::regular_expression::RegularExpression, output: *mut ::string::String);
  pub fn qt_core_c_QRegularExpression_setPattern(this_ptr: *mut ::regular_expression::RegularExpression, pattern: *const ::string::String);
  pub fn qt_core_c_QRegularExpression_setPatternOptions(this_ptr: *mut ::regular_expression::RegularExpression, options: ::libc::c_uint);
  pub fn qt_core_c_QRegularExpression_swap(this_ptr: *mut ::regular_expression::RegularExpression, other: *mut ::regular_expression::RegularExpression);

  // Header: QRegularExpressionMatch
  pub fn qt_core_c_QRegularExpressionMatch_capturedEnd_name(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, name: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedEnd_no_args(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedEnd_nth(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, nth: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedLength_name(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, name: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedLength_no_args(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedLength_nth(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, nth: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedRef_to_output_name(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, name: *const ::string::String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QRegularExpressionMatch_capturedRef_to_output_no_args(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QRegularExpressionMatch_capturedRef_to_output_nth(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, nth: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QRegularExpressionMatch_capturedStart_name(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, name: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedStart_no_args(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedStart_nth(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, nth: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_capturedTexts_to_output(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QRegularExpressionMatch_captured_to_output_name(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, name: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QRegularExpressionMatch_captured_to_output_no_args(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, output: *mut ::string::String);
  pub fn qt_core_c_QRegularExpressionMatch_captured_to_output_nth(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, nth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QRegularExpressionMatch_constructor_match(match_: *const ::regular_expression_match::RegularExpressionMatch, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpressionMatch_constructor_no_args(output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpressionMatch_destructor(this_ptr: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpressionMatch_hasMatch(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> bool;
  pub fn qt_core_c_QRegularExpressionMatch_hasPartialMatch(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> bool;
  pub fn qt_core_c_QRegularExpressionMatch_isValid(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> bool;
  pub fn qt_core_c_QRegularExpressionMatch_lastCapturedIndex(this_ptr: *const ::regular_expression_match::RegularExpressionMatch) -> ::libc::c_int;
  pub fn qt_core_c_QRegularExpressionMatch_operator_assign(this_ptr: *mut ::regular_expression_match::RegularExpressionMatch, match_: *const ::regular_expression_match::RegularExpressionMatch) -> *mut ::regular_expression_match::RegularExpressionMatch;
  pub fn qt_core_c_QRegularExpressionMatch_regularExpression_to_output(this_ptr: *const ::regular_expression_match::RegularExpressionMatch, output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpressionMatch_swap(this_ptr: *mut ::regular_expression_match::RegularExpressionMatch, other: *mut ::regular_expression_match::RegularExpressionMatch);

  // Header: QRegularExpressionMatchIterator
  pub fn qt_core_c_QRegularExpressionMatchIterator_constructor_iterator(iterator: *const ::regular_expression_match_iterator::RegularExpressionMatchIterator, output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpressionMatchIterator_constructor_no_args(output: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpressionMatchIterator_destructor(this_ptr: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);
  pub fn qt_core_c_QRegularExpressionMatchIterator_hasNext(this_ptr: *const ::regular_expression_match_iterator::RegularExpressionMatchIterator) -> bool;
  pub fn qt_core_c_QRegularExpressionMatchIterator_isValid(this_ptr: *const ::regular_expression_match_iterator::RegularExpressionMatchIterator) -> bool;
  pub fn qt_core_c_QRegularExpressionMatchIterator_next_to_output(this_ptr: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpressionMatchIterator_operator_assign(this_ptr: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator, iterator: *const ::regular_expression_match_iterator::RegularExpressionMatchIterator) -> *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator;
  pub fn qt_core_c_QRegularExpressionMatchIterator_peekNext_to_output(this_ptr: *const ::regular_expression_match_iterator::RegularExpressionMatchIterator, output: *mut ::regular_expression_match::RegularExpressionMatch);
  pub fn qt_core_c_QRegularExpressionMatchIterator_regularExpression_to_output(this_ptr: *const ::regular_expression_match_iterator::RegularExpressionMatchIterator, output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QRegularExpressionMatchIterator_swap(this_ptr: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator, other: *mut ::regular_expression_match_iterator::RegularExpressionMatchIterator);

  // Header: QResource
  pub fn qt_core_c_QResource_absoluteFilePath_to_output(this_ptr: *const ::resource::Resource, output: *mut ::string::String);
  pub fn qt_core_c_QResource_addSearchPath(path: *const ::string::String);
  pub fn qt_core_c_QResource_constructor_file(file: *const ::string::String, output: *mut ::resource::Resource);
  pub fn qt_core_c_QResource_constructor_file_locale(file: *const ::string::String, locale: *const ::locale::Locale, output: *mut ::resource::Resource);
  pub fn qt_core_c_QResource_constructor_no_args(output: *mut ::resource::Resource);
  pub fn qt_core_c_QResource_data(this_ptr: *const ::resource::Resource) -> *const ::libc::c_uchar;
  pub fn qt_core_c_QResource_destructor(this_ptr: *mut ::resource::Resource);
  pub fn qt_core_c_QResource_fileName_to_output(this_ptr: *const ::resource::Resource, output: *mut ::string::String);
  pub fn qt_core_c_QResource_isCompressed(this_ptr: *const ::resource::Resource) -> bool;
  pub fn qt_core_c_QResource_isValid(this_ptr: *const ::resource::Resource) -> bool;
  pub fn qt_core_c_QResource_lastModified_to_output(this_ptr: *const ::resource::Resource, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QResource_locale_to_output(this_ptr: *const ::resource::Resource, output: *mut ::locale::Locale);
  pub fn qt_core_c_QResource_registerResource_rccData(rccData: *const ::libc::c_uchar) -> bool;
  pub fn qt_core_c_QResource_registerResource_rccData_resourceRoot(rccData: *const ::libc::c_uchar, resourceRoot: *const ::string::String) -> bool;
  pub fn qt_core_c_QResource_registerResource_rccFilename(rccFilename: *const ::string::String) -> bool;
  pub fn qt_core_c_QResource_registerResource_rccFilename_resourceRoot(rccFilename: *const ::string::String, resourceRoot: *const ::string::String) -> bool;
  pub fn qt_core_c_QResource_searchPaths_to_output(output: *mut ::string_list::StringList);
  pub fn qt_core_c_QResource_setFileName(this_ptr: *mut ::resource::Resource, file: *const ::string::String);
  pub fn qt_core_c_QResource_setLocale(this_ptr: *mut ::resource::Resource, locale: *const ::locale::Locale);
  pub fn qt_core_c_QResource_size(this_ptr: *const ::resource::Resource) -> i64;
  pub fn qt_core_c_QResource_unregisterResource_rccData(rccData: *const ::libc::c_uchar) -> bool;
  pub fn qt_core_c_QResource_unregisterResource_rccData_resourceRoot(rccData: *const ::libc::c_uchar, resourceRoot: *const ::string::String) -> bool;
  pub fn qt_core_c_QResource_unregisterResource_rccFilename(rccFilename: *const ::string::String) -> bool;
  pub fn qt_core_c_QResource_unregisterResource_rccFilename_resourceRoot(rccFilename: *const ::string::String, resourceRoot: *const ::string::String) -> bool;

  // Header: QRunnable
  pub fn qt_core_c_QRunnable_autoDelete(this_ptr: *const ::runnable::Runnable) -> bool;
  pub fn qt_core_c_QRunnable_delete(this_ptr: *mut ::runnable::Runnable);
  pub fn qt_core_c_QRunnable_run(this_ptr: *mut ::runnable::Runnable);
  pub fn qt_core_c_QRunnable_setAutoDelete(this_ptr: *mut ::runnable::Runnable, _autoDelete: bool);

  // Header: QSaveFile
  pub fn qt_core_c_QSaveFile_G_dynamic_cast_QSaveFile_ptr_QFileDevice(ptr: *mut ::file_device::FileDevice) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_G_dynamic_cast_QSaveFile_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_G_dynamic_cast_QSaveFile_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_G_static_cast_QFileDevice_ptr(ptr: *mut ::save_file::SaveFile) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QSaveFile_G_static_cast_QIODevice_ptr(ptr: *mut ::save_file::SaveFile) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QSaveFile_G_static_cast_QObject_ptr(ptr: *mut ::save_file::SaveFile) -> *mut ::object::Object;
  pub fn qt_core_c_QSaveFile_G_static_cast_QSaveFile_ptr_QFileDevice(ptr: *mut ::file_device::FileDevice) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_G_static_cast_QSaveFile_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_G_static_cast_QSaveFile_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_cancelWriting(this_ptr: *mut ::save_file::SaveFile);
  pub fn qt_core_c_QSaveFile_commit(this_ptr: *mut ::save_file::SaveFile) -> bool;
  pub fn qt_core_c_QSaveFile_delete(this_ptr: *mut ::save_file::SaveFile);
  pub fn qt_core_c_QSaveFile_directWriteFallback(this_ptr: *const ::save_file::SaveFile) -> bool;
  pub fn qt_core_c_QSaveFile_fileName_to_output(this_ptr: *const ::save_file::SaveFile, output: *mut ::string::String);
  pub fn qt_core_c_QSaveFile_metaObject(this_ptr: *const ::save_file::SaveFile) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSaveFile_new_name(name: *const ::string::String) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_new_name_parent(name: *const ::string::String, parent: *mut ::object::Object) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_new_no_args() -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_new_parent(parent: *mut ::object::Object) -> *mut ::save_file::SaveFile;
  pub fn qt_core_c_QSaveFile_open(this_ptr: *mut ::save_file::SaveFile, flags: ::libc::c_uint) -> bool;
  pub fn qt_core_c_QSaveFile_setDirectWriteFallback(this_ptr: *mut ::save_file::SaveFile, enabled: bool);
  pub fn qt_core_c_QSaveFile_setFileName(this_ptr: *mut ::save_file::SaveFile, name: *const ::string::String);
  pub fn qt_core_c_QSaveFile_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSaveFile_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QSemaphore
  pub fn qt_core_c_QSemaphore_acquire_n(this_ptr: *mut ::semaphore::Semaphore, n: ::libc::c_int);
  pub fn qt_core_c_QSemaphore_acquire_no_args(this_ptr: *mut ::semaphore::Semaphore);
  pub fn qt_core_c_QSemaphore_available(this_ptr: *const ::semaphore::Semaphore) -> ::libc::c_int;
  pub fn qt_core_c_QSemaphore_constructor_n(n: ::libc::c_int, output: *mut ::semaphore::Semaphore);
  pub fn qt_core_c_QSemaphore_constructor_no_args(output: *mut ::semaphore::Semaphore);
  pub fn qt_core_c_QSemaphore_destructor(this_ptr: *mut ::semaphore::Semaphore);
  pub fn qt_core_c_QSemaphore_release_n(this_ptr: *mut ::semaphore::Semaphore, n: ::libc::c_int);
  pub fn qt_core_c_QSemaphore_release_no_args(this_ptr: *mut ::semaphore::Semaphore);
  pub fn qt_core_c_QSemaphore_tryAcquire_n(this_ptr: *mut ::semaphore::Semaphore, n: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSemaphore_tryAcquire_n_timeout(this_ptr: *mut ::semaphore::Semaphore, n: ::libc::c_int, timeout: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSemaphore_tryAcquire_no_args(this_ptr: *mut ::semaphore::Semaphore) -> bool;

  // Header: QSequentialAnimationGroup
  pub fn qt_core_c_QSequentialAnimationGroup_G_dynamic_cast_QSequentialAnimationGroup_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_G_dynamic_cast_QSequentialAnimationGroup_ptr_QAnimationGroup(ptr: *mut ::animation_group::AnimationGroup) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_G_dynamic_cast_QSequentialAnimationGroup_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::sequential_animation_group::SequentialAnimationGroup) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QSequentialAnimationGroup_G_static_cast_QAnimationGroup_ptr(ptr: *mut ::sequential_animation_group::SequentialAnimationGroup) -> *mut ::animation_group::AnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_G_static_cast_QObject_ptr(ptr: *mut ::sequential_animation_group::SequentialAnimationGroup) -> *mut ::object::Object;
  pub fn qt_core_c_QSequentialAnimationGroup_G_static_cast_QSequentialAnimationGroup_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_G_static_cast_QSequentialAnimationGroup_ptr_QAnimationGroup(ptr: *mut ::animation_group::AnimationGroup) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_G_static_cast_QSequentialAnimationGroup_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_addPause(this_ptr: *mut ::sequential_animation_group::SequentialAnimationGroup, msecs: ::libc::c_int) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QSequentialAnimationGroup_currentAnimation(this_ptr: *const ::sequential_animation_group::SequentialAnimationGroup) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QSequentialAnimationGroup_delete(this_ptr: *mut ::sequential_animation_group::SequentialAnimationGroup);
  pub fn qt_core_c_QSequentialAnimationGroup_duration(this_ptr: *const ::sequential_animation_group::SequentialAnimationGroup) -> ::libc::c_int;
  pub fn qt_core_c_QSequentialAnimationGroup_insertPause(this_ptr: *mut ::sequential_animation_group::SequentialAnimationGroup, index: ::libc::c_int, msecs: ::libc::c_int) -> *mut ::pause_animation::PauseAnimation;
  pub fn qt_core_c_QSequentialAnimationGroup_metaObject(this_ptr: *const ::sequential_animation_group::SequentialAnimationGroup) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSequentialAnimationGroup_new_no_args() -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_new_parent(parent: *mut ::object::Object) -> *mut ::sequential_animation_group::SequentialAnimationGroup;
  pub fn qt_core_c_QSequentialAnimationGroup_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSequentialAnimationGroup_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QSequentialIterable
  pub fn qt_core_c_QSequentialIterable_at_to_output(this_ptr: *const ::sequential_iterable::SequentialIterable, idx: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSequentialIterable_begin_to_output(this_ptr: *const ::sequential_iterable::SequentialIterable, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_canReverseIterate(this_ptr: *const ::sequential_iterable::SequentialIterable) -> bool;
  pub fn qt_core_c_QSequentialIterable_const_iterator_constructor(other: *const ::sequential_iterable::ConstIterator, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_const_iterator_destructor(this_ptr: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_add_assign(this_ptr: *mut ::sequential_iterable::ConstIterator, j: ::libc::c_int) -> *mut ::sequential_iterable::ConstIterator;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_add_to_output(this_ptr: *const ::sequential_iterable::ConstIterator, j: ::libc::c_int, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_assign(this_ptr: *mut ::sequential_iterable::ConstIterator, other: *const ::sequential_iterable::ConstIterator) -> *mut ::sequential_iterable::ConstIterator;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_dec(this_ptr: *mut ::sequential_iterable::ConstIterator) -> *mut ::sequential_iterable::ConstIterator;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_dec_postfix_to_output(this_ptr: *mut ::sequential_iterable::ConstIterator, arg1: ::libc::c_int, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_eq(this_ptr: *const ::sequential_iterable::ConstIterator, o: *const ::sequential_iterable::ConstIterator) -> bool;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_inc(this_ptr: *mut ::sequential_iterable::ConstIterator) -> *mut ::sequential_iterable::ConstIterator;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_inc_postfix_to_output(this_ptr: *mut ::sequential_iterable::ConstIterator, arg1: ::libc::c_int, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_indirection_to_output(this_ptr: *const ::sequential_iterable::ConstIterator, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_neq(this_ptr: *const ::sequential_iterable::ConstIterator, o: *const ::sequential_iterable::ConstIterator) -> bool;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_sub_assign(this_ptr: *mut ::sequential_iterable::ConstIterator, j: ::libc::c_int) -> *mut ::sequential_iterable::ConstIterator;
  pub fn qt_core_c_QSequentialIterable_const_iterator_operator_sub_to_output(this_ptr: *const ::sequential_iterable::ConstIterator, j: ::libc::c_int, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_destructor(this_ptr: *mut ::sequential_iterable::SequentialIterable);
  pub fn qt_core_c_QSequentialIterable_end_to_output(this_ptr: *const ::sequential_iterable::SequentialIterable, output: *mut ::sequential_iterable::ConstIterator);
  pub fn qt_core_c_QSequentialIterable_size(this_ptr: *const ::sequential_iterable::SequentialIterable) -> ::libc::c_int;

  // Header: QSet
  pub fn qt_core_c_QSet_QAbstractState_ptr_capacity(this_ptr: *const ::set::SetAbstractStateMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QSet_QAbstractState_ptr_clear(this_ptr: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_constructor(output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_contains_set(this_ptr: *const ::set::SetAbstractStateMutPtr, set: *const ::set::SetAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_contains_value(this_ptr: *const ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_count(this_ptr: *const ::set::SetAbstractStateMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QSet_QAbstractState_ptr_destructor(this_ptr: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_empty(this_ptr: *const ::set::SetAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_fromList_to_output(list: *const ::list::ListAbstractStateMutPtr, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_intersect(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_intersects(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_isEmpty(this_ptr: *const ::set::SetAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_add_assign_other(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_add_assign_value(this_ptr: *mut ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_add_to_output(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_bit_and_assign_other(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_bit_and_assign_value(this_ptr: *mut ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_bit_and_to_output(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_bit_or_assign_other(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_bit_or_assign_value(this_ptr: *mut ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_bit_or_to_output(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_eq(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_neq(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_shl(this_ptr: *mut ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_sub_assign_other(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_sub_assign_value(this_ptr: *mut ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_operator_sub_to_output(this_ptr: *const ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_remove(this_ptr: *mut ::set::SetAbstractStateMutPtr, value: *const *mut ::abstract_state::AbstractState) -> bool;
  pub fn qt_core_c_QSet_QAbstractState_ptr_reserve(this_ptr: *mut ::set::SetAbstractStateMutPtr, size: ::libc::c_int);
  pub fn qt_core_c_QSet_QAbstractState_ptr_size(this_ptr: *const ::set::SetAbstractStateMutPtr) -> ::libc::c_int;
  pub fn qt_core_c_QSet_QAbstractState_ptr_squeeze(this_ptr: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_subtract(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_swap(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_toList_to_output(this_ptr: *const ::set::SetAbstractStateMutPtr, output: *mut ::list::ListAbstractStateMutPtr);
  pub fn qt_core_c_QSet_QAbstractState_ptr_unite(this_ptr: *mut ::set::SetAbstractStateMutPtr, other: *const ::set::SetAbstractStateMutPtr) -> *mut ::set::SetAbstractStateMutPtr;
  pub fn qt_core_c_QSet_QAbstractState_ptr_values_to_output(this_ptr: *const ::set::SetAbstractStateMutPtr, output: *mut ::list::ListAbstractStateMutPtr);

  // Header: QSettings
  pub fn qt_core_c_QSettings_G_dynamic_cast_QSettings_ptr(ptr: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_G_static_cast_QObject_ptr(ptr: *mut ::settings::Settings) -> *mut ::object::Object;
  pub fn qt_core_c_QSettings_G_static_cast_QSettings_ptr(ptr: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_allKeys_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QSettings_applicationName_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string::String);
  pub fn qt_core_c_QSettings_beginGroup(this_ptr: *mut ::settings::Settings, prefix: *const ::string::String);
  pub fn qt_core_c_QSettings_beginReadArray(this_ptr: *mut ::settings::Settings, prefix: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QSettings_beginWriteArray_prefix(this_ptr: *mut ::settings::Settings, prefix: *const ::string::String);
  pub fn qt_core_c_QSettings_beginWriteArray_prefix_size(this_ptr: *mut ::settings::Settings, prefix: *const ::string::String, size: ::libc::c_int);
  pub fn qt_core_c_QSettings_childGroups_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QSettings_childKeys_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QSettings_clear(this_ptr: *mut ::settings::Settings);
  pub fn qt_core_c_QSettings_contains(this_ptr: *const ::settings::Settings, key: *const ::string::String) -> bool;
  pub fn qt_core_c_QSettings_defaultFormat() -> ::settings::Format;
  pub fn qt_core_c_QSettings_delete(this_ptr: *mut ::settings::Settings);
  pub fn qt_core_c_QSettings_endArray(this_ptr: *mut ::settings::Settings);
  pub fn qt_core_c_QSettings_endGroup(this_ptr: *mut ::settings::Settings);
  pub fn qt_core_c_QSettings_fallbacksEnabled(this_ptr: *const ::settings::Settings) -> bool;
  pub fn qt_core_c_QSettings_fileName_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string::String);
  pub fn qt_core_c_QSettings_format(this_ptr: *const ::settings::Settings) -> ::settings::Format;
  pub fn qt_core_c_QSettings_group_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string::String);
  pub fn qt_core_c_QSettings_iniCodec(this_ptr: *const ::settings::Settings) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QSettings_isWritable(this_ptr: *const ::settings::Settings) -> bool;
  pub fn qt_core_c_QSettings_metaObject(this_ptr: *const ::settings::Settings) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSettings_new_fileName_format(fileName: *const ::string::String, format: ::settings::Format) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_fileName_format_parent(fileName: *const ::string::String, format: ::settings::Format, parent: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_format_scope_organization(format: ::settings::Format, scope: ::settings::Scope, organization: *const ::string::String) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_format_scope_organization_application(format: ::settings::Format, scope: ::settings::Scope, organization: *const ::string::String, application: *const ::string::String) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_format_scope_organization_application_parent(format: ::settings::Format, scope: ::settings::Scope, organization: *const ::string::String, application: *const ::string::String, parent: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_no_args() -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_organization(organization: *const ::string::String) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_organization_application(organization: *const ::string::String, application: *const ::string::String) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_organization_application_parent(organization: *const ::string::String, application: *const ::string::String, parent: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_parent(parent: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_scope_organization(scope: ::settings::Scope, organization: *const ::string::String) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_scope_organization_application(scope: ::settings::Scope, organization: *const ::string::String, application: *const ::string::String) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_new_scope_organization_application_parent(scope: ::settings::Scope, organization: *const ::string::String, application: *const ::string::String, parent: *mut ::object::Object) -> *mut ::settings::Settings;
  pub fn qt_core_c_QSettings_organizationName_to_output(this_ptr: *const ::settings::Settings, output: *mut ::string::String);
  pub fn qt_core_c_QSettings_remove(this_ptr: *mut ::settings::Settings, key: *const ::string::String);
  pub fn qt_core_c_QSettings_scope(this_ptr: *const ::settings::Settings) -> ::settings::Scope;
  pub fn qt_core_c_QSettings_setArrayIndex(this_ptr: *mut ::settings::Settings, i: ::libc::c_int);
  pub fn qt_core_c_QSettings_setDefaultFormat(format: ::settings::Format);
  pub fn qt_core_c_QSettings_setFallbacksEnabled(this_ptr: *mut ::settings::Settings, b: bool);
  pub fn qt_core_c_QSettings_setIniCodec_codec(this_ptr: *mut ::settings::Settings, codec: *mut ::text_codec::TextCodec);
  pub fn qt_core_c_QSettings_setIniCodec_codecName(this_ptr: *mut ::settings::Settings, codecName: *const ::libc::c_char);
  pub fn qt_core_c_QSettings_setPath(format: ::settings::Format, scope: ::settings::Scope, path: *const ::string::String);
  pub fn qt_core_c_QSettings_setSystemIniPath(dir: *const ::string::String);
  pub fn qt_core_c_QSettings_setUserIniPath(dir: *const ::string::String);
  pub fn qt_core_c_QSettings_setValue(this_ptr: *mut ::settings::Settings, key: *const ::string::String, value: *const ::variant::Variant);
  pub fn qt_core_c_QSettings_status(this_ptr: *const ::settings::Settings) -> ::settings::Status;
  pub fn qt_core_c_QSettings_sync(this_ptr: *mut ::settings::Settings);
  pub fn qt_core_c_QSettings_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSettings_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSettings_value_to_output_key(this_ptr: *const ::settings::Settings, key: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSettings_value_to_output_key_defaultValue(this_ptr: *const ::settings::Settings, key: *const ::string::String, defaultValue: *const ::variant::Variant, output: *mut ::variant::Variant);

  // Header: QSharedData
  pub fn qt_core_c_QSharedData_constructor_arg1(arg1: *const ::shared_data::SharedData, output: *mut ::shared_data::SharedData);
  pub fn qt_core_c_QSharedData_constructor_no_args(output: *mut ::shared_data::SharedData);
  pub fn qt_core_c_QSharedData_destructor(this_ptr: *mut ::shared_data::SharedData);

  // Header: QSharedMemory
  pub fn qt_core_c_QSharedMemory_G_dynamic_cast_QSharedMemory_ptr(ptr: *mut ::object::Object) -> *mut ::shared_memory::SharedMemory;
  pub fn qt_core_c_QSharedMemory_G_static_cast_QObject_ptr(ptr: *mut ::shared_memory::SharedMemory) -> *mut ::object::Object;
  pub fn qt_core_c_QSharedMemory_G_static_cast_QSharedMemory_ptr(ptr: *mut ::object::Object) -> *mut ::shared_memory::SharedMemory;
  pub fn qt_core_c_QSharedMemory_attach_mode(this_ptr: *mut ::shared_memory::SharedMemory, mode: ::shared_memory::AccessMode) -> bool;
  pub fn qt_core_c_QSharedMemory_attach_no_args(this_ptr: *mut ::shared_memory::SharedMemory) -> bool;
  pub fn qt_core_c_QSharedMemory_constData(this_ptr: *const ::shared_memory::SharedMemory) -> *const ::libc::c_void;
  pub fn qt_core_c_QSharedMemory_create_size(this_ptr: *mut ::shared_memory::SharedMemory, size: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSharedMemory_create_size_mode(this_ptr: *mut ::shared_memory::SharedMemory, size: ::libc::c_int, mode: ::shared_memory::AccessMode) -> bool;
  pub fn qt_core_c_QSharedMemory_data(this_ptr: *mut ::shared_memory::SharedMemory) -> *mut ::libc::c_void;
  pub fn qt_core_c_QSharedMemory_data_const(this_ptr: *const ::shared_memory::SharedMemory) -> *const ::libc::c_void;
  pub fn qt_core_c_QSharedMemory_delete(this_ptr: *mut ::shared_memory::SharedMemory);
  pub fn qt_core_c_QSharedMemory_detach(this_ptr: *mut ::shared_memory::SharedMemory) -> bool;
  pub fn qt_core_c_QSharedMemory_error(this_ptr: *const ::shared_memory::SharedMemory) -> ::shared_memory::SharedMemoryError;
  pub fn qt_core_c_QSharedMemory_errorString_to_output(this_ptr: *const ::shared_memory::SharedMemory, output: *mut ::string::String);
  pub fn qt_core_c_QSharedMemory_isAttached(this_ptr: *const ::shared_memory::SharedMemory) -> bool;
  pub fn qt_core_c_QSharedMemory_key_to_output(this_ptr: *const ::shared_memory::SharedMemory, output: *mut ::string::String);
  pub fn qt_core_c_QSharedMemory_lock(this_ptr: *mut ::shared_memory::SharedMemory) -> bool;
  pub fn qt_core_c_QSharedMemory_metaObject(this_ptr: *const ::shared_memory::SharedMemory) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSharedMemory_nativeKey_to_output(this_ptr: *const ::shared_memory::SharedMemory, output: *mut ::string::String);
  pub fn qt_core_c_QSharedMemory_new_key(key: *const ::string::String) -> *mut ::shared_memory::SharedMemory;
  pub fn qt_core_c_QSharedMemory_new_key_parent(key: *const ::string::String, parent: *mut ::object::Object) -> *mut ::shared_memory::SharedMemory;
  pub fn qt_core_c_QSharedMemory_new_no_args() -> *mut ::shared_memory::SharedMemory;
  pub fn qt_core_c_QSharedMemory_new_parent(parent: *mut ::object::Object) -> *mut ::shared_memory::SharedMemory;
  pub fn qt_core_c_QSharedMemory_setKey(this_ptr: *mut ::shared_memory::SharedMemory, key: *const ::string::String);
  pub fn qt_core_c_QSharedMemory_setNativeKey(this_ptr: *mut ::shared_memory::SharedMemory, key: *const ::string::String);
  pub fn qt_core_c_QSharedMemory_size(this_ptr: *const ::shared_memory::SharedMemory) -> ::libc::c_int;
  pub fn qt_core_c_QSharedMemory_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSharedMemory_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSharedMemory_unlock(this_ptr: *mut ::shared_memory::SharedMemory) -> bool;

  // Header: QSignalBlocker
  pub fn qt_core_c_QSignalBlocker_constructor_QObject_ptr(o: *mut ::object::Object, output: *mut ::signal_blocker::SignalBlocker);
  pub fn qt_core_c_QSignalBlocker_constructor_QObject_ref(o: *mut ::object::Object, output: *mut ::signal_blocker::SignalBlocker);
  pub fn qt_core_c_QSignalBlocker_destructor(this_ptr: *mut ::signal_blocker::SignalBlocker);
  pub fn qt_core_c_QSignalBlocker_reblock(this_ptr: *mut ::signal_blocker::SignalBlocker);
  pub fn qt_core_c_QSignalBlocker_unblock(this_ptr: *mut ::signal_blocker::SignalBlocker);

  // Header: QSignalMapper
  pub fn qt_core_c_QSignalMapper_G_dynamic_cast_QSignalMapper_ptr(ptr: *mut ::object::Object) -> *mut ::signal_mapper::SignalMapper;
  pub fn qt_core_c_QSignalMapper_G_static_cast_QObject_ptr(ptr: *mut ::signal_mapper::SignalMapper) -> *mut ::object::Object;
  pub fn qt_core_c_QSignalMapper_G_static_cast_QSignalMapper_ptr(ptr: *mut ::object::Object) -> *mut ::signal_mapper::SignalMapper;
  pub fn qt_core_c_QSignalMapper_delete(this_ptr: *mut ::signal_mapper::SignalMapper);
  pub fn qt_core_c_QSignalMapper_map_no_args(this_ptr: *mut ::signal_mapper::SignalMapper);
  pub fn qt_core_c_QSignalMapper_map_sender(this_ptr: *mut ::signal_mapper::SignalMapper, sender: *mut ::object::Object);
  pub fn qt_core_c_QSignalMapper_mapping_id(this_ptr: *const ::signal_mapper::SignalMapper, id: ::libc::c_int) -> *mut ::object::Object;
  pub fn qt_core_c_QSignalMapper_mapping_object(this_ptr: *const ::signal_mapper::SignalMapper, object: *mut ::object::Object) -> *mut ::object::Object;
  pub fn qt_core_c_QSignalMapper_mapping_text(this_ptr: *const ::signal_mapper::SignalMapper, text: *const ::string::String) -> *mut ::object::Object;
  pub fn qt_core_c_QSignalMapper_metaObject(this_ptr: *const ::signal_mapper::SignalMapper) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSignalMapper_new_no_args() -> *mut ::signal_mapper::SignalMapper;
  pub fn qt_core_c_QSignalMapper_new_parent(parent: *mut ::object::Object) -> *mut ::signal_mapper::SignalMapper;
  pub fn qt_core_c_QSignalMapper_removeMappings(this_ptr: *mut ::signal_mapper::SignalMapper, sender: *mut ::object::Object);
  pub fn qt_core_c_QSignalMapper_setMapping_sender_id(this_ptr: *mut ::signal_mapper::SignalMapper, sender: *mut ::object::Object, id: ::libc::c_int);
  pub fn qt_core_c_QSignalMapper_setMapping_sender_object(this_ptr: *mut ::signal_mapper::SignalMapper, sender: *mut ::object::Object, object: *mut ::object::Object);
  pub fn qt_core_c_QSignalMapper_setMapping_sender_text(this_ptr: *mut ::signal_mapper::SignalMapper, sender: *mut ::object::Object, text: *const ::string::String);
  pub fn qt_core_c_QSignalMapper_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSignalMapper_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QSignalTransition
  pub fn qt_core_c_QSignalTransition_G_dynamic_cast_QSignalTransition_ptr_QAbstractTransition(ptr: *mut ::abstract_transition::AbstractTransition) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_G_dynamic_cast_QSignalTransition_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_G_static_cast_QAbstractTransition_ptr(ptr: *mut ::signal_transition::SignalTransition) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QSignalTransition_G_static_cast_QObject_ptr(ptr: *mut ::signal_transition::SignalTransition) -> *mut ::object::Object;
  pub fn qt_core_c_QSignalTransition_G_static_cast_QSignalTransition_ptr_QAbstractTransition(ptr: *mut ::abstract_transition::AbstractTransition) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_G_static_cast_QSignalTransition_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_delete(this_ptr: *mut ::signal_transition::SignalTransition);
  pub fn qt_core_c_QSignalTransition_metaObject(this_ptr: *const ::signal_transition::SignalTransition) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSignalTransition_new_no_args() -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_new_sender_signal(sender: *const ::object::Object, signal: *const ::libc::c_char) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_new_sender_signal_sourceState(sender: *const ::object::Object, signal: *const ::libc::c_char, sourceState: *mut ::state::State) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_new_sourceState(sourceState: *mut ::state::State) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QSignalTransition_senderObject(this_ptr: *const ::signal_transition::SignalTransition) -> *mut ::object::Object;
  pub fn qt_core_c_QSignalTransition_setSenderObject(this_ptr: *mut ::signal_transition::SignalTransition, sender: *const ::object::Object);
  pub fn qt_core_c_QSignalTransition_setSignal(this_ptr: *mut ::signal_transition::SignalTransition, signal: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QSignalTransition_signal_to_output(this_ptr: *const ::signal_transition::SignalTransition, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QSignalTransition_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSignalTransition_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QSize
  pub fn qt_core_c_QSize_G_operator_shl_QDataStream_QSize(arg1: *mut ::data_stream::DataStream, arg2: *const ::size::Size) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QSize_G_operator_shl_QDataStream_QSizeF(arg1: *mut ::data_stream::DataStream, arg2: *const ::size_f::SizeF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QSize_G_operator_shl_to_output_QDebug_QSize(arg1: *const ::debug::Debug, arg2: *const ::size::Size, output: *mut ::debug::Debug);
  pub fn qt_core_c_QSize_G_operator_shl_to_output_QDebug_QSizeF(arg1: *const ::debug::Debug, arg2: *const ::size_f::SizeF, output: *mut ::debug::Debug);
  pub fn qt_core_c_QSize_G_operator_shr_QDataStream_QSize(arg1: *mut ::data_stream::DataStream, arg2: *mut ::size::Size) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QSize_G_operator_shr_QDataStream_QSizeF(arg1: *mut ::data_stream::DataStream, arg2: *mut ::size_f::SizeF) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QSize_boundedTo_to_output(this_ptr: *const ::size::Size, arg1: *const ::size::Size, output: *mut ::size::Size);
  pub fn qt_core_c_QSize_constructor_no_args(output: *mut ::size::Size);
  pub fn qt_core_c_QSize_constructor_w_h(w: ::libc::c_int, h: ::libc::c_int, output: *mut ::size::Size);
  pub fn qt_core_c_QSize_destructor(this_ptr: *mut ::size::Size);
  pub fn qt_core_c_QSize_expandedTo_to_output(this_ptr: *const ::size::Size, arg1: *const ::size::Size, output: *mut ::size::Size);
  pub fn qt_core_c_QSize_height(this_ptr: *const ::size::Size) -> ::libc::c_int;
  pub fn qt_core_c_QSize_isEmpty(this_ptr: *const ::size::Size) -> bool;
  pub fn qt_core_c_QSize_isNull(this_ptr: *const ::size::Size) -> bool;
  pub fn qt_core_c_QSize_isValid(this_ptr: *const ::size::Size) -> bool;
  pub fn qt_core_c_QSize_operator_add_assign(this_ptr: *mut ::size::Size, arg1: *const ::size::Size) -> *mut ::size::Size;
  pub fn qt_core_c_QSize_operator_div_assign(this_ptr: *mut ::size::Size, c: ::libc::c_double) -> *mut ::size::Size;
  pub fn qt_core_c_QSize_operator_mul_assign(this_ptr: *mut ::size::Size, c: ::libc::c_double) -> *mut ::size::Size;
  pub fn qt_core_c_QSize_operator_sub_assign(this_ptr: *mut ::size::Size, arg1: *const ::size::Size) -> *mut ::size::Size;
  pub fn qt_core_c_QSize_rheight(this_ptr: *mut ::size::Size) -> *mut ::libc::c_int;
  pub fn qt_core_c_QSize_rwidth(this_ptr: *mut ::size::Size) -> *mut ::libc::c_int;
  pub fn qt_core_c_QSize_scale_s_mode(this_ptr: *mut ::size::Size, s: *const ::size::Size, mode: *const ::qt::AspectRatioMode);
  pub fn qt_core_c_QSize_scale_w_h_mode(this_ptr: *mut ::size::Size, w: ::libc::c_int, h: ::libc::c_int, mode: *const ::qt::AspectRatioMode);
  pub fn qt_core_c_QSize_scaled_to_output_s_mode(this_ptr: *const ::size::Size, s: *const ::size::Size, mode: *const ::qt::AspectRatioMode, output: *mut ::size::Size);
  pub fn qt_core_c_QSize_scaled_to_output_w_h_mode(this_ptr: *const ::size::Size, w: ::libc::c_int, h: ::libc::c_int, mode: *const ::qt::AspectRatioMode, output: *mut ::size::Size);
  pub fn qt_core_c_QSize_setHeight(this_ptr: *mut ::size::Size, h: ::libc::c_int);
  pub fn qt_core_c_QSize_setWidth(this_ptr: *mut ::size::Size, w: ::libc::c_int);
  pub fn qt_core_c_QSize_transpose(this_ptr: *mut ::size::Size);
  pub fn qt_core_c_QSize_transposed_to_output(this_ptr: *const ::size::Size, output: *mut ::size::Size);
  pub fn qt_core_c_QSize_width(this_ptr: *const ::size::Size) -> ::libc::c_int;

  // Header: QSizeF
  pub fn qt_core_c_QSizeF_boundedTo_to_output(this_ptr: *const ::size_f::SizeF, arg1: *const ::size_f::SizeF, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_constructor_no_args(output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_constructor_sz(sz: *const ::size::Size, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_constructor_w_h(w: ::libc::c_double, h: ::libc::c_double, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_destructor(this_ptr: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_expandedTo_to_output(this_ptr: *const ::size_f::SizeF, arg1: *const ::size_f::SizeF, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_height(this_ptr: *const ::size_f::SizeF) -> ::libc::c_double;
  pub fn qt_core_c_QSizeF_isEmpty(this_ptr: *const ::size_f::SizeF) -> bool;
  pub fn qt_core_c_QSizeF_isNull(this_ptr: *const ::size_f::SizeF) -> bool;
  pub fn qt_core_c_QSizeF_isValid(this_ptr: *const ::size_f::SizeF) -> bool;
  pub fn qt_core_c_QSizeF_operator_add_assign(this_ptr: *mut ::size_f::SizeF, arg1: *const ::size_f::SizeF) -> *mut ::size_f::SizeF;
  pub fn qt_core_c_QSizeF_operator_div_assign(this_ptr: *mut ::size_f::SizeF, c: ::libc::c_double) -> *mut ::size_f::SizeF;
  pub fn qt_core_c_QSizeF_operator_mul_assign(this_ptr: *mut ::size_f::SizeF, c: ::libc::c_double) -> *mut ::size_f::SizeF;
  pub fn qt_core_c_QSizeF_operator_sub_assign(this_ptr: *mut ::size_f::SizeF, arg1: *const ::size_f::SizeF) -> *mut ::size_f::SizeF;
  pub fn qt_core_c_QSizeF_rheight(this_ptr: *mut ::size_f::SizeF) -> *mut ::libc::c_double;
  pub fn qt_core_c_QSizeF_rwidth(this_ptr: *mut ::size_f::SizeF) -> *mut ::libc::c_double;
  pub fn qt_core_c_QSizeF_scale_s_mode(this_ptr: *mut ::size_f::SizeF, s: *const ::size_f::SizeF, mode: *const ::qt::AspectRatioMode);
  pub fn qt_core_c_QSizeF_scale_w_h_mode(this_ptr: *mut ::size_f::SizeF, w: ::libc::c_double, h: ::libc::c_double, mode: *const ::qt::AspectRatioMode);
  pub fn qt_core_c_QSizeF_scaled_to_output_s_mode(this_ptr: *const ::size_f::SizeF, s: *const ::size_f::SizeF, mode: *const ::qt::AspectRatioMode, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_scaled_to_output_w_h_mode(this_ptr: *const ::size_f::SizeF, w: ::libc::c_double, h: ::libc::c_double, mode: *const ::qt::AspectRatioMode, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_setHeight(this_ptr: *mut ::size_f::SizeF, h: ::libc::c_double);
  pub fn qt_core_c_QSizeF_setWidth(this_ptr: *mut ::size_f::SizeF, w: ::libc::c_double);
  pub fn qt_core_c_QSizeF_toSize_to_output(this_ptr: *const ::size_f::SizeF, output: *mut ::size::Size);
  pub fn qt_core_c_QSizeF_transpose(this_ptr: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_transposed_to_output(this_ptr: *const ::size_f::SizeF, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QSizeF_width(this_ptr: *const ::size_f::SizeF) -> ::libc::c_double;

  // Header: QSocketNotifier
  pub fn qt_core_c_QSocketNotifier_G_dynamic_cast_QSocketNotifier_ptr(ptr: *mut ::object::Object) -> *mut ::socket_notifier::SocketNotifier;
  pub fn qt_core_c_QSocketNotifier_G_static_cast_QObject_ptr(ptr: *mut ::socket_notifier::SocketNotifier) -> *mut ::object::Object;
  pub fn qt_core_c_QSocketNotifier_G_static_cast_QSocketNotifier_ptr(ptr: *mut ::object::Object) -> *mut ::socket_notifier::SocketNotifier;
  pub fn qt_core_c_QSocketNotifier_delete(this_ptr: *mut ::socket_notifier::SocketNotifier);
  pub fn qt_core_c_QSocketNotifier_isEnabled(this_ptr: *const ::socket_notifier::SocketNotifier) -> bool;
  pub fn qt_core_c_QSocketNotifier_metaObject(this_ptr: *const ::socket_notifier::SocketNotifier) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSocketNotifier_new_socket_arg2(socket: isize, arg2: ::socket_notifier::Type) -> *mut ::socket_notifier::SocketNotifier;
  pub fn qt_core_c_QSocketNotifier_new_socket_arg2_parent(socket: isize, arg2: ::socket_notifier::Type, parent: *mut ::object::Object) -> *mut ::socket_notifier::SocketNotifier;
  pub fn qt_core_c_QSocketNotifier_setEnabled(this_ptr: *mut ::socket_notifier::SocketNotifier, arg1: bool);
  pub fn qt_core_c_QSocketNotifier_socket(this_ptr: *const ::socket_notifier::SocketNotifier) -> isize;
  pub fn qt_core_c_QSocketNotifier_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSocketNotifier_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSocketNotifier_type(this_ptr: *const ::socket_notifier::SocketNotifier) -> ::socket_notifier::Type;

  // Header: QSortFilterProxyModel
  pub fn qt_core_c_QSortFilterProxyModel_G_dynamic_cast_QSortFilterProxyModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_dynamic_cast_QSortFilterProxyModel_ptr_QAbstractProxyModel(ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_dynamic_cast_QSortFilterProxyModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_static_cast_QAbstractProxyModel_ptr(ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel) -> *mut ::abstract_proxy_model::AbstractProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_static_cast_QObject_ptr(ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel) -> *mut ::object::Object;
  pub fn qt_core_c_QSortFilterProxyModel_G_static_cast_QSortFilterProxyModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_static_cast_QSortFilterProxyModel_ptr_QAbstractProxyModel(ptr: *mut ::abstract_proxy_model::AbstractProxyModel) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_G_static_cast_QSortFilterProxyModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_buddy_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, index: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_canFetchMore(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_clear(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel);
  pub fn qt_core_c_QSortFilterProxyModel_columnCount_no_args(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_columnCount_parent(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_data_to_output_index(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, index: *const ::model_index::ModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSortFilterProxyModel_data_to_output_index_role(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, index: *const ::model_index::ModelIndex, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSortFilterProxyModel_delete(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel);
  pub fn qt_core_c_QSortFilterProxyModel_dropMimeData(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, data: *const ::mime_data::MimeData, action: *const ::qt::DropAction, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_dynamicSortFilter(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_fetchMore(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, parent: *const ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_filterKeyColumn(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_filterRegExp_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QSortFilterProxyModel_filterRole(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_hasChildren_no_args(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_hasChildren_parent(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_headerData_to_output_section_orientation(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSortFilterProxyModel_headerData_to_output_section_orientation_role(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QSortFilterProxyModel_index_to_output_row_column(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, column: ::libc::c_int, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_index_to_output_row_column_parent(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, column: ::libc::c_int, parent: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_insertColumns_column_count(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_insertColumns_column_count_parent(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_insertRows_row_count(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_insertRows_row_count_parent(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_invalidate(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel);
  pub fn qt_core_c_QSortFilterProxyModel_isSortLocaleAware(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_mapFromSource_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, sourceIndex: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_mapSelectionFromSource_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, sourceSelection: *const ::item_selection::ItemSelection, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QSortFilterProxyModel_mapSelectionToSource_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, proxySelection: *const ::item_selection::ItemSelection, output: *mut ::item_selection::ItemSelection);
  pub fn qt_core_c_QSortFilterProxyModel_mapToSource_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, proxyIndex: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_metaObject(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QSortFilterProxyModel_mimeData(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, indexes: *const ::list::ListModelIndex) -> *mut ::mime_data::MimeData;
  pub fn qt_core_c_QSortFilterProxyModel_mimeTypes_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QSortFilterProxyModel_new_no_args() -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_new_parent(parent: *mut ::object::Object) -> *mut ::sort_filter_proxy_model::SortFilterProxyModel;
  pub fn qt_core_c_QSortFilterProxyModel_parent_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, child: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_removeColumns_column_count(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_removeColumns_column_count_parent(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_removeRows_row_count(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_removeRows_row_count_parent(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_rowCount_no_args(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_rowCount_parent(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_setData_index_value(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_setData_index_value_role(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_setDynamicSortFilter(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, enable: bool);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterCaseSensitivity(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, cs: *const ::qt::CaseSensitivity);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterFixedString(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, pattern: *const ::string::String);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterKeyColumn(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterRegExp_pattern(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, pattern: *const ::string::String);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterRegExp_regExp(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, regExp: *const ::reg_exp::RegExp);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterRole(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, role: ::libc::c_int);
  pub fn qt_core_c_QSortFilterProxyModel_setFilterWildcard(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, pattern: *const ::string::String);
  pub fn qt_core_c_QSortFilterProxyModel_setHeaderData_section_orientation_value(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_setHeaderData_section_orientation_value_role(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, section: ::libc::c_int, orientation: *const ::qt::Orientation, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSortFilterProxyModel_setSortCaseSensitivity(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, cs: *const ::qt::CaseSensitivity);
  pub fn qt_core_c_QSortFilterProxyModel_setSortLocaleAware(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, on: bool);
  pub fn qt_core_c_QSortFilterProxyModel_setSortRole(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, role: ::libc::c_int);
  pub fn qt_core_c_QSortFilterProxyModel_setSourceModel(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, sourceModel: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_QSortFilterProxyModel_sibling_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QSortFilterProxyModel_sortColumn(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_sortRole(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel) -> ::libc::c_int;
  pub fn qt_core_c_QSortFilterProxyModel_sort_column(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int);
  pub fn qt_core_c_QSortFilterProxyModel_sort_column_order(this_ptr: *mut ::sort_filter_proxy_model::SortFilterProxyModel, column: ::libc::c_int, order: *const ::qt::SortOrder);
  pub fn qt_core_c_QSortFilterProxyModel_span_to_output(this_ptr: *const ::sort_filter_proxy_model::SortFilterProxyModel, index: *const ::model_index::ModelIndex, output: *mut ::size::Size);
  pub fn qt_core_c_QSortFilterProxyModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QSortFilterProxyModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QStandardPaths
  pub fn qt_core_c_QStandardPaths_displayName_to_output(type_: ::standard_paths::StandardLocation, output: *mut ::string::String);
  pub fn qt_core_c_QStandardPaths_enableTestMode(testMode: bool);
  pub fn qt_core_c_QStandardPaths_findExecutable_to_output_executableName(executableName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QStandardPaths_findExecutable_to_output_executableName_paths(executableName: *const ::string::String, paths: *const ::string_list::StringList, output: *mut ::string::String);
  pub fn qt_core_c_QStandardPaths_isTestModeEnabled() -> bool;
  pub fn qt_core_c_QStandardPaths_locateAll_to_output_type_fileName(type_: ::standard_paths::StandardLocation, fileName: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStandardPaths_locateAll_to_output_type_fileName_options(type_: ::standard_paths::StandardLocation, fileName: *const ::string::String, options: ::libc::c_uint, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStandardPaths_locate_to_output_type_fileName(type_: ::standard_paths::StandardLocation, fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QStandardPaths_locate_to_output_type_fileName_options(type_: ::standard_paths::StandardLocation, fileName: *const ::string::String, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QStandardPaths_setTestModeEnabled(testMode: bool);
  pub fn qt_core_c_QStandardPaths_standardLocations_to_output(type_: ::standard_paths::StandardLocation, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStandardPaths_writableLocation_to_output(type_: ::standard_paths::StandardLocation, output: *mut ::string::String);

  // Header: QState
  pub fn qt_core_c_QState_G_dynamic_cast_QState_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::state::State;
  pub fn qt_core_c_QState_G_dynamic_cast_QState_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::state::State;
  pub fn qt_core_c_QState_G_static_cast_QAbstractState_ptr(ptr: *mut ::state::State) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QState_G_static_cast_QObject_ptr(ptr: *mut ::state::State) -> *mut ::object::Object;
  pub fn qt_core_c_QState_G_static_cast_QState_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::state::State;
  pub fn qt_core_c_QState_G_static_cast_QState_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::state::State;
  pub fn qt_core_c_QState_addTransition_sender_signal_target(this_ptr: *mut ::state::State, sender: *const ::object::Object, signal: *const ::libc::c_char, target: *mut ::abstract_state::AbstractState) -> *mut ::signal_transition::SignalTransition;
  pub fn qt_core_c_QState_addTransition_target(this_ptr: *mut ::state::State, target: *mut ::abstract_state::AbstractState) -> *mut ::abstract_transition::AbstractTransition;
  pub fn qt_core_c_QState_addTransition_transition(this_ptr: *mut ::state::State, transition: *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QState_assignProperty(this_ptr: *mut ::state::State, object: *mut ::object::Object, name: *const ::libc::c_char, value: *const ::variant::Variant);
  pub fn qt_core_c_QState_childMode(this_ptr: *const ::state::State) -> ::state::ChildMode;
  pub fn qt_core_c_QState_delete(this_ptr: *mut ::state::State);
  pub fn qt_core_c_QState_errorState(this_ptr: *const ::state::State) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QState_initialState(this_ptr: *const ::state::State) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QState_metaObject(this_ptr: *const ::state::State) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QState_new_childMode(childMode: ::state::ChildMode) -> *mut ::state::State;
  pub fn qt_core_c_QState_new_childMode_parent(childMode: ::state::ChildMode, parent: *mut ::state::State) -> *mut ::state::State;
  pub fn qt_core_c_QState_new_no_args() -> *mut ::state::State;
  pub fn qt_core_c_QState_new_parent(parent: *mut ::state::State) -> *mut ::state::State;
  pub fn qt_core_c_QState_removeTransition(this_ptr: *mut ::state::State, transition: *mut ::abstract_transition::AbstractTransition);
  pub fn qt_core_c_QState_setChildMode(this_ptr: *mut ::state::State, mode: ::state::ChildMode);
  pub fn qt_core_c_QState_setErrorState(this_ptr: *mut ::state::State, state: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QState_setInitialState(this_ptr: *mut ::state::State, state: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QState_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QState_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QState_transitions_to_output(this_ptr: *const ::state::State, output: *mut ::list::ListAbstractTransitionMutPtr);

  // Header: QStateMachine
  pub fn qt_core_c_QStateMachine_G_dynamic_cast_QStateMachine_SignalEvent_ptr(ptr: *mut ::event::Event) -> *mut ::state_machine::SignalEvent;
  pub fn qt_core_c_QStateMachine_G_dynamic_cast_QStateMachine_WrappedEvent_ptr(ptr: *mut ::event::Event) -> *mut ::state_machine::WrappedEvent;
  pub fn qt_core_c_QStateMachine_G_dynamic_cast_QStateMachine_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_G_dynamic_cast_QStateMachine_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_G_dynamic_cast_QStateMachine_ptr_QState(ptr: *mut ::state::State) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_G_static_cast_QAbstractState_ptr(ptr: *mut ::state_machine::StateMachine) -> *mut ::abstract_state::AbstractState;
  pub fn qt_core_c_QStateMachine_G_static_cast_QEvent_ptr_QStateMachine_SignalEvent(ptr: *mut ::state_machine::SignalEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QStateMachine_G_static_cast_QEvent_ptr_QStateMachine_WrappedEvent(ptr: *mut ::state_machine::WrappedEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QStateMachine_G_static_cast_QObject_ptr(ptr: *mut ::state_machine::StateMachine) -> *mut ::object::Object;
  pub fn qt_core_c_QStateMachine_G_static_cast_QStateMachine_SignalEvent_ptr(ptr: *mut ::event::Event) -> *mut ::state_machine::SignalEvent;
  pub fn qt_core_c_QStateMachine_G_static_cast_QStateMachine_WrappedEvent_ptr(ptr: *mut ::event::Event) -> *mut ::state_machine::WrappedEvent;
  pub fn qt_core_c_QStateMachine_G_static_cast_QStateMachine_ptr_QAbstractState(ptr: *mut ::abstract_state::AbstractState) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_G_static_cast_QStateMachine_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_G_static_cast_QStateMachine_ptr_QState(ptr: *mut ::state::State) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_G_static_cast_QState_ptr(ptr: *mut ::state_machine::StateMachine) -> *mut ::state::State;
  pub fn qt_core_c_QStateMachine_SignalEvent_arguments_to_output(this_ptr: *const ::state_machine::SignalEvent, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QStateMachine_SignalEvent_delete(this_ptr: *mut ::state_machine::SignalEvent);
  pub fn qt_core_c_QStateMachine_SignalEvent_new(sender: *mut ::object::Object, signalIndex: ::libc::c_int, arguments: *const ::list::ListVariant) -> *mut ::state_machine::SignalEvent;
  pub fn qt_core_c_QStateMachine_SignalEvent_sender(this_ptr: *const ::state_machine::SignalEvent) -> *mut ::object::Object;
  pub fn qt_core_c_QStateMachine_SignalEvent_signalIndex(this_ptr: *const ::state_machine::SignalEvent) -> ::libc::c_int;
  pub fn qt_core_c_QStateMachine_WrappedEvent_delete(this_ptr: *mut ::state_machine::WrappedEvent);
  pub fn qt_core_c_QStateMachine_WrappedEvent_event(this_ptr: *const ::state_machine::WrappedEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QStateMachine_WrappedEvent_new(object: *mut ::object::Object, event: *mut ::event::Event) -> *mut ::state_machine::WrappedEvent;
  pub fn qt_core_c_QStateMachine_WrappedEvent_object(this_ptr: *const ::state_machine::WrappedEvent) -> *mut ::object::Object;
  pub fn qt_core_c_QStateMachine_addDefaultAnimation(this_ptr: *mut ::state_machine::StateMachine, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QStateMachine_addState(this_ptr: *mut ::state_machine::StateMachine, state: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QStateMachine_cancelDelayedEvent(this_ptr: *mut ::state_machine::StateMachine, id: ::libc::c_int) -> bool;
  pub fn qt_core_c_QStateMachine_clearError(this_ptr: *mut ::state_machine::StateMachine);
  pub fn qt_core_c_QStateMachine_configuration_to_output(this_ptr: *const ::state_machine::StateMachine, output: *mut ::set::SetAbstractStateMutPtr);
  pub fn qt_core_c_QStateMachine_defaultAnimations_to_output(this_ptr: *const ::state_machine::StateMachine, output: *mut ::list::ListAbstractAnimationMutPtr);
  pub fn qt_core_c_QStateMachine_delete(this_ptr: *mut ::state_machine::StateMachine);
  pub fn qt_core_c_QStateMachine_error(this_ptr: *const ::state_machine::StateMachine) -> ::state_machine::Error;
  pub fn qt_core_c_QStateMachine_errorString_to_output(this_ptr: *const ::state_machine::StateMachine, output: *mut ::string::String);
  pub fn qt_core_c_QStateMachine_eventFilter(this_ptr: *mut ::state_machine::StateMachine, watched: *mut ::object::Object, event: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QStateMachine_isAnimated(this_ptr: *const ::state_machine::StateMachine) -> bool;
  pub fn qt_core_c_QStateMachine_isRunning(this_ptr: *const ::state_machine::StateMachine) -> bool;
  pub fn qt_core_c_QStateMachine_metaObject(this_ptr: *const ::state_machine::StateMachine) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QStateMachine_new_childMode(childMode: *const ::state::ChildMode) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_new_childMode_parent(childMode: *const ::state::ChildMode, parent: *mut ::object::Object) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_new_no_args() -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_new_parent(parent: *mut ::object::Object) -> *mut ::state_machine::StateMachine;
  pub fn qt_core_c_QStateMachine_postDelayedEvent(this_ptr: *mut ::state_machine::StateMachine, event: *mut ::event::Event, delay: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStateMachine_postEvent_event(this_ptr: *mut ::state_machine::StateMachine, event: *mut ::event::Event);
  pub fn qt_core_c_QStateMachine_postEvent_event_priority(this_ptr: *mut ::state_machine::StateMachine, event: *mut ::event::Event, priority: ::state_machine::EventPriority);
  pub fn qt_core_c_QStateMachine_removeDefaultAnimation(this_ptr: *mut ::state_machine::StateMachine, animation: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_QStateMachine_removeState(this_ptr: *mut ::state_machine::StateMachine, state: *mut ::abstract_state::AbstractState);
  pub fn qt_core_c_QStateMachine_setAnimated(this_ptr: *mut ::state_machine::StateMachine, enabled: bool);
  pub fn qt_core_c_QStateMachine_setGlobalRestorePolicy(this_ptr: *mut ::state_machine::StateMachine, restorePolicy: *const ::state::RestorePolicy);
  pub fn qt_core_c_QStateMachine_setRunning(this_ptr: *mut ::state_machine::StateMachine, running: bool);
  pub fn qt_core_c_QStateMachine_start(this_ptr: *mut ::state_machine::StateMachine);
  pub fn qt_core_c_QStateMachine_stop(this_ptr: *mut ::state_machine::StateMachine);
  pub fn qt_core_c_QStateMachine_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QStateMachine_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QStaticByteArrayMatcherBase
  pub fn qt_core_c_QStaticByteArrayMatcherBase_delete(this_ptr: *mut ::static_byte_array_matcher_base::StaticByteArrayMatcherBase);

  // Header: QStaticPlugin
  pub fn qt_core_c_QStaticPlugin_G_qRegisterStaticPluginFunction(staticPlugin: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QStaticPlugin_destructor(this_ptr: *mut ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QStaticPlugin_instance(this_ptr: *const ::static_plugin::StaticPlugin) -> extern "C" fn() -> *mut ::object::Object;
  pub fn qt_core_c_QStaticPlugin_metaData_to_output(this_ptr: *const ::static_plugin::StaticPlugin, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QStaticPlugin_rawMetaData(this_ptr: *const ::static_plugin::StaticPlugin) -> extern "C" fn() -> *const ::libc::c_char;
  pub fn qt_core_c_QStaticPlugin_set_instance(this_ptr: *mut ::static_plugin::StaticPlugin, value: extern "C" fn() -> *mut ::object::Object);
  pub fn qt_core_c_QStaticPlugin_set_rawMetaData(this_ptr: *mut ::static_plugin::StaticPlugin, value: extern "C" fn() -> *const ::libc::c_char);

  // Header: QStorageInfo
  pub fn qt_core_c_QStorageInfo_G_operator_neq(first: *const ::storage_info::StorageInfo, second: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QStorageInfo_G_swap(value1: *mut ::storage_info::StorageInfo, value2: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_blockSize(this_ptr: *const ::storage_info::StorageInfo) -> ::libc::c_int;
  pub fn qt_core_c_QStorageInfo_bytesAvailable(this_ptr: *const ::storage_info::StorageInfo) -> i64;
  pub fn qt_core_c_QStorageInfo_bytesFree(this_ptr: *const ::storage_info::StorageInfo) -> i64;
  pub fn qt_core_c_QStorageInfo_bytesTotal(this_ptr: *const ::storage_info::StorageInfo) -> i64;
  pub fn qt_core_c_QStorageInfo_constructor_dir(dir: *const ::dir::Dir, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_constructor_no_args(output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_constructor_other(other: *const ::storage_info::StorageInfo, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_constructor_path(path: *const ::string::String, output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_destructor(this_ptr: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_device_to_output(this_ptr: *const ::storage_info::StorageInfo, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QStorageInfo_displayName_to_output(this_ptr: *const ::storage_info::StorageInfo, output: *mut ::string::String);
  pub fn qt_core_c_QStorageInfo_fileSystemType_to_output(this_ptr: *const ::storage_info::StorageInfo, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QStorageInfo_isReadOnly(this_ptr: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QStorageInfo_isReady(this_ptr: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QStorageInfo_isRoot(this_ptr: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QStorageInfo_isValid(this_ptr: *const ::storage_info::StorageInfo) -> bool;
  pub fn qt_core_c_QStorageInfo_mountedVolumes_to_output(output: *mut ::list::ListStorageInfo);
  pub fn qt_core_c_QStorageInfo_name_to_output(this_ptr: *const ::storage_info::StorageInfo, output: *mut ::string::String);
  pub fn qt_core_c_QStorageInfo_operator_assign(this_ptr: *mut ::storage_info::StorageInfo, other: *const ::storage_info::StorageInfo) -> *mut ::storage_info::StorageInfo;
  pub fn qt_core_c_QStorageInfo_refresh(this_ptr: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_rootPath_to_output(this_ptr: *const ::storage_info::StorageInfo, output: *mut ::string::String);
  pub fn qt_core_c_QStorageInfo_root_to_output(output: *mut ::storage_info::StorageInfo);
  pub fn qt_core_c_QStorageInfo_setPath(this_ptr: *mut ::storage_info::StorageInfo, path: *const ::string::String);
  pub fn qt_core_c_QStorageInfo_subvolume_to_output(this_ptr: *const ::storage_info::StorageInfo, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QStorageInfo_swap(this_ptr: *mut ::storage_info::StorageInfo, other: *mut ::storage_info::StorageInfo);

  // Header: QString
  pub fn qt_core_c_QString_G_operator_add_to_output_QByteArray_ba_QString_s(ba: *const ::byte_array::ByteArray, s: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QChar_s1_QStringRef_s2(s1: *const ::char::Char, s2: *const ::string_ref::StringRef, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QChar_s1_QString_s2(s1: *const ::char::Char, s2: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QLatin1String_s1_QStringRef_s2(s1: *const ::latin1_string::Latin1String, s2: *const ::string_ref::StringRef, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QStringRef_s1_QChar_s2(s1: *const ::string_ref::StringRef, s2: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QStringRef_s1_QLatin1String_s2(s1: *const ::string_ref::StringRef, s2: *const ::latin1_string::Latin1String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QStringRef_s1_QStringRef_s2(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QStringRef_s1_QString_s2(s1: *const ::string_ref::StringRef, s2: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QString_s1_QChar_s2(s1: *const ::string::String, s2: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QString_s1_QStringRef_s2(s1: *const ::string::String, s2: *const ::string_ref::StringRef, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QString_s1_QString_s2(s1: *const ::string::String, s2: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QString_s1_char_s2(s1: *const ::string::String, s2: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QString_s_QByteArray_ba(s: *const ::string::String, ba: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_QString_s_char_c(s: *const ::string::String, c: ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_char_c_QString_s(c: ::libc::c_char, s: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_add_to_output_char_s1_QString_s2(s1: *const ::libc::c_char, s2: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_G_operator_eq_QByteArray_QStringRef(lhs: *const ::byte_array::ByteArray, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QLatin1String_QChar(lhs: *const ::latin1_string::Latin1String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QLatin1String_QLatin1String(s1: *const ::latin1_string::Latin1String, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QLatin1String_QStringRef(lhs: *const ::latin1_string::Latin1String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QStringRef_QByteArray(lhs: *const ::string_ref::StringRef, rhs: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QStringRef_QChar(lhs: *const ::string_ref::StringRef, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QStringRef_QLatin1String(lhs: *const ::string_ref::StringRef, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QStringRef_QString(lhs: *const ::string_ref::StringRef, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QString_QChar(lhs: *const ::string::String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_QString_QStringRef(lhs: *const ::string::String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_eq_char_QLatin1String(s1: *const ::libc::c_char, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QByteArray_QStringRef(lhs: *const ::byte_array::ByteArray, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QChar_QLatin1String(lhs: *const ::char::Char, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QChar_QString(lhs: *const ::char::Char, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QChar_QStringRef(lhs: *const ::char::Char, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QLatin1String_QChar(lhs: *const ::latin1_string::Latin1String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QLatin1String_QLatin1String(s1: *const ::latin1_string::Latin1String, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QLatin1String_QStringRef(lhs: *const ::latin1_string::Latin1String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QStringRef_QByteArray(lhs: *const ::string_ref::StringRef, rhs: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QStringRef_QChar(lhs: *const ::string_ref::StringRef, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QStringRef_QLatin1String(lhs: *const ::string_ref::StringRef, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QStringRef_QString(lhs: *const ::string_ref::StringRef, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QString_QChar(lhs: *const ::string::String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_QString_QStringRef(lhs: *const ::string::String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_ge_char_QLatin1String(s1: *const ::libc::c_char, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QByteArray_QStringRef(lhs: *const ::byte_array::ByteArray, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QLatin1String_QChar(lhs: *const ::latin1_string::Latin1String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QLatin1String_QLatin1String(s1: *const ::latin1_string::Latin1String, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QLatin1String_QStringRef(lhs: *const ::latin1_string::Latin1String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QStringRef_QByteArray(lhs: *const ::string_ref::StringRef, rhs: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QStringRef_QChar(lhs: *const ::string_ref::StringRef, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QStringRef_QLatin1String(lhs: *const ::string_ref::StringRef, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QStringRef_QString(lhs: *const ::string_ref::StringRef, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QString_QChar(lhs: *const ::string::String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_QString_QStringRef(lhs: *const ::string::String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_gt_char_QLatin1String(s1: *const ::libc::c_char, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QByteArray_QStringRef(lhs: *const ::byte_array::ByteArray, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QChar_QLatin1String(lhs: *const ::char::Char, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QChar_QString(lhs: *const ::char::Char, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QChar_QStringRef(lhs: *const ::char::Char, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QLatin1String_QChar(lhs: *const ::latin1_string::Latin1String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QLatin1String_QLatin1String(s1: *const ::latin1_string::Latin1String, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QLatin1String_QStringRef(lhs: *const ::latin1_string::Latin1String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QStringRef_QByteArray(lhs: *const ::string_ref::StringRef, rhs: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QStringRef_QChar(lhs: *const ::string_ref::StringRef, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QStringRef_QLatin1String(lhs: *const ::string_ref::StringRef, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QStringRef_QString(lhs: *const ::string_ref::StringRef, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QString_QChar(lhs: *const ::string::String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_le_QString_QStringRef(lhs: *const ::string::String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_le_char_QLatin1String(s1: *const ::libc::c_char, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QByteArray_QStringRef(lhs: *const ::byte_array::ByteArray, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QLatin1String_QChar(lhs: *const ::latin1_string::Latin1String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QLatin1String_QLatin1String(s1: *const ::latin1_string::Latin1String, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QLatin1String_QStringRef(lhs: *const ::latin1_string::Latin1String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QStringRef_QByteArray(lhs: *const ::string_ref::StringRef, rhs: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QStringRef_QChar(lhs: *const ::string_ref::StringRef, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QStringRef_QLatin1String(lhs: *const ::string_ref::StringRef, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QStringRef_QString(lhs: *const ::string_ref::StringRef, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QString_QChar(lhs: *const ::string::String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_QString_QStringRef(lhs: *const ::string::String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_lt_char_QLatin1String(s1: *const ::libc::c_char, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QByteArray_QStringRef(lhs: *const ::byte_array::ByteArray, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QChar_QLatin1String(lhs: *const ::char::Char, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QChar_QString(lhs: *const ::char::Char, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QChar_QStringRef(lhs: *const ::char::Char, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QLatin1String_QChar(lhs: *const ::latin1_string::Latin1String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QLatin1String_QLatin1String(s1: *const ::latin1_string::Latin1String, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QLatin1String_QStringRef(lhs: *const ::latin1_string::Latin1String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QStringRef_QByteArray(lhs: *const ::string_ref::StringRef, rhs: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QStringRef_QChar(lhs: *const ::string_ref::StringRef, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QStringRef_QLatin1String(lhs: *const ::string_ref::StringRef, rhs: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QStringRef_QString(lhs: *const ::string_ref::StringRef, rhs: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QString_QChar(lhs: *const ::string::String, rhs: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_QString_QStringRef(lhs: *const ::string::String, rhs: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_G_operator_neq_char_QLatin1String(s1: *const ::libc::c_char, s2: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_G_operator_shl(arg1: *mut ::data_stream::DataStream, arg2: *const ::string::String) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QString_G_operator_shr(arg1: *mut ::data_stream::DataStream, arg2: *mut ::string::String) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QString_G_swap(value1: *mut ::string::String, value2: *mut ::string::String);
  pub fn qt_core_c_QString_append_QByteArray(this_ptr: *mut ::string::String, s: *const ::byte_array::ByteArray) -> *mut ::string::String;
  pub fn qt_core_c_QString_append_QChar(this_ptr: *mut ::string::String, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_append_QChar_int(this_ptr: *mut ::string::String, uc: *const ::char::Char, len: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_append_QLatin1String(this_ptr: *mut ::string::String, s: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_append_QString(this_ptr: *mut ::string::String, s: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_append_QStringRef(this_ptr: *mut ::string::String, s: *const ::string_ref::StringRef) -> *mut ::string::String;
  pub fn qt_core_c_QString_append_char(this_ptr: *mut ::string::String, s: *const ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_arg_to_output_QChar(this_ptr: *const ::string::String, a: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QChar_int(this_ptr: *const ::string::String, a: *const ::char::Char, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QChar_int_QChar(this_ptr: *const ::string::String, a: *const ::char::Char, fieldWidth: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString(this_ptr: *const ::string::String, a: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, a4: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, a4: *const ::string::String, a5: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, a4: *const ::string::String, a5: *const ::string::String, a6: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString_QString_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, a4: *const ::string::String, a5: *const ::string::String, a6: *const ::string::String, a7: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString_QString_QString_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, a4: *const ::string::String, a5: *const ::string::String, a6: *const ::string::String, a7: *const ::string::String, a8: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_QString_QString_QString_QString_QString_QString_QString_QString(this_ptr: *const ::string::String, a1: *const ::string::String, a2: *const ::string::String, a3: *const ::string::String, a4: *const ::string::String, a5: *const ::string::String, a6: *const ::string::String, a7: *const ::string::String, a8: *const ::string::String, a9: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_int(this_ptr: *const ::string::String, a: *const ::string::String, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_QString_int_QChar(this_ptr: *const ::string::String, a: *const ::string::String, fieldWidth: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_char(this_ptr: *const ::string::String, a: ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_char_int(this_ptr: *const ::string::String, a: ::libc::c_char, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_char_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_char, fieldWidth: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_double(this_ptr: *const ::string::String, a: ::libc::c_double, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_double_int(this_ptr: *const ::string::String, a: ::libc::c_double, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_double_int_char(this_ptr: *const ::string::String, a: ::libc::c_double, fieldWidth: ::libc::c_int, fmt: ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_double_int_char_int(this_ptr: *const ::string::String, a: ::libc::c_double, fieldWidth: ::libc::c_int, fmt: ::libc::c_char, prec: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_double_int_char_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_double, fieldWidth: ::libc::c_int, fmt: ::libc::c_char, prec: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_int(this_ptr: *const ::string::String, a: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_int_int(this_ptr: *const ::string::String, a: ::libc::c_int, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_int_int_int(this_ptr: *const ::string::String, a: ::libc::c_int, fieldWidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_int_int_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_int, fieldWidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_long(this_ptr: *const ::string::String, a: ::libc::c_long, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_long_int(this_ptr: *const ::string::String, a: ::libc::c_long, fieldwidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_long_int_int(this_ptr: *const ::string::String, a: ::libc::c_long, fieldwidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_long_int_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_long, fieldwidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qlonglong(this_ptr: *const ::string::String, a: i64, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qlonglong_int(this_ptr: *const ::string::String, a: i64, fieldwidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qlonglong_int_int(this_ptr: *const ::string::String, a: i64, fieldwidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qlonglong_int_int_QChar(this_ptr: *const ::string::String, a: i64, fieldwidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qulonglong(this_ptr: *const ::string::String, a: u64, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qulonglong_int(this_ptr: *const ::string::String, a: u64, fieldwidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qulonglong_int_int(this_ptr: *const ::string::String, a: u64, fieldwidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_qulonglong_int_int_QChar(this_ptr: *const ::string::String, a: u64, fieldwidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_short(this_ptr: *const ::string::String, a: ::libc::c_short, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_short_int(this_ptr: *const ::string::String, a: ::libc::c_short, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_short_int_int(this_ptr: *const ::string::String, a: ::libc::c_short, fieldWidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_short_int_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_short, fieldWidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_int(this_ptr: *const ::string::String, a: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_int_int(this_ptr: *const ::string::String, a: ::libc::c_uint, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_int_int_int(this_ptr: *const ::string::String, a: ::libc::c_uint, fieldWidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_int_int_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_uint, fieldWidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_long(this_ptr: *const ::string::String, a: ::libc::c_ulong, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_long_int(this_ptr: *const ::string::String, a: ::libc::c_ulong, fieldwidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_long_int_int(this_ptr: *const ::string::String, a: ::libc::c_ulong, fieldwidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_long_int_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_ulong, fieldwidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_short(this_ptr: *const ::string::String, a: ::libc::c_ushort, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_short_int(this_ptr: *const ::string::String, a: ::libc::c_ushort, fieldWidth: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_short_int_int(this_ptr: *const ::string::String, a: ::libc::c_ushort, fieldWidth: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_arg_to_output_unsigned_short_int_int_QChar(this_ptr: *const ::string::String, a: ::libc::c_ushort, fieldWidth: ::libc::c_int, base: ::libc::c_int, fillChar: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_at_to_output(this_ptr: *const ::string::String, i: ::libc::c_int, output: *mut ::char::Char);
  pub fn qt_core_c_QString_begin(this_ptr: *mut ::string::String) -> *mut ::char::Char;
  pub fn qt_core_c_QString_begin_const(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_capacity(this_ptr: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_cbegin(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_cend(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_chop(this_ptr: *mut ::string::String, n: ::libc::c_int);
  pub fn qt_core_c_QString_clear(this_ptr: *mut ::string::String);
  pub fn qt_core_c_QString_compare_QLatin1String(this_ptr: *const ::string::String, other: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QLatin1String_QString(s1: *const ::latin1_string::Latin1String, s2: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QLatin1String_QString_Qt_CaseSensitivity(s1: *const ::latin1_string::Latin1String, s2: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string::String, other: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString(this_ptr: *const ::string::String, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QStringRef(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_QLatin1String(s1: *const ::string::String, s2: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_QLatin1String_Qt_CaseSensitivity(s1: *const ::string::String, s2: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_QString(s1: *const ::string::String, s2: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_QStringRef(s1: *const ::string::String, s2: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_QStringRef_Qt_CaseSensitivity(s1: *const ::string::String, s2: *const ::string_ref::StringRef, arg3: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_QString_Qt_CaseSensitivity(s1: *const ::string::String, s2: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_compare_QString_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_constBegin(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_constData(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_constEnd(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_constructor_a(a: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_arg1(arg1: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_c(c: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_ch(ch: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_latin1(latin1: *const ::latin1_string::Latin1String, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_no_args(output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_size_c(size: ::libc::c_int, c: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_unicode(unicode: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_constructor_unicode_size(unicode: *const ::char::Char, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_contains_QChar(this_ptr: *const ::string::String, c: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_contains_QChar_Qt_CaseSensitivity(this_ptr: *const ::string::String, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_contains_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_contains_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_contains_QRegExp_ref(this_ptr: *const ::string::String, rx: *mut ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QString_contains_const_QRegExp_ref(this_ptr: *const ::string::String, rx: *const ::reg_exp::RegExp) -> bool;
  pub fn qt_core_c_QString_contains_const_QRegularExpression_ref(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression) -> bool;
  pub fn qt_core_c_QString_contains_const_QRegularExpression_ref_QRegularExpressionMatch_ptr(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, match_: *mut ::regular_expression_match::RegularExpressionMatch) -> bool;
  pub fn qt_core_c_QString_contains_const_QStringRef_ref(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_contains_const_QStringRef_ref_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_contains_const_QString_ref(this_ptr: *const ::string::String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_contains_const_QString_ref_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_count_QChar(this_ptr: *const ::string::String, c: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QChar_Qt_CaseSensitivity(this_ptr: *const ::string::String, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QRegExp(this_ptr: *const ::string::String, arg1: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QRegularExpression(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QString(this_ptr: *const ::string::String, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QStringRef(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_QString_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_count_no_args(this_ptr: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_data(this_ptr: *mut ::string::String) -> *mut ::char::Char;
  pub fn qt_core_c_QString_data_const(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_destructor(this_ptr: *mut ::string::String);
  pub fn qt_core_c_QString_end(this_ptr: *mut ::string::String) -> *mut ::char::Char;
  pub fn qt_core_c_QString_end_const(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_endsWith_QChar(this_ptr: *const ::string::String, c: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_endsWith_QChar_Qt_CaseSensitivity(this_ptr: *const ::string::String, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_endsWith_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_endsWith_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_endsWith_QString(this_ptr: *const ::string::String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_endsWith_QStringRef(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_endsWith_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_endsWith_QString_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_fill_c(this_ptr: *mut ::string::String, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_fill_c_size(this_ptr: *mut ::string::String, c: *const ::char::Char, size: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_fromLatin1_to_output_QByteArray(str: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromLatin1_to_output_char(str: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromLatin1_to_output_char_int(str: *const ::libc::c_char, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromLocal8Bit_to_output_QByteArray(str: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromLocal8Bit_to_output_char(str: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromLocal8Bit_to_output_char_int(str: *const ::libc::c_char, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromRawData_to_output(arg1: *const ::char::Char, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUcs4_to_output_arg1(arg1: *const ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUcs4_to_output_arg1_size(arg1: *const ::libc::c_uint, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUtf16_to_output_arg1(arg1: *const ::libc::c_ushort, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUtf16_to_output_arg1_size(arg1: *const ::libc::c_ushort, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUtf8_to_output_QByteArray(str: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUtf8_to_output_char(str: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromUtf8_to_output_char_int(str: *const ::libc::c_char, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromWCharArray_to_output_string(string: *const ::libc::wchar_t, output: *mut ::string::String);
  pub fn qt_core_c_QString_fromWCharArray_to_output_string_size(string: *const ::libc::wchar_t, size: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_indexOf_QChar(this_ptr: *const ::string::String, c: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QChar_int(this_ptr: *const ::string::String, c: *const ::char::Char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QChar_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, c: *const ::char::Char, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QLatin1String_int(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QLatin1String_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QRegExp_ref(this_ptr: *const ::string::String, arg1: *mut ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_QRegExp_ref_int(this_ptr: *const ::string::String, arg1: *mut ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QRegExp_ref(this_ptr: *const ::string::String, arg1: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QRegExp_ref_int(this_ptr: *const ::string::String, arg1: *const ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QRegularExpression_ref(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QRegularExpression_ref_int(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QRegularExpression_ref_int_QRegularExpressionMatch_ptr(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, from: ::libc::c_int, rmatch: *mut ::regular_expression_match::RegularExpressionMatch) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QStringRef_ref(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QStringRef_ref_int(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QStringRef_ref_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QString_ref(this_ptr: *const ::string::String, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QString_ref_int(this_ptr: *const ::string::String, s: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_indexOf_const_QString_ref_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_insert_int_QByteArray(this_ptr: *mut ::string::String, i: ::libc::c_int, s: *const ::byte_array::ByteArray) -> *mut ::string::String;
  pub fn qt_core_c_QString_insert_int_QChar(this_ptr: *mut ::string::String, i: ::libc::c_int, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_insert_int_QChar_int(this_ptr: *mut ::string::String, i: ::libc::c_int, uc: *const ::char::Char, len: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_insert_int_QLatin1String(this_ptr: *mut ::string::String, i: ::libc::c_int, s: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_insert_int_QString(this_ptr: *mut ::string::String, i: ::libc::c_int, s: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_insert_int_QStringRef(this_ptr: *mut ::string::String, i: ::libc::c_int, s: *const ::string_ref::StringRef) -> *mut ::string::String;
  pub fn qt_core_c_QString_insert_int_char(this_ptr: *mut ::string::String, i: ::libc::c_int, s: *const ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_isEmpty(this_ptr: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_isNull(this_ptr: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_isRightToLeft(this_ptr: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_lastIndexOf_QChar(this_ptr: *const ::string::String, c: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QChar_int(this_ptr: *const ::string::String, c: *const ::char::Char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QChar_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, c: *const ::char::Char, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QLatin1String_int(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QLatin1String_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QRegExp_ref(this_ptr: *const ::string::String, arg1: *mut ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_QRegExp_ref_int(this_ptr: *const ::string::String, arg1: *mut ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QRegExp_ref(this_ptr: *const ::string::String, arg1: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QRegExp_ref_int(this_ptr: *const ::string::String, arg1: *const ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QRegularExpression_ref(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QRegularExpression_ref_int(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QRegularExpression_ref_int_QRegularExpressionMatch_ptr(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, from: ::libc::c_int, rmatch: *mut ::regular_expression_match::RegularExpressionMatch) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QStringRef_ref(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QStringRef_ref_int(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QStringRef_ref_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QString_ref(this_ptr: *const ::string::String, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QString_ref_int(this_ptr: *const ::string::String, s: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_lastIndexOf_const_QString_ref_int_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QString_leftJustified_to_output_width(this_ptr: *const ::string::String, width: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_leftJustified_to_output_width_fill(this_ptr: *const ::string::String, width: ::libc::c_int, fill: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_leftJustified_to_output_width_fill_trunc(this_ptr: *const ::string::String, width: ::libc::c_int, fill: *const ::char::Char, trunc: bool, output: *mut ::string::String);
  pub fn qt_core_c_QString_leftRef_to_output(this_ptr: *const ::string::String, n: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QString_left_to_output(this_ptr: *const ::string::String, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_length(this_ptr: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_localeAwareCompare_QString(this_ptr: *const ::string::String, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_localeAwareCompare_QStringRef(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_localeAwareCompare_QString_QString(s1: *const ::string::String, s2: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_localeAwareCompare_QString_QStringRef(s1: *const ::string::String, s2: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QString_midRef_to_output_position(this_ptr: *const ::string::String, position: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QString_midRef_to_output_position_n(this_ptr: *const ::string::String, position: ::libc::c_int, n: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QString_mid_to_output_position(this_ptr: *const ::string::String, position: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_mid_to_output_position_n(this_ptr: *const ::string::String, position: ::libc::c_int, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_normalized_to_output_mode(this_ptr: *const ::string::String, mode: ::string::NormalizationForm, output: *mut ::string::String);
  pub fn qt_core_c_QString_normalized_to_output_mode_version(this_ptr: *const ::string::String, mode: ::string::NormalizationForm, version: *const ::char::UnicodeVersion, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_double(arg1: ::libc::c_double, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_double_char(arg1: ::libc::c_double, f: ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_double_char_int(arg1: ::libc::c_double, f: ::libc::c_char, prec: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_int(arg1: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_int_int(arg1: ::libc::c_int, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_long(arg1: ::libc::c_long, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_long_int(arg1: ::libc::c_long, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_qlonglong(arg1: i64, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_qlonglong_int(arg1: i64, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_qulonglong(arg1: u64, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_qulonglong_int(arg1: u64, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_unsigned_int(arg1: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_unsigned_int_int(arg1: ::libc::c_uint, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_unsigned_long(arg1: ::libc::c_ulong, output: *mut ::string::String);
  pub fn qt_core_c_QString_number_to_output_unsigned_long_int(arg1: ::libc::c_ulong, base: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_operator_add_assign_QByteArray_s(this_ptr: *mut ::string::String, s: *const ::byte_array::ByteArray) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_QChar_SpecialCharacter_c(this_ptr: *mut ::string::String, c: *const ::char::SpecialCharacter) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_QChar_c(this_ptr: *mut ::string::String, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_QLatin1String_s(this_ptr: *mut ::string::String, s: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_QStringRef_s(this_ptr: *mut ::string::String, s: *const ::string_ref::StringRef) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_QString_s(this_ptr: *mut ::string::String, s: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_char_c(this_ptr: *mut ::string::String, c: ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_add_assign_char_s(this_ptr: *mut ::string::String, s: *const ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_assign_QByteArray_a(this_ptr: *mut ::string::String, a: *const ::byte_array::ByteArray) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_assign_QChar_c(this_ptr: *mut ::string::String, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_assign_QLatin1String_latin1(this_ptr: *mut ::string::String, latin1: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_assign_QString_arg1(this_ptr: *mut ::string::String, arg1: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_assign_char_c(this_ptr: *mut ::string::String, c: ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_assign_char_ch(this_ptr: *mut ::string::String, ch: *const ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_operator_eq_QByteArray(this_ptr: *const ::string::String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_operator_eq_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_operator_eq_char(this_ptr: *const ::string::String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QString_operator_ge_QByteArray(this_ptr: *const ::string::String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_operator_ge_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_operator_ge_char(this_ptr: *const ::string::String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QString_operator_gt_QByteArray(this_ptr: *const ::string::String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_operator_gt_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_operator_gt_char(this_ptr: *const ::string::String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QString_operator_index_to_output_const_int(this_ptr: *const ::string::String, i: ::libc::c_int, output: *mut ::char::Char);
  pub fn qt_core_c_QString_operator_index_to_output_const_unsigned_int(this_ptr: *const ::string::String, i: ::libc::c_uint, output: *mut ::char::Char);
  pub fn qt_core_c_QString_operator_index_to_output_int(this_ptr: *mut ::string::String, i: ::libc::c_int, output: *mut ::char_ref::CharRef);
  pub fn qt_core_c_QString_operator_index_to_output_unsigned_int(this_ptr: *mut ::string::String, i: ::libc::c_uint, output: *mut ::char_ref::CharRef);
  pub fn qt_core_c_QString_operator_le_QByteArray(this_ptr: *const ::string::String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_operator_le_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_operator_le_char(this_ptr: *const ::string::String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QString_operator_lt_QByteArray(this_ptr: *const ::string::String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_operator_lt_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_operator_lt_char(this_ptr: *const ::string::String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QString_operator_neq_QByteArray(this_ptr: *const ::string::String, s: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QString_operator_neq_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_operator_neq_char(this_ptr: *const ::string::String, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QString_prepend_QByteArray(this_ptr: *mut ::string::String, s: *const ::byte_array::ByteArray) -> *mut ::string::String;
  pub fn qt_core_c_QString_prepend_QChar(this_ptr: *mut ::string::String, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_prepend_QChar_int(this_ptr: *mut ::string::String, uc: *const ::char::Char, len: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_prepend_QLatin1String(this_ptr: *mut ::string::String, s: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_prepend_QString(this_ptr: *mut ::string::String, s: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_prepend_QStringRef(this_ptr: *mut ::string::String, s: *const ::string_ref::StringRef) -> *mut ::string::String;
  pub fn qt_core_c_QString_prepend_char(this_ptr: *mut ::string::String, s: *const ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_push_back_c(this_ptr: *mut ::string::String, c: *const ::char::Char);
  pub fn qt_core_c_QString_push_back_s(this_ptr: *mut ::string::String, s: *const ::string::String);
  pub fn qt_core_c_QString_push_front_c(this_ptr: *mut ::string::String, c: *const ::char::Char);
  pub fn qt_core_c_QString_push_front_s(this_ptr: *mut ::string::String, s: *const ::string::String);
  pub fn qt_core_c_QString_remove_c(this_ptr: *mut ::string::String, c: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_remove_c_cs(this_ptr: *mut ::string::String, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_remove_i_len(this_ptr: *mut ::string::String, i: ::libc::c_int, len: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_remove_re(this_ptr: *mut ::string::String, re: *const ::regular_expression::RegularExpression) -> *mut ::string::String;
  pub fn qt_core_c_QString_remove_rx(this_ptr: *mut ::string::String, rx: *const ::reg_exp::RegExp) -> *mut ::string::String;
  pub fn qt_core_c_QString_remove_s(this_ptr: *mut ::string::String, s: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_remove_s_cs(this_ptr: *mut ::string::String, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_repeated_to_output(this_ptr: *const ::string::String, times: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_replace_QChar_QChar(this_ptr: *mut ::string::String, before: *const ::char::Char, after: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_QChar_Qt_CaseSensitivity(this_ptr: *mut ::string::String, before: *const ::char::Char, after: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_QLatin1String(this_ptr: *mut ::string::String, c: *const ::char::Char, after: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_QLatin1String_Qt_CaseSensitivity(this_ptr: *mut ::string::String, c: *const ::char::Char, after: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_QString(this_ptr: *mut ::string::String, c: *const ::char::Char, after: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_QString_Qt_CaseSensitivity(this_ptr: *mut ::string::String, c: *const ::char::Char, after: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_int_QChar_int(this_ptr: *mut ::string::String, before: *const ::char::Char, blen: ::libc::c_int, after: *const ::char::Char, alen: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QChar_int_QChar_int_Qt_CaseSensitivity(this_ptr: *mut ::string::String, before: *const ::char::Char, blen: ::libc::c_int, after: *const ::char::Char, alen: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QLatin1String_QLatin1String(this_ptr: *mut ::string::String, before: *const ::latin1_string::Latin1String, after: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QLatin1String_QLatin1String_Qt_CaseSensitivity(this_ptr: *mut ::string::String, before: *const ::latin1_string::Latin1String, after: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QLatin1String_QString(this_ptr: *mut ::string::String, before: *const ::latin1_string::Latin1String, after: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QLatin1String_QString_Qt_CaseSensitivity(this_ptr: *mut ::string::String, before: *const ::latin1_string::Latin1String, after: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QRegExp_QString(this_ptr: *mut ::string::String, rx: *const ::reg_exp::RegExp, after: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QRegularExpression_QString(this_ptr: *mut ::string::String, re: *const ::regular_expression::RegularExpression, after: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QString_QLatin1String(this_ptr: *mut ::string::String, before: *const ::string::String, after: *const ::latin1_string::Latin1String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QString_QLatin1String_Qt_CaseSensitivity(this_ptr: *mut ::string::String, before: *const ::string::String, after: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QString_QString(this_ptr: *mut ::string::String, before: *const ::string::String, after: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_QString_QString_Qt_CaseSensitivity(this_ptr: *mut ::string::String, before: *const ::string::String, after: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_int_int_QChar(this_ptr: *mut ::string::String, i: ::libc::c_int, len: ::libc::c_int, after: *const ::char::Char) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_int_int_QChar_int(this_ptr: *mut ::string::String, i: ::libc::c_int, len: ::libc::c_int, s: *const ::char::Char, slen: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_replace_int_int_QString(this_ptr: *mut ::string::String, i: ::libc::c_int, len: ::libc::c_int, after: *const ::string::String) -> *mut ::string::String;
  pub fn qt_core_c_QString_reserve(this_ptr: *mut ::string::String, size: ::libc::c_int);
  pub fn qt_core_c_QString_resize_size(this_ptr: *mut ::string::String, size: ::libc::c_int);
  pub fn qt_core_c_QString_resize_size_fillChar(this_ptr: *mut ::string::String, size: ::libc::c_int, fillChar: *const ::char::Char);
  pub fn qt_core_c_QString_rightJustified_to_output_width(this_ptr: *const ::string::String, width: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_rightJustified_to_output_width_fill(this_ptr: *const ::string::String, width: ::libc::c_int, fill: *const ::char::Char, output: *mut ::string::String);
  pub fn qt_core_c_QString_rightJustified_to_output_width_fill_trunc(this_ptr: *const ::string::String, width: ::libc::c_int, fill: *const ::char::Char, trunc: bool, output: *mut ::string::String);
  pub fn qt_core_c_QString_rightRef_to_output(this_ptr: *const ::string::String, n: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QString_right_to_output(this_ptr: *const ::string::String, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_in_sep_start(this_ptr: *const ::string::String, in_sep: *const ::string::String, start: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_in_sep_start_end(this_ptr: *const ::string::String, in_sep: *const ::string::String, start: ::libc::c_int, end: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_in_sep_start_end_flags(this_ptr: *const ::string::String, in_sep: *const ::string::String, start: ::libc::c_int, end: ::libc::c_int, flags: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_re_start(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, start: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_re_start_end(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, start: ::libc::c_int, end: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_re_start_end_flags(this_ptr: *const ::string::String, re: *const ::regular_expression::RegularExpression, start: ::libc::c_int, end: ::libc::c_int, flags: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_reg_start(this_ptr: *const ::string::String, reg: *const ::reg_exp::RegExp, start: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_reg_start_end(this_ptr: *const ::string::String, reg: *const ::reg_exp::RegExp, start: ::libc::c_int, end: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_reg_start_end_flags(this_ptr: *const ::string::String, reg: *const ::reg_exp::RegExp, start: ::libc::c_int, end: ::libc::c_int, flags: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_sep_start(this_ptr: *const ::string::String, sep: *const ::char::Char, start: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_sep_start_end(this_ptr: *const ::string::String, sep: *const ::char::Char, start: ::libc::c_int, end: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QString_section_to_output_sep_start_end_flags(this_ptr: *const ::string::String, sep: *const ::char::Char, start: ::libc::c_int, end: ::libc::c_int, flags: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QString_setNum_double(this_ptr: *mut ::string::String, arg1: ::libc::c_double) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_double_char(this_ptr: *mut ::string::String, arg1: ::libc::c_double, f: ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_double_char_int(this_ptr: *mut ::string::String, arg1: ::libc::c_double, f: ::libc::c_char, prec: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_float(this_ptr: *mut ::string::String, arg1: ::libc::c_float) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_float_char(this_ptr: *mut ::string::String, arg1: ::libc::c_float, f: ::libc::c_char) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_float_char_int(this_ptr: *mut ::string::String, arg1: ::libc::c_float, f: ::libc::c_char, prec: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_int(this_ptr: *mut ::string::String, arg1: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_int_int(this_ptr: *mut ::string::String, arg1: ::libc::c_int, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_long(this_ptr: *mut ::string::String, arg1: ::libc::c_long) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_long_int(this_ptr: *mut ::string::String, arg1: ::libc::c_long, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_qlonglong(this_ptr: *mut ::string::String, arg1: i64) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_qlonglong_int(this_ptr: *mut ::string::String, arg1: i64, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_qulonglong(this_ptr: *mut ::string::String, arg1: u64) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_qulonglong_int(this_ptr: *mut ::string::String, arg1: u64, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_short(this_ptr: *mut ::string::String, arg1: ::libc::c_short) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_short_int(this_ptr: *mut ::string::String, arg1: ::libc::c_short, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_unsigned_int(this_ptr: *mut ::string::String, arg1: ::libc::c_uint) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_unsigned_int_int(this_ptr: *mut ::string::String, arg1: ::libc::c_uint, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_unsigned_long(this_ptr: *mut ::string::String, arg1: ::libc::c_ulong) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_unsigned_long_int(this_ptr: *mut ::string::String, arg1: ::libc::c_ulong, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_unsigned_short(this_ptr: *mut ::string::String, arg1: ::libc::c_ushort) -> *mut ::string::String;
  pub fn qt_core_c_QString_setNum_unsigned_short_int(this_ptr: *mut ::string::String, arg1: ::libc::c_ushort, base: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setRawData(this_ptr: *mut ::string::String, unicode: *const ::char::Char, size: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setUnicode(this_ptr: *mut ::string::String, unicode: *const ::char::Char, size: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_setUtf16(this_ptr: *mut ::string::String, utf16: *const ::libc::c_ushort, size: ::libc::c_int) -> *mut ::string::String;
  pub fn qt_core_c_QString_simplified_to_output(this_ptr: *mut ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_simplified_to_output_const(this_ptr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_size(this_ptr: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_splitRef_to_output_QChar(this_ptr: *const ::string::String, sep: *const ::char::Char, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QChar_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::char::Char, behavior: ::string::SplitBehavior, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QChar_QString_SplitBehavior_Qt_CaseSensitivity(this_ptr: *const ::string::String, sep: *const ::char::Char, behavior: ::string::SplitBehavior, cs: *const ::qt::CaseSensitivity, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QRegExp(this_ptr: *const ::string::String, sep: *const ::reg_exp::RegExp, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QRegExp_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::reg_exp::RegExp, behavior: ::string::SplitBehavior, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QRegularExpression(this_ptr: *const ::string::String, sep: *const ::regular_expression::RegularExpression, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QRegularExpression_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::regular_expression::RegularExpression, behavior: ::string::SplitBehavior, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QString(this_ptr: *const ::string::String, sep: *const ::string::String, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QString_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::string::String, behavior: ::string::SplitBehavior, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_splitRef_to_output_QString_QString_SplitBehavior_Qt_CaseSensitivity(this_ptr: *const ::string::String, sep: *const ::string::String, behavior: ::string::SplitBehavior, cs: *const ::qt::CaseSensitivity, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QString_split_to_output_QChar(this_ptr: *const ::string::String, sep: *const ::char::Char, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QChar_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::char::Char, behavior: ::string::SplitBehavior, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QChar_QString_SplitBehavior_Qt_CaseSensitivity(this_ptr: *const ::string::String, sep: *const ::char::Char, behavior: ::string::SplitBehavior, cs: *const ::qt::CaseSensitivity, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QRegExp(this_ptr: *const ::string::String, sep: *const ::reg_exp::RegExp, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QRegExp_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::reg_exp::RegExp, behavior: ::string::SplitBehavior, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QRegularExpression(this_ptr: *const ::string::String, sep: *const ::regular_expression::RegularExpression, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QRegularExpression_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::regular_expression::RegularExpression, behavior: ::string::SplitBehavior, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QString(this_ptr: *const ::string::String, sep: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QString_QString_SplitBehavior(this_ptr: *const ::string::String, sep: *const ::string::String, behavior: ::string::SplitBehavior, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_split_to_output_QString_QString_SplitBehavior_Qt_CaseSensitivity(this_ptr: *const ::string::String, sep: *const ::string::String, behavior: ::string::SplitBehavior, cs: *const ::qt::CaseSensitivity, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QString_squeeze(this_ptr: *mut ::string::String);
  pub fn qt_core_c_QString_startsWith_QChar(this_ptr: *const ::string::String, c: *const ::char::Char) -> bool;
  pub fn qt_core_c_QString_startsWith_QChar_Qt_CaseSensitivity(this_ptr: *const ::string::String, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_startsWith_QLatin1String(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QString_startsWith_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_startsWith_QString(this_ptr: *const ::string::String, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QString_startsWith_QStringRef(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QString_startsWith_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_startsWith_QString_Qt_CaseSensitivity(this_ptr: *const ::string::String, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QString_swap(this_ptr: *mut ::string::String, other: *mut ::string::String);
  pub fn qt_core_c_QString_toCaseFolded_to_output(this_ptr: *mut ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toCaseFolded_to_output_const(this_ptr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toDouble_no_args(this_ptr: *const ::string::String) -> ::libc::c_double;
  pub fn qt_core_c_QString_toDouble_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QString_toFloat_no_args(this_ptr: *const ::string::String) -> ::libc::c_float;
  pub fn qt_core_c_QString_toFloat_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_float;
  pub fn qt_core_c_QString_toHtmlEscaped_to_output(this_ptr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toInt_no_args(this_ptr: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QString_toInt_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QString_toInt_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QString_toLatin1_to_output(this_ptr: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QString_toLocal8Bit_to_output(this_ptr: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QString_toLongLong_no_args(this_ptr: *const ::string::String) -> i64;
  pub fn qt_core_c_QString_toLongLong_ok(this_ptr: *const ::string::String, ok: *mut bool) -> i64;
  pub fn qt_core_c_QString_toLongLong_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> i64;
  pub fn qt_core_c_QString_toLong_no_args(this_ptr: *const ::string::String) -> ::libc::c_long;
  pub fn qt_core_c_QString_toLong_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_long;
  pub fn qt_core_c_QString_toLong_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_long;
  pub fn qt_core_c_QString_toLower_to_output(this_ptr: *mut ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toLower_to_output_const(this_ptr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toShort_no_args(this_ptr: *const ::string::String) -> ::libc::c_short;
  pub fn qt_core_c_QString_toShort_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_short;
  pub fn qt_core_c_QString_toShort_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_short;
  pub fn qt_core_c_QString_toUInt_no_args(this_ptr: *const ::string::String) -> ::libc::c_uint;
  pub fn qt_core_c_QString_toUInt_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_uint;
  pub fn qt_core_c_QString_toUInt_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QString_toULongLong_no_args(this_ptr: *const ::string::String) -> u64;
  pub fn qt_core_c_QString_toULongLong_ok(this_ptr: *const ::string::String, ok: *mut bool) -> u64;
  pub fn qt_core_c_QString_toULongLong_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> u64;
  pub fn qt_core_c_QString_toULong_no_args(this_ptr: *const ::string::String) -> ::libc::c_ulong;
  pub fn qt_core_c_QString_toULong_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_ulong;
  pub fn qt_core_c_QString_toULong_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_ulong;
  pub fn qt_core_c_QString_toUShort_no_args(this_ptr: *const ::string::String) -> ::libc::c_ushort;
  pub fn qt_core_c_QString_toUShort_ok(this_ptr: *const ::string::String, ok: *mut bool) -> ::libc::c_ushort;
  pub fn qt_core_c_QString_toUShort_ok_base(this_ptr: *const ::string::String, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_ushort;
  pub fn qt_core_c_QString_toUcs4_to_output(this_ptr: *const ::string::String, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QString_toUpper_to_output(this_ptr: *mut ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toUpper_to_output_const(this_ptr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_toUtf8_to_output(this_ptr: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QString_toWCharArray(this_ptr: *const ::string::String, array: *mut ::libc::wchar_t) -> ::libc::c_int;
  pub fn qt_core_c_QString_trimmed_to_output(this_ptr: *mut ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_trimmed_to_output_const(this_ptr: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QString_truncate(this_ptr: *mut ::string::String, pos: ::libc::c_int);
  pub fn qt_core_c_QString_unicode(this_ptr: *const ::string::String) -> *const ::char::Char;
  pub fn qt_core_c_QString_utf16(this_ptr: *const ::string::String) -> *const ::libc::c_ushort;

  // Header: QStringList
  pub fn qt_core_c_QStringList_G_operator_add_to_output(one: *const ::list::ListString, other: *const ::string_list::StringList, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringList_G_static_cast_QList_QString_ptr(ptr: *mut ::string_list::StringList) -> *mut ::list::ListString;
  pub fn qt_core_c_QStringList_G_static_cast_QStringList_ptr(ptr: *mut ::list::ListString) -> *mut ::string_list::StringList;
  pub fn qt_core_c_QStringList_constructor_i(i: *const ::string::String, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringList_constructor_l(l: *const ::list::ListString, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringList_constructor_no_args(output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringList_contains_str(this_ptr: *const ::string_list::StringList, str: *const ::string::String) -> bool;
  pub fn qt_core_c_QStringList_contains_str_cs(this_ptr: *const ::string_list::StringList, str: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringList_destructor(this_ptr: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringList_indexOf_QRegExp_ref(this_ptr: *const ::string_list::StringList, rx: *mut ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_indexOf_QRegExp_ref_int(this_ptr: *const ::string_list::StringList, rx: *mut ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_indexOf_const_QRegExp_ref(this_ptr: *const ::string_list::StringList, rx: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_indexOf_const_QRegExp_ref_int(this_ptr: *const ::string_list::StringList, rx: *const ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_indexOf_const_QRegularExpression_ref(this_ptr: *const ::string_list::StringList, re: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_indexOf_const_QRegularExpression_ref_int(this_ptr: *const ::string_list::StringList, re: *const ::regular_expression::RegularExpression, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_lastIndexOf_QRegExp_ref(this_ptr: *const ::string_list::StringList, rx: *mut ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_lastIndexOf_QRegExp_ref_int(this_ptr: *const ::string_list::StringList, rx: *mut ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_lastIndexOf_const_QRegExp_ref(this_ptr: *const ::string_list::StringList, rx: *const ::reg_exp::RegExp) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_lastIndexOf_const_QRegExp_ref_int(this_ptr: *const ::string_list::StringList, rx: *const ::reg_exp::RegExp, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_lastIndexOf_const_QRegularExpression_ref(this_ptr: *const ::string_list::StringList, re: *const ::regular_expression::RegularExpression) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_lastIndexOf_const_QRegularExpression_ref_int(this_ptr: *const ::string_list::StringList, re: *const ::regular_expression::RegularExpression, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringList_operator_add_to_output(this_ptr: *const ::string_list::StringList, other: *const ::string_list::StringList, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringList_operator_assign(this_ptr: *mut ::string_list::StringList, other: *const ::list::ListString) -> *mut ::string_list::StringList;
  pub fn qt_core_c_QStringList_operator_shl_QList_QString(this_ptr: *mut ::string_list::StringList, l: *const ::list::ListString) -> *mut ::string_list::StringList;
  pub fn qt_core_c_QStringList_operator_shl_QString(this_ptr: *mut ::string_list::StringList, str: *const ::string::String) -> *mut ::string_list::StringList;
  pub fn qt_core_c_QStringList_operator_shl_QStringList(this_ptr: *mut ::string_list::StringList, l: *const ::string_list::StringList) -> *mut ::string_list::StringList;

  // Header: QStringListModel
  pub fn qt_core_c_QStringListModel_G_dynamic_cast_QStringListModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_G_dynamic_cast_QStringListModel_ptr_QAbstractListModel(ptr: *mut ::abstract_list_model::AbstractListModel) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_G_dynamic_cast_QStringListModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_G_static_cast_QAbstractItemModel_ptr(ptr: *mut ::string_list_model::StringListModel) -> *mut ::abstract_item_model::AbstractItemModel;
  pub fn qt_core_c_QStringListModel_G_static_cast_QAbstractListModel_ptr(ptr: *mut ::string_list_model::StringListModel) -> *mut ::abstract_list_model::AbstractListModel;
  pub fn qt_core_c_QStringListModel_G_static_cast_QObject_ptr(ptr: *mut ::string_list_model::StringListModel) -> *mut ::object::Object;
  pub fn qt_core_c_QStringListModel_G_static_cast_QStringListModel_ptr_QAbstractItemModel(ptr: *mut ::abstract_item_model::AbstractItemModel) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_G_static_cast_QStringListModel_ptr_QAbstractListModel(ptr: *mut ::abstract_list_model::AbstractListModel) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_G_static_cast_QStringListModel_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_data_to_output_index(this_ptr: *const ::string_list_model::StringListModel, index: *const ::model_index::ModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QStringListModel_data_to_output_index_role(this_ptr: *const ::string_list_model::StringListModel, index: *const ::model_index::ModelIndex, role: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QStringListModel_delete(this_ptr: *mut ::string_list_model::StringListModel);
  pub fn qt_core_c_QStringListModel_insertRows_row_count(this_ptr: *mut ::string_list_model::StringListModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QStringListModel_insertRows_row_count_parent(this_ptr: *mut ::string_list_model::StringListModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QStringListModel_metaObject(this_ptr: *const ::string_list_model::StringListModel) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QStringListModel_new_no_args() -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_new_parent(parent: *mut ::object::Object) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_new_strings(strings: *const ::string_list::StringList) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_new_strings_parent(strings: *const ::string_list::StringList, parent: *mut ::object::Object) -> *mut ::string_list_model::StringListModel;
  pub fn qt_core_c_QStringListModel_removeRows_row_count(this_ptr: *mut ::string_list_model::StringListModel, row: ::libc::c_int, count: ::libc::c_int) -> bool;
  pub fn qt_core_c_QStringListModel_removeRows_row_count_parent(this_ptr: *mut ::string_list_model::StringListModel, row: ::libc::c_int, count: ::libc::c_int, parent: *const ::model_index::ModelIndex) -> bool;
  pub fn qt_core_c_QStringListModel_rowCount_no_args(this_ptr: *const ::string_list_model::StringListModel) -> ::libc::c_int;
  pub fn qt_core_c_QStringListModel_rowCount_parent(this_ptr: *const ::string_list_model::StringListModel, parent: *const ::model_index::ModelIndex) -> ::libc::c_int;
  pub fn qt_core_c_QStringListModel_setData_index_value(this_ptr: *mut ::string_list_model::StringListModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QStringListModel_setData_index_value_role(this_ptr: *mut ::string_list_model::StringListModel, index: *const ::model_index::ModelIndex, value: *const ::variant::Variant, role: ::libc::c_int) -> bool;
  pub fn qt_core_c_QStringListModel_setStringList(this_ptr: *mut ::string_list_model::StringListModel, strings: *const ::string_list::StringList);
  pub fn qt_core_c_QStringListModel_sibling_to_output(this_ptr: *const ::string_list_model::StringListModel, row: ::libc::c_int, column: ::libc::c_int, idx: *const ::model_index::ModelIndex, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QStringListModel_sort_column(this_ptr: *mut ::string_list_model::StringListModel, column: ::libc::c_int);
  pub fn qt_core_c_QStringListModel_sort_column_order(this_ptr: *mut ::string_list_model::StringListModel, column: ::libc::c_int, order: *const ::qt::SortOrder);
  pub fn qt_core_c_QStringListModel_stringList_to_output(this_ptr: *const ::string_list_model::StringListModel, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QStringListModel_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QStringListModel_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QStringMatcher
  pub fn qt_core_c_QStringMatcher_constructor_no_args(output: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_constructor_other(other: *const ::string_matcher::StringMatcher, output: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_constructor_pattern(pattern: *const ::string::String, output: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_constructor_pattern_cs(pattern: *const ::string::String, cs: *const ::qt::CaseSensitivity, output: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_constructor_uc_len(uc: *const ::char::Char, len: ::libc::c_int, output: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_constructor_uc_len_cs(uc: *const ::char::Char, len: ::libc::c_int, cs: *const ::qt::CaseSensitivity, output: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_destructor(this_ptr: *mut ::string_matcher::StringMatcher);
  pub fn qt_core_c_QStringMatcher_indexIn_str(this_ptr: *const ::string_matcher::StringMatcher, str: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringMatcher_indexIn_str_from(this_ptr: *const ::string_matcher::StringMatcher, str: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringMatcher_indexIn_str_length(this_ptr: *const ::string_matcher::StringMatcher, str: *const ::char::Char, length: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringMatcher_indexIn_str_length_from(this_ptr: *const ::string_matcher::StringMatcher, str: *const ::char::Char, length: ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringMatcher_operator_assign(this_ptr: *mut ::string_matcher::StringMatcher, other: *const ::string_matcher::StringMatcher) -> *mut ::string_matcher::StringMatcher;
  pub fn qt_core_c_QStringMatcher_pattern_to_output(this_ptr: *const ::string_matcher::StringMatcher, output: *mut ::string::String);
  pub fn qt_core_c_QStringMatcher_setCaseSensitivity(this_ptr: *mut ::string_matcher::StringMatcher, cs: *const ::qt::CaseSensitivity);
  pub fn qt_core_c_QStringMatcher_setPattern(this_ptr: *mut ::string_matcher::StringMatcher, pattern: *const ::string::String);

  // Header: QStringRef
  pub fn qt_core_c_QStringRef_appendTo_to_output(this_ptr: *const ::string_ref::StringRef, string: *mut ::string::String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_at_to_output(this_ptr: *const ::string_ref::StringRef, i: ::libc::c_int, output: *mut ::char::Char);
  pub fn qt_core_c_QStringRef_begin(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_cbegin(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_cend(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_chop(this_ptr: *mut ::string_ref::StringRef, n: ::libc::c_int);
  pub fn qt_core_c_QStringRef_clear(this_ptr: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_compare_QByteArray(this_ptr: *const ::string_ref::StringRef, s: *const ::byte_array::ByteArray) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QByteArray_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::byte_array::ByteArray, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QLatin1String(this_ptr: *const ::string_ref::StringRef, s: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QString(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef(this_ptr: *const ::string_ref::StringRef, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_QLatin1String(s1: *const ::string_ref::StringRef, s2: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_QLatin1String_Qt_CaseSensitivity(s1: *const ::string_ref::StringRef, s2: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_QString(s1: *const ::string_ref::StringRef, s2: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_QStringRef_Qt_CaseSensitivity(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef, arg3: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_QString_Qt_CaseSensitivity(s1: *const ::string_ref::StringRef, s2: *const ::string::String, arg3: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_compare_QString_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_constBegin(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_constData(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_constEnd(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_constructor_no_args(output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_constructor_other(other: *const ::string_ref::StringRef, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_constructor_string(string: *const ::string::String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_constructor_string_position_size(string: *const ::string::String, position: ::libc::c_int, size: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_contains_QChar(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char) -> bool;
  pub fn qt_core_c_QStringRef_contains_QChar_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_contains_QLatin1String(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QStringRef_contains_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_contains_QString(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String) -> bool;
  pub fn qt_core_c_QStringRef_contains_QStringRef(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QStringRef_contains_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_contains_QString_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_count_QChar(this_ptr: *const ::string_ref::StringRef, c: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_count_QChar_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_count_QString(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_count_QStringRef(this_ptr: *const ::string_ref::StringRef, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_count_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_count_QString_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_count_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_data(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_destructor(this_ptr: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_end(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;
  pub fn qt_core_c_QStringRef_endsWith_QChar(this_ptr: *const ::string_ref::StringRef, c: *const ::char::Char) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QChar_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QLatin1String(this_ptr: *const ::string_ref::StringRef, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QString(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QStringRef(this_ptr: *const ::string_ref::StringRef, c: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, c: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_endsWith_QString_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_indexOf_QChar(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QChar_int(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QChar_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QLatin1String(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QLatin1String_int(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QLatin1String_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QString(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QStringRef(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QStringRef_int(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QStringRef_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QString_int(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_indexOf_QString_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_isEmpty(this_ptr: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QStringRef_isNull(this_ptr: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QStringRef_isRightToLeft(this_ptr: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QStringRef_lastIndexOf_QChar(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QChar_int(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QChar_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, ch: *const ::char::Char, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QLatin1String(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QLatin1String_int(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QLatin1String_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::latin1_string::Latin1String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QString(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QStringRef(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QStringRef_int(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QStringRef_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::string_ref::StringRef, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QString_int(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_lastIndexOf_QString_int_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, str: *const ::string::String, from: ::libc::c_int, cs: *const ::qt::CaseSensitivity) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_left_to_output(this_ptr: *const ::string_ref::StringRef, n: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_length(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_localeAwareCompare_QString(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_localeAwareCompare_QStringRef(this_ptr: *const ::string_ref::StringRef, s: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_localeAwareCompare_QStringRef_QString(s1: *const ::string_ref::StringRef, s2: *const ::string::String) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_localeAwareCompare_QStringRef_QStringRef(s1: *const ::string_ref::StringRef, s2: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_mid_to_output_pos(this_ptr: *const ::string_ref::StringRef, pos: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_mid_to_output_pos_n(this_ptr: *const ::string_ref::StringRef, pos: ::libc::c_int, n: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_operator_assign_other(this_ptr: *mut ::string_ref::StringRef, other: *const ::string_ref::StringRef) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QStringRef_operator_assign_string(this_ptr: *mut ::string_ref::StringRef, string: *const ::string::String) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QStringRef_operator_eq(this_ptr: *const ::string_ref::StringRef, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QStringRef_operator_ge(this_ptr: *const ::string_ref::StringRef, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QStringRef_operator_gt(this_ptr: *const ::string_ref::StringRef, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QStringRef_operator_index_to_output(this_ptr: *const ::string_ref::StringRef, i: ::libc::c_int, output: *mut ::char::Char);
  pub fn qt_core_c_QStringRef_operator_le(this_ptr: *const ::string_ref::StringRef, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QStringRef_operator_lt(this_ptr: *const ::string_ref::StringRef, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QStringRef_operator_neq(this_ptr: *const ::string_ref::StringRef, s: *const ::libc::c_char) -> bool;
  pub fn qt_core_c_QStringRef_position(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_right_to_output(this_ptr: *const ::string_ref::StringRef, n: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_size(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_split_to_output_QChar(this_ptr: *const ::string_ref::StringRef, sep: *const ::char::Char, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QStringRef_split_to_output_QChar_QString_SplitBehavior(this_ptr: *const ::string_ref::StringRef, sep: *const ::char::Char, behavior: *const ::string::SplitBehavior, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QStringRef_split_to_output_QChar_QString_SplitBehavior_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, sep: *const ::char::Char, behavior: *const ::string::SplitBehavior, cs: *const ::qt::CaseSensitivity, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QStringRef_split_to_output_QString(this_ptr: *const ::string_ref::StringRef, sep: *const ::string::String, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QStringRef_split_to_output_QString_QString_SplitBehavior(this_ptr: *const ::string_ref::StringRef, sep: *const ::string::String, behavior: *const ::string::SplitBehavior, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QStringRef_split_to_output_QString_QString_SplitBehavior_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, sep: *const ::string::String, behavior: *const ::string::SplitBehavior, cs: *const ::qt::CaseSensitivity, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QStringRef_startsWith_QChar(this_ptr: *const ::string_ref::StringRef, c: *const ::char::Char) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QChar_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, c: *const ::char::Char, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QLatin1String(this_ptr: *const ::string_ref::StringRef, s: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QLatin1String_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::latin1_string::Latin1String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QString(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QStringRef(this_ptr: *const ::string_ref::StringRef, c: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QStringRef_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, c: *const ::string_ref::StringRef, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_startsWith_QString_Qt_CaseSensitivity(this_ptr: *const ::string_ref::StringRef, s: *const ::string::String, cs: *const ::qt::CaseSensitivity) -> bool;
  pub fn qt_core_c_QStringRef_string(this_ptr: *const ::string_ref::StringRef) -> *const ::string::String;
  pub fn qt_core_c_QStringRef_toDouble_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_double;
  pub fn qt_core_c_QStringRef_toDouble_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QStringRef_toFloat_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_float;
  pub fn qt_core_c_QStringRef_toFloat_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_float;
  pub fn qt_core_c_QStringRef_toInt_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_toInt_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_toInt_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QStringRef_toLatin1_to_output(this_ptr: *const ::string_ref::StringRef, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QStringRef_toLocal8Bit_to_output(this_ptr: *const ::string_ref::StringRef, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QStringRef_toLongLong_no_args(this_ptr: *const ::string_ref::StringRef) -> i64;
  pub fn qt_core_c_QStringRef_toLongLong_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> i64;
  pub fn qt_core_c_QStringRef_toLongLong_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> i64;
  pub fn qt_core_c_QStringRef_toLong_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_long;
  pub fn qt_core_c_QStringRef_toLong_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_long;
  pub fn qt_core_c_QStringRef_toLong_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_long;
  pub fn qt_core_c_QStringRef_toShort_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_short;
  pub fn qt_core_c_QStringRef_toShort_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_short;
  pub fn qt_core_c_QStringRef_toShort_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_short;
  pub fn qt_core_c_QStringRef_toString_to_output(this_ptr: *const ::string_ref::StringRef, output: *mut ::string::String);
  pub fn qt_core_c_QStringRef_toUInt_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_uint;
  pub fn qt_core_c_QStringRef_toUInt_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_uint;
  pub fn qt_core_c_QStringRef_toUInt_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QStringRef_toULongLong_no_args(this_ptr: *const ::string_ref::StringRef) -> u64;
  pub fn qt_core_c_QStringRef_toULongLong_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> u64;
  pub fn qt_core_c_QStringRef_toULongLong_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> u64;
  pub fn qt_core_c_QStringRef_toULong_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_ulong;
  pub fn qt_core_c_QStringRef_toULong_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_ulong;
  pub fn qt_core_c_QStringRef_toULong_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_ulong;
  pub fn qt_core_c_QStringRef_toUShort_no_args(this_ptr: *const ::string_ref::StringRef) -> ::libc::c_ushort;
  pub fn qt_core_c_QStringRef_toUShort_ok(this_ptr: *const ::string_ref::StringRef, ok: *mut bool) -> ::libc::c_ushort;
  pub fn qt_core_c_QStringRef_toUShort_ok_base(this_ptr: *const ::string_ref::StringRef, ok: *mut bool, base: ::libc::c_int) -> ::libc::c_ushort;
  pub fn qt_core_c_QStringRef_toUcs4_to_output(this_ptr: *const ::string_ref::StringRef, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QStringRef_toUtf8_to_output(this_ptr: *const ::string_ref::StringRef, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QStringRef_trimmed_to_output(this_ptr: *const ::string_ref::StringRef, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QStringRef_truncate(this_ptr: *mut ::string_ref::StringRef, pos: ::libc::c_int);
  pub fn qt_core_c_QStringRef_unicode(this_ptr: *const ::string_ref::StringRef) -> *const ::char::Char;

  // Header: QSysInfo
  pub fn qt_core_c_QSysInfo_buildAbi_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_buildCpuArchitecture_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_currentCpuArchitecture_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_delete(this_ptr: *mut ::sys_info::SysInfo);
  pub fn qt_core_c_QSysInfo_kernelType_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_kernelVersion_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_macVersion() -> ::sys_info::MacVersion;
  pub fn qt_core_c_QSysInfo_machineHostName_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_prettyProductName_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_productType_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_productVersion_to_output(output: *mut ::string::String);
  pub fn qt_core_c_QSysInfo_windowsVersion() -> ::sys_info::WinVersion;

  // Header: QSystemSemaphore
  pub fn qt_core_c_QSystemSemaphore_acquire(this_ptr: *mut ::system_semaphore::SystemSemaphore) -> bool;
  pub fn qt_core_c_QSystemSemaphore_constructor_key(key: *const ::string::String, output: *mut ::system_semaphore::SystemSemaphore);
  pub fn qt_core_c_QSystemSemaphore_constructor_key_initialValue(key: *const ::string::String, initialValue: ::libc::c_int, output: *mut ::system_semaphore::SystemSemaphore);
  pub fn qt_core_c_QSystemSemaphore_constructor_key_initialValue_mode(key: *const ::string::String, initialValue: ::libc::c_int, mode: ::system_semaphore::AccessMode, output: *mut ::system_semaphore::SystemSemaphore);
  pub fn qt_core_c_QSystemSemaphore_destructor(this_ptr: *mut ::system_semaphore::SystemSemaphore);
  pub fn qt_core_c_QSystemSemaphore_error(this_ptr: *const ::system_semaphore::SystemSemaphore) -> ::system_semaphore::SystemSemaphoreError;
  pub fn qt_core_c_QSystemSemaphore_errorString_to_output(this_ptr: *const ::system_semaphore::SystemSemaphore, output: *mut ::string::String);
  pub fn qt_core_c_QSystemSemaphore_key_to_output(this_ptr: *const ::system_semaphore::SystemSemaphore, output: *mut ::string::String);
  pub fn qt_core_c_QSystemSemaphore_release_n(this_ptr: *mut ::system_semaphore::SystemSemaphore, n: ::libc::c_int) -> bool;
  pub fn qt_core_c_QSystemSemaphore_release_no_args(this_ptr: *mut ::system_semaphore::SystemSemaphore) -> bool;
  pub fn qt_core_c_QSystemSemaphore_setKey_key(this_ptr: *mut ::system_semaphore::SystemSemaphore, key: *const ::string::String);
  pub fn qt_core_c_QSystemSemaphore_setKey_key_initialValue(this_ptr: *mut ::system_semaphore::SystemSemaphore, key: *const ::string::String, initialValue: ::libc::c_int);
  pub fn qt_core_c_QSystemSemaphore_setKey_key_initialValue_mode(this_ptr: *mut ::system_semaphore::SystemSemaphore, key: *const ::string::String, initialValue: ::libc::c_int, mode: ::system_semaphore::AccessMode);

  // Header: QTemporaryDir
  pub fn qt_core_c_QTemporaryDir_autoRemove(this_ptr: *const ::temporary_dir::TemporaryDir) -> bool;
  pub fn qt_core_c_QTemporaryDir_constructor_no_args(output: *mut ::temporary_dir::TemporaryDir);
  pub fn qt_core_c_QTemporaryDir_constructor_templateName(templateName: *const ::string::String, output: *mut ::temporary_dir::TemporaryDir);
  pub fn qt_core_c_QTemporaryDir_destructor(this_ptr: *mut ::temporary_dir::TemporaryDir);
  pub fn qt_core_c_QTemporaryDir_errorString_to_output(this_ptr: *const ::temporary_dir::TemporaryDir, output: *mut ::string::String);
  pub fn qt_core_c_QTemporaryDir_filePath_to_output(this_ptr: *const ::temporary_dir::TemporaryDir, fileName: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QTemporaryDir_isValid(this_ptr: *const ::temporary_dir::TemporaryDir) -> bool;
  pub fn qt_core_c_QTemporaryDir_path_to_output(this_ptr: *const ::temporary_dir::TemporaryDir, output: *mut ::string::String);
  pub fn qt_core_c_QTemporaryDir_remove(this_ptr: *mut ::temporary_dir::TemporaryDir) -> bool;
  pub fn qt_core_c_QTemporaryDir_setAutoRemove(this_ptr: *mut ::temporary_dir::TemporaryDir, b: bool);

  // Header: QTemporaryFile
  pub fn qt_core_c_QTemporaryFile_G_dynamic_cast_QTemporaryFile_ptr_QFile(ptr: *mut ::file::File) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_dynamic_cast_QTemporaryFile_ptr_QFileDevice(ptr: *mut ::file_device::FileDevice) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_dynamic_cast_QTemporaryFile_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_dynamic_cast_QTemporaryFile_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QFileDevice_ptr(ptr: *mut ::temporary_file::TemporaryFile) -> *mut ::file_device::FileDevice;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QFile_ptr(ptr: *mut ::temporary_file::TemporaryFile) -> *mut ::file::File;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QIODevice_ptr(ptr: *mut ::temporary_file::TemporaryFile) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QObject_ptr(ptr: *mut ::temporary_file::TemporaryFile) -> *mut ::object::Object;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QTemporaryFile_ptr_QFile(ptr: *mut ::file::File) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QTemporaryFile_ptr_QFileDevice(ptr: *mut ::file_device::FileDevice) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QTemporaryFile_ptr_QIODevice(ptr: *mut ::io_device::IODevice) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_G_static_cast_QTemporaryFile_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_autoRemove(this_ptr: *const ::temporary_file::TemporaryFile) -> bool;
  pub fn qt_core_c_QTemporaryFile_createLocalFile_file(file: *mut ::file::File) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_createLocalFile_fileName(fileName: *const ::string::String) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_createNativeFile_file(file: *mut ::file::File) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_createNativeFile_fileName(fileName: *const ::string::String) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_delete(this_ptr: *mut ::temporary_file::TemporaryFile);
  pub fn qt_core_c_QTemporaryFile_fileName_to_output(this_ptr: *const ::temporary_file::TemporaryFile, output: *mut ::string::String);
  pub fn qt_core_c_QTemporaryFile_fileTemplate_to_output(this_ptr: *const ::temporary_file::TemporaryFile, output: *mut ::string::String);
  pub fn qt_core_c_QTemporaryFile_metaObject(this_ptr: *const ::temporary_file::TemporaryFile) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QTemporaryFile_new_no_args() -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_new_parent(parent: *mut ::object::Object) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_new_templateName(templateName: *const ::string::String) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_new_templateName_parent(templateName: *const ::string::String, parent: *mut ::object::Object) -> *mut ::temporary_file::TemporaryFile;
  pub fn qt_core_c_QTemporaryFile_open(this_ptr: *mut ::temporary_file::TemporaryFile) -> bool;
  pub fn qt_core_c_QTemporaryFile_setAutoRemove(this_ptr: *mut ::temporary_file::TemporaryFile, b: bool);
  pub fn qt_core_c_QTemporaryFile_setFileTemplate(this_ptr: *mut ::temporary_file::TemporaryFile, name: *const ::string::String);
  pub fn qt_core_c_QTemporaryFile_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTemporaryFile_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QTextBoundaryFinder
  pub fn qt_core_c_QTextBoundaryFinder_boundaryReasons(this_ptr: *const ::text_boundary_finder::TextBoundaryFinder) -> ::libc::c_uint;
  pub fn qt_core_c_QTextBoundaryFinder_constructor_no_args(output: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_constructor_other(other: *const ::text_boundary_finder::TextBoundaryFinder, output: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_constructor_type_chars_length(type_: ::text_boundary_finder::BoundaryType, chars: *const ::char::Char, length: ::libc::c_int, output: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_constructor_type_chars_length_buffer(type_: ::text_boundary_finder::BoundaryType, chars: *const ::char::Char, length: ::libc::c_int, buffer: *mut ::libc::c_uchar, output: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_constructor_type_chars_length_buffer_bufferSize(type_: ::text_boundary_finder::BoundaryType, chars: *const ::char::Char, length: ::libc::c_int, buffer: *mut ::libc::c_uchar, bufferSize: ::libc::c_int, output: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_constructor_type_string(type_: ::text_boundary_finder::BoundaryType, string: *const ::string::String, output: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_destructor(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_isAtBoundary(this_ptr: *const ::text_boundary_finder::TextBoundaryFinder) -> bool;
  pub fn qt_core_c_QTextBoundaryFinder_isValid(this_ptr: *const ::text_boundary_finder::TextBoundaryFinder) -> bool;
  pub fn qt_core_c_QTextBoundaryFinder_operator_assign(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder, other: *const ::text_boundary_finder::TextBoundaryFinder) -> *mut ::text_boundary_finder::TextBoundaryFinder;
  pub fn qt_core_c_QTextBoundaryFinder_position(this_ptr: *const ::text_boundary_finder::TextBoundaryFinder) -> ::libc::c_int;
  pub fn qt_core_c_QTextBoundaryFinder_setPosition(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder, position: ::libc::c_int);
  pub fn qt_core_c_QTextBoundaryFinder_string_to_output(this_ptr: *const ::text_boundary_finder::TextBoundaryFinder, output: *mut ::string::String);
  pub fn qt_core_c_QTextBoundaryFinder_toEnd(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_toNextBoundary(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder) -> ::libc::c_int;
  pub fn qt_core_c_QTextBoundaryFinder_toPreviousBoundary(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder) -> ::libc::c_int;
  pub fn qt_core_c_QTextBoundaryFinder_toStart(this_ptr: *mut ::text_boundary_finder::TextBoundaryFinder);
  pub fn qt_core_c_QTextBoundaryFinder_type(this_ptr: *const ::text_boundary_finder::TextBoundaryFinder) -> ::text_boundary_finder::BoundaryType;

  // Header: QTextCodec
  pub fn qt_core_c_QTextCodec_ConverterState_d(this_ptr: *const ::text_codec::ConverterState) -> *mut ::libc::c_void;
  pub fn qt_core_c_QTextCodec_ConverterState_delete(this_ptr: *mut ::text_codec::ConverterState);
  pub fn qt_core_c_QTextCodec_ConverterState_flags(this_ptr: *const ::text_codec::ConverterState) -> ::libc::c_uint;
  pub fn qt_core_c_QTextCodec_ConverterState_invalidChars(this_ptr: *const ::text_codec::ConverterState) -> ::libc::c_int;
  pub fn qt_core_c_QTextCodec_ConverterState_new_f(f: ::libc::c_uint) -> *mut ::text_codec::ConverterState;
  pub fn qt_core_c_QTextCodec_ConverterState_new_no_args() -> *mut ::text_codec::ConverterState;
  pub fn qt_core_c_QTextCodec_ConverterState_remainingChars(this_ptr: *const ::text_codec::ConverterState) -> ::libc::c_int;
  pub fn qt_core_c_QTextCodec_ConverterState_set_d(this_ptr: *mut ::text_codec::ConverterState, value: *mut ::libc::c_void);
  pub fn qt_core_c_QTextCodec_ConverterState_set_flags(this_ptr: *mut ::text_codec::ConverterState, value: ::libc::c_uint);
  pub fn qt_core_c_QTextCodec_ConverterState_set_invalidChars(this_ptr: *mut ::text_codec::ConverterState, value: ::libc::c_int);
  pub fn qt_core_c_QTextCodec_ConverterState_set_remainingChars(this_ptr: *mut ::text_codec::ConverterState, value: ::libc::c_int);
  pub fn qt_core_c_QTextCodec_aliases_to_output(this_ptr: *const ::text_codec::TextCodec, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QTextCodec_availableCodecs_to_output(output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QTextCodec_availableMibs_to_output(output: *mut ::list::ListCInt);
  pub fn qt_core_c_QTextCodec_canEncode_QChar(this_ptr: *const ::text_codec::TextCodec, arg1: *const ::char::Char) -> bool;
  pub fn qt_core_c_QTextCodec_canEncode_QString(this_ptr: *const ::text_codec::TextCodec, arg1: *const ::string::String) -> bool;
  pub fn qt_core_c_QTextCodec_codecForHtml_ba(ba: *const ::byte_array::ByteArray) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForHtml_ba_defaultCodec(ba: *const ::byte_array::ByteArray, defaultCodec: *mut ::text_codec::TextCodec) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForLocale() -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForMib(mib: ::libc::c_int) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForName_QByteArray(name: *const ::byte_array::ByteArray) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForName_char(name: *const ::libc::c_char) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForUtfText_ba(ba: *const ::byte_array::ByteArray) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_codecForUtfText_ba_defaultCodec(ba: *const ::byte_array::ByteArray, defaultCodec: *mut ::text_codec::TextCodec) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextCodec_fromUnicode_to_output_in_length(this_ptr: *const ::text_codec::TextCodec, in_: *const ::char::Char, length: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTextCodec_fromUnicode_to_output_in_length_state(this_ptr: *const ::text_codec::TextCodec, in_: *const ::char::Char, length: ::libc::c_int, state: *mut ::text_codec::ConverterState, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTextCodec_fromUnicode_to_output_uc(this_ptr: *const ::text_codec::TextCodec, uc: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTextCodec_makeDecoder_flags(this_ptr: *const ::text_codec::TextCodec, flags: ::libc::c_uint) -> *mut ::text_decoder::TextDecoder;
  pub fn qt_core_c_QTextCodec_makeDecoder_no_args(this_ptr: *const ::text_codec::TextCodec) -> *mut ::text_decoder::TextDecoder;
  pub fn qt_core_c_QTextCodec_makeEncoder_flags(this_ptr: *const ::text_codec::TextCodec, flags: ::libc::c_uint) -> *mut ::text_encoder::TextEncoder;
  pub fn qt_core_c_QTextCodec_makeEncoder_no_args(this_ptr: *const ::text_codec::TextCodec) -> *mut ::text_encoder::TextEncoder;
  pub fn qt_core_c_QTextCodec_mibEnum(this_ptr: *const ::text_codec::TextCodec) -> ::libc::c_int;
  pub fn qt_core_c_QTextCodec_name_to_output(this_ptr: *const ::text_codec::TextCodec, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTextCodec_setCodecForLocale(c: *mut ::text_codec::TextCodec);
  pub fn qt_core_c_QTextCodec_toUnicode_to_output_arg1(this_ptr: *const ::text_codec::TextCodec, arg1: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QTextCodec_toUnicode_to_output_chars(this_ptr: *const ::text_codec::TextCodec, chars: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QTextCodec_toUnicode_to_output_in_length(this_ptr: *const ::text_codec::TextCodec, in_: *const ::libc::c_char, length: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTextCodec_toUnicode_to_output_in_length_state(this_ptr: *const ::text_codec::TextCodec, in_: *const ::libc::c_char, length: ::libc::c_int, state: *mut ::text_codec::ConverterState, output: *mut ::string::String);

  // Header: QTextDecoder
  pub fn qt_core_c_QTextDecoder_delete(this_ptr: *mut ::text_decoder::TextDecoder);
  pub fn qt_core_c_QTextDecoder_hasFailure(this_ptr: *const ::text_decoder::TextDecoder) -> bool;
  pub fn qt_core_c_QTextDecoder_new(codec: *const ::text_codec::TextCodec) -> *mut ::text_decoder::TextDecoder;
  pub fn qt_core_c_QTextDecoder_toUnicode(this_ptr: *mut ::text_decoder::TextDecoder, target: *mut ::string::String, chars: *const ::libc::c_char, len: ::libc::c_int);
  pub fn qt_core_c_QTextDecoder_toUnicode_to_output_ba(this_ptr: *mut ::text_decoder::TextDecoder, ba: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QTextDecoder_toUnicode_to_output_chars_len(this_ptr: *mut ::text_decoder::TextDecoder, chars: *const ::libc::c_char, len: ::libc::c_int, output: *mut ::string::String);

  // Header: QTextEncoder
  pub fn qt_core_c_QTextEncoder_delete(this_ptr: *mut ::text_encoder::TextEncoder);
  pub fn qt_core_c_QTextEncoder_fromUnicode_to_output_str(this_ptr: *mut ::text_encoder::TextEncoder, str: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTextEncoder_fromUnicode_to_output_uc_len(this_ptr: *mut ::text_encoder::TextEncoder, uc: *const ::char::Char, len: ::libc::c_int, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTextEncoder_hasFailure(this_ptr: *const ::text_encoder::TextEncoder) -> bool;
  pub fn qt_core_c_QTextEncoder_new(codec: *const ::text_codec::TextCodec) -> *mut ::text_encoder::TextEncoder;

  // Header: QTextStream
  pub fn qt_core_c_QTextStream_G_bin(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_bom(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_center(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_dec(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_endl(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_fixed(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_flush(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_forcepoint(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_forcesign(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_hex(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_left(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_lowercasebase(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_lowercasedigits(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_noforcepoint(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_noforcesign(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_noshowbase(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_oct(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_operator_shl(s: *mut ::text_stream::TextStream, m: *const ::text_stream_manipulator::TextStreamManipulator) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_qSetFieldWidth_to_output(width: ::libc::c_int, output: *mut ::text_stream_manipulator::TextStreamManipulator);
  pub fn qt_core_c_QTextStream_G_qSetPadChar_to_output(ch: *const ::char::Char, output: *mut ::text_stream_manipulator::TextStreamManipulator);
  pub fn qt_core_c_QTextStream_G_qSetRealNumberPrecision_to_output(precision: ::libc::c_int, output: *mut ::text_stream_manipulator::TextStreamManipulator);
  pub fn qt_core_c_QTextStream_G_reset(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_right(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_scientific(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_showbase(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_uppercasebase(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_uppercasedigits(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_G_ws(s: *mut ::text_stream::TextStream) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_atEnd(this_ptr: *const ::text_stream::TextStream) -> bool;
  pub fn qt_core_c_QTextStream_autoDetectUnicode(this_ptr: *const ::text_stream::TextStream) -> bool;
  pub fn qt_core_c_QTextStream_codec(this_ptr: *const ::text_stream::TextStream) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QTextStream_delete(this_ptr: *mut ::text_stream::TextStream);
  pub fn qt_core_c_QTextStream_device(this_ptr: *const ::text_stream::TextStream) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QTextStream_fieldAlignment(this_ptr: *const ::text_stream::TextStream) -> ::text_stream::FieldAlignment;
  pub fn qt_core_c_QTextStream_fieldWidth(this_ptr: *const ::text_stream::TextStream) -> ::libc::c_int;
  pub fn qt_core_c_QTextStream_flush(this_ptr: *mut ::text_stream::TextStream);
  pub fn qt_core_c_QTextStream_generateByteOrderMark(this_ptr: *const ::text_stream::TextStream) -> bool;
  pub fn qt_core_c_QTextStream_integerBase(this_ptr: *const ::text_stream::TextStream) -> ::libc::c_int;
  pub fn qt_core_c_QTextStream_locale_to_output(this_ptr: *const ::text_stream::TextStream, output: *mut ::locale::Locale);
  pub fn qt_core_c_QTextStream_new_device(device: *mut ::io_device::IODevice) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_new_no_args() -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_numberFlags(this_ptr: *const ::text_stream::TextStream) -> ::libc::c_uint;
  pub fn qt_core_c_QTextStream_operator_shl_QByteArray_array(this_ptr: *mut ::text_stream::TextStream, array: *const ::byte_array::ByteArray) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_QChar_ch(this_ptr: *mut ::text_stream::TextStream, ch: *const ::char::Char) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_QLatin1String_s(this_ptr: *mut ::text_stream::TextStream, s: *const ::latin1_string::Latin1String) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_QStringRef_s(this_ptr: *mut ::text_stream::TextStream, s: *const ::string_ref::StringRef) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_QString_s(this_ptr: *mut ::text_stream::TextStream, s: *const ::string::String) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_char_c(this_ptr: *mut ::text_stream::TextStream, c: *const ::libc::c_char) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_char_ch(this_ptr: *mut ::text_stream::TextStream, ch: ::libc::c_char) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_double_f(this_ptr: *mut ::text_stream::TextStream, f: ::libc::c_double) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_float_f(this_ptr: *mut ::text_stream::TextStream, f: ::libc::c_float) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_int_i(this_ptr: *mut ::text_stream::TextStream, i: ::libc::c_int) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_long_i(this_ptr: *mut ::text_stream::TextStream, i: ::libc::c_long) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_qlonglong_i(this_ptr: *mut ::text_stream::TextStream, i: i64) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_qulonglong_i(this_ptr: *mut ::text_stream::TextStream, i: u64) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_short_i(this_ptr: *mut ::text_stream::TextStream, i: ::libc::c_short) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_unsigned_int_i(this_ptr: *mut ::text_stream::TextStream, i: ::libc::c_uint) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_unsigned_long_i(this_ptr: *mut ::text_stream::TextStream, i: ::libc::c_ulong) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_unsigned_short_i(this_ptr: *mut ::text_stream::TextStream, i: ::libc::c_ushort) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shl_void_ptr(this_ptr: *mut ::text_stream::TextStream, ptr: *const ::libc::c_void) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_QByteArray_array(this_ptr: *mut ::text_stream::TextStream, array: *mut ::byte_array::ByteArray) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_QChar_ch(this_ptr: *mut ::text_stream::TextStream, ch: *mut ::char::Char) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_QString_s(this_ptr: *mut ::text_stream::TextStream, s: *mut ::string::String) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_char_c(this_ptr: *mut ::text_stream::TextStream, c: *mut ::libc::c_char) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_char_ch(this_ptr: *mut ::text_stream::TextStream, ch: *mut ::libc::c_char) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_double_f(this_ptr: *mut ::text_stream::TextStream, f: *mut ::libc::c_double) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_float_f(this_ptr: *mut ::text_stream::TextStream, f: *mut ::libc::c_float) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_int_i(this_ptr: *mut ::text_stream::TextStream, i: *mut ::libc::c_int) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_long_i(this_ptr: *mut ::text_stream::TextStream, i: *mut ::libc::c_long) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_qlonglong_i(this_ptr: *mut ::text_stream::TextStream, i: *mut i64) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_qulonglong_i(this_ptr: *mut ::text_stream::TextStream, i: *mut u64) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_short_i(this_ptr: *mut ::text_stream::TextStream, i: *mut ::libc::c_short) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_unsigned_int_i(this_ptr: *mut ::text_stream::TextStream, i: *mut ::libc::c_uint) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_unsigned_long_i(this_ptr: *mut ::text_stream::TextStream, i: *mut ::libc::c_ulong) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_operator_shr_unsigned_short_i(this_ptr: *mut ::text_stream::TextStream, i: *mut ::libc::c_ushort) -> *mut ::text_stream::TextStream;
  pub fn qt_core_c_QTextStream_padChar_to_output(this_ptr: *const ::text_stream::TextStream, output: *mut ::char::Char);
  pub fn qt_core_c_QTextStream_pos(this_ptr: *const ::text_stream::TextStream) -> i64;
  pub fn qt_core_c_QTextStream_readAll_to_output(this_ptr: *mut ::text_stream::TextStream, output: *mut ::string::String);
  pub fn qt_core_c_QTextStream_readLineInto_line(this_ptr: *mut ::text_stream::TextStream, line: *mut ::string::String) -> bool;
  pub fn qt_core_c_QTextStream_readLineInto_line_maxlen(this_ptr: *mut ::text_stream::TextStream, line: *mut ::string::String, maxlen: i64) -> bool;
  pub fn qt_core_c_QTextStream_readLine_to_output_maxlen(this_ptr: *mut ::text_stream::TextStream, maxlen: i64, output: *mut ::string::String);
  pub fn qt_core_c_QTextStream_readLine_to_output_no_args(this_ptr: *mut ::text_stream::TextStream, output: *mut ::string::String);
  pub fn qt_core_c_QTextStream_read_to_output(this_ptr: *mut ::text_stream::TextStream, maxlen: i64, output: *mut ::string::String);
  pub fn qt_core_c_QTextStream_realNumberNotation(this_ptr: *const ::text_stream::TextStream) -> ::text_stream::RealNumberNotation;
  pub fn qt_core_c_QTextStream_realNumberPrecision(this_ptr: *const ::text_stream::TextStream) -> ::libc::c_int;
  pub fn qt_core_c_QTextStream_reset(this_ptr: *mut ::text_stream::TextStream);
  pub fn qt_core_c_QTextStream_resetStatus(this_ptr: *mut ::text_stream::TextStream);
  pub fn qt_core_c_QTextStream_seek(this_ptr: *mut ::text_stream::TextStream, pos: i64) -> bool;
  pub fn qt_core_c_QTextStream_setAutoDetectUnicode(this_ptr: *mut ::text_stream::TextStream, enabled: bool);
  pub fn qt_core_c_QTextStream_setCodec_codec(this_ptr: *mut ::text_stream::TextStream, codec: *mut ::text_codec::TextCodec);
  pub fn qt_core_c_QTextStream_setCodec_codecName(this_ptr: *mut ::text_stream::TextStream, codecName: *const ::libc::c_char);
  pub fn qt_core_c_QTextStream_setDevice(this_ptr: *mut ::text_stream::TextStream, device: *mut ::io_device::IODevice);
  pub fn qt_core_c_QTextStream_setFieldAlignment(this_ptr: *mut ::text_stream::TextStream, alignment: ::text_stream::FieldAlignment);
  pub fn qt_core_c_QTextStream_setFieldWidth(this_ptr: *mut ::text_stream::TextStream, width: ::libc::c_int);
  pub fn qt_core_c_QTextStream_setGenerateByteOrderMark(this_ptr: *mut ::text_stream::TextStream, generate: bool);
  pub fn qt_core_c_QTextStream_setIntegerBase(this_ptr: *mut ::text_stream::TextStream, base: ::libc::c_int);
  pub fn qt_core_c_QTextStream_setLocale(this_ptr: *mut ::text_stream::TextStream, locale: *const ::locale::Locale);
  pub fn qt_core_c_QTextStream_setNumberFlags(this_ptr: *mut ::text_stream::TextStream, flags: ::libc::c_uint);
  pub fn qt_core_c_QTextStream_setPadChar(this_ptr: *mut ::text_stream::TextStream, ch: *const ::char::Char);
  pub fn qt_core_c_QTextStream_setRealNumberNotation(this_ptr: *mut ::text_stream::TextStream, notation: ::text_stream::RealNumberNotation);
  pub fn qt_core_c_QTextStream_setRealNumberPrecision(this_ptr: *mut ::text_stream::TextStream, precision: ::libc::c_int);
  pub fn qt_core_c_QTextStream_setStatus(this_ptr: *mut ::text_stream::TextStream, status: ::text_stream::Status);
  pub fn qt_core_c_QTextStream_skipWhiteSpace(this_ptr: *mut ::text_stream::TextStream);
  pub fn qt_core_c_QTextStream_status(this_ptr: *const ::text_stream::TextStream) -> ::text_stream::Status;
  pub fn qt_core_c_QTextStream_string(this_ptr: *const ::text_stream::TextStream) -> *mut ::string::String;

  // Header: QTextStreamManipulator
  pub fn qt_core_c_QTextStreamManipulator_destructor(this_ptr: *mut ::text_stream_manipulator::TextStreamManipulator);
  pub fn qt_core_c_QTextStreamManipulator_exec(this_ptr: *mut ::text_stream_manipulator::TextStreamManipulator, s: *mut ::text_stream::TextStream);

  // Header: QThread
  pub fn qt_core_c_QThread_G_dynamic_cast_QThread_ptr(ptr: *mut ::object::Object) -> *mut ::thread::Thread;
  pub fn qt_core_c_QThread_G_static_cast_QObject_ptr(ptr: *mut ::thread::Thread) -> *mut ::object::Object;
  pub fn qt_core_c_QThread_G_static_cast_QThread_ptr(ptr: *mut ::object::Object) -> *mut ::thread::Thread;
  pub fn qt_core_c_QThread_currentThread() -> *mut ::thread::Thread;
  pub fn qt_core_c_QThread_delete(this_ptr: *mut ::thread::Thread);
  pub fn qt_core_c_QThread_event(this_ptr: *mut ::thread::Thread, event: *mut ::event::Event) -> bool;
  pub fn qt_core_c_QThread_eventDispatcher(this_ptr: *const ::thread::Thread) -> *mut ::abstract_event_dispatcher::AbstractEventDispatcher;
  pub fn qt_core_c_QThread_exit_no_args(this_ptr: *mut ::thread::Thread);
  pub fn qt_core_c_QThread_exit_retcode(this_ptr: *mut ::thread::Thread, retcode: ::libc::c_int);
  pub fn qt_core_c_QThread_idealThreadCount() -> ::libc::c_int;
  pub fn qt_core_c_QThread_isFinished(this_ptr: *const ::thread::Thread) -> bool;
  pub fn qt_core_c_QThread_isInterruptionRequested(this_ptr: *const ::thread::Thread) -> bool;
  pub fn qt_core_c_QThread_isRunning(this_ptr: *const ::thread::Thread) -> bool;
  pub fn qt_core_c_QThread_loopLevel(this_ptr: *const ::thread::Thread) -> ::libc::c_int;
  pub fn qt_core_c_QThread_metaObject(this_ptr: *const ::thread::Thread) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QThread_msleep(arg1: ::libc::c_ulong);
  pub fn qt_core_c_QThread_new_no_args() -> *mut ::thread::Thread;
  pub fn qt_core_c_QThread_new_parent(parent: *mut ::object::Object) -> *mut ::thread::Thread;
  pub fn qt_core_c_QThread_priority(this_ptr: *const ::thread::Thread) -> ::thread::Priority;
  pub fn qt_core_c_QThread_quit(this_ptr: *mut ::thread::Thread);
  pub fn qt_core_c_QThread_requestInterruption(this_ptr: *mut ::thread::Thread);
  pub fn qt_core_c_QThread_setEventDispatcher(this_ptr: *mut ::thread::Thread, eventDispatcher: *mut ::abstract_event_dispatcher::AbstractEventDispatcher);
  pub fn qt_core_c_QThread_setPriority(this_ptr: *mut ::thread::Thread, priority: ::thread::Priority);
  pub fn qt_core_c_QThread_setStackSize(this_ptr: *mut ::thread::Thread, stackSize: ::libc::c_uint);
  pub fn qt_core_c_QThread_sleep(arg1: ::libc::c_ulong);
  pub fn qt_core_c_QThread_stackSize(this_ptr: *const ::thread::Thread) -> ::libc::c_uint;
  pub fn qt_core_c_QThread_start_arg1(this_ptr: *mut ::thread::Thread, arg1: ::thread::Priority);
  pub fn qt_core_c_QThread_start_no_args(this_ptr: *mut ::thread::Thread);
  pub fn qt_core_c_QThread_terminate(this_ptr: *mut ::thread::Thread);
  pub fn qt_core_c_QThread_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QThread_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QThread_usleep(arg1: ::libc::c_ulong);
  pub fn qt_core_c_QThread_wait_no_args(this_ptr: *mut ::thread::Thread) -> bool;
  pub fn qt_core_c_QThread_wait_time(this_ptr: *mut ::thread::Thread, time: ::libc::c_ulong) -> bool;
  pub fn qt_core_c_QThread_yieldCurrentThread();

  // Header: QThreadPool
  pub fn qt_core_c_QThreadPool_G_dynamic_cast_QThreadPool_ptr(ptr: *mut ::object::Object) -> *mut ::thread_pool::ThreadPool;
  pub fn qt_core_c_QThreadPool_G_static_cast_QObject_ptr(ptr: *mut ::thread_pool::ThreadPool) -> *mut ::object::Object;
  pub fn qt_core_c_QThreadPool_G_static_cast_QThreadPool_ptr(ptr: *mut ::object::Object) -> *mut ::thread_pool::ThreadPool;
  pub fn qt_core_c_QThreadPool_activeThreadCount(this_ptr: *const ::thread_pool::ThreadPool) -> ::libc::c_int;
  pub fn qt_core_c_QThreadPool_cancel(this_ptr: *mut ::thread_pool::ThreadPool, runnable: *mut ::runnable::Runnable);
  pub fn qt_core_c_QThreadPool_clear(this_ptr: *mut ::thread_pool::ThreadPool);
  pub fn qt_core_c_QThreadPool_delete(this_ptr: *mut ::thread_pool::ThreadPool);
  pub fn qt_core_c_QThreadPool_expiryTimeout(this_ptr: *const ::thread_pool::ThreadPool) -> ::libc::c_int;
  pub fn qt_core_c_QThreadPool_globalInstance() -> *mut ::thread_pool::ThreadPool;
  pub fn qt_core_c_QThreadPool_maxThreadCount(this_ptr: *const ::thread_pool::ThreadPool) -> ::libc::c_int;
  pub fn qt_core_c_QThreadPool_metaObject(this_ptr: *const ::thread_pool::ThreadPool) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QThreadPool_new_no_args() -> *mut ::thread_pool::ThreadPool;
  pub fn qt_core_c_QThreadPool_new_parent(parent: *mut ::object::Object) -> *mut ::thread_pool::ThreadPool;
  pub fn qt_core_c_QThreadPool_releaseThread(this_ptr: *mut ::thread_pool::ThreadPool);
  pub fn qt_core_c_QThreadPool_reserveThread(this_ptr: *mut ::thread_pool::ThreadPool);
  pub fn qt_core_c_QThreadPool_setExpiryTimeout(this_ptr: *mut ::thread_pool::ThreadPool, expiryTimeout: ::libc::c_int);
  pub fn qt_core_c_QThreadPool_setMaxThreadCount(this_ptr: *mut ::thread_pool::ThreadPool, maxThreadCount: ::libc::c_int);
  pub fn qt_core_c_QThreadPool_start_runnable(this_ptr: *mut ::thread_pool::ThreadPool, runnable: *mut ::runnable::Runnable);
  pub fn qt_core_c_QThreadPool_start_runnable_priority(this_ptr: *mut ::thread_pool::ThreadPool, runnable: *mut ::runnable::Runnable, priority: ::libc::c_int);
  pub fn qt_core_c_QThreadPool_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QThreadPool_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QThreadPool_tryStart(this_ptr: *mut ::thread_pool::ThreadPool, runnable: *mut ::runnable::Runnable) -> bool;
  pub fn qt_core_c_QThreadPool_tryTake(this_ptr: *mut ::thread_pool::ThreadPool, runnable: *mut ::runnable::Runnable) -> bool;
  pub fn qt_core_c_QThreadPool_waitForDone_msecs(this_ptr: *mut ::thread_pool::ThreadPool, msecs: ::libc::c_int) -> bool;
  pub fn qt_core_c_QThreadPool_waitForDone_no_args(this_ptr: *mut ::thread_pool::ThreadPool) -> bool;

  // Header: QTime
  pub fn qt_core_c_QTime_addMSecs_to_output(this_ptr: *const ::time::Time, ms: ::libc::c_int, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_addSecs_to_output(this_ptr: *const ::time::Time, secs: ::libc::c_int, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_constructor_h_m(h: ::libc::c_int, m: ::libc::c_int, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_constructor_h_m_s(h: ::libc::c_int, m: ::libc::c_int, s: ::libc::c_int, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_constructor_h_m_s_ms(h: ::libc::c_int, m: ::libc::c_int, s: ::libc::c_int, ms: ::libc::c_int, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_constructor_no_args(output: *mut ::time::Time);
  pub fn qt_core_c_QTime_currentTime_to_output(output: *mut ::time::Time);
  pub fn qt_core_c_QTime_destructor(this_ptr: *mut ::time::Time);
  pub fn qt_core_c_QTime_elapsed(this_ptr: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_fromMSecsSinceStartOfDay_to_output(msecs: ::libc::c_int, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_fromString_to_output_s(s: *const ::string::String, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_fromString_to_output_s_f(s: *const ::string::String, f: *const ::qt::DateFormat, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_fromString_to_output_s_format(s: *const ::string::String, format: *const ::string::String, output: *mut ::time::Time);
  pub fn qt_core_c_QTime_hour(this_ptr: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_isNull(this_ptr: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_isValid_h_m_s(h: ::libc::c_int, m: ::libc::c_int, s: ::libc::c_int) -> bool;
  pub fn qt_core_c_QTime_isValid_h_m_s_ms(h: ::libc::c_int, m: ::libc::c_int, s: ::libc::c_int, ms: ::libc::c_int) -> bool;
  pub fn qt_core_c_QTime_isValid_no_args(this_ptr: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_minute(this_ptr: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_msec(this_ptr: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_msecsSinceStartOfDay(this_ptr: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_msecsTo(this_ptr: *const ::time::Time, arg1: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_operator_eq(this_ptr: *const ::time::Time, other: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_operator_ge(this_ptr: *const ::time::Time, other: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_operator_gt(this_ptr: *const ::time::Time, other: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_operator_le(this_ptr: *const ::time::Time, other: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_operator_lt(this_ptr: *const ::time::Time, other: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_operator_neq(this_ptr: *const ::time::Time, other: *const ::time::Time) -> bool;
  pub fn qt_core_c_QTime_restart(this_ptr: *mut ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_second(this_ptr: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_secsTo(this_ptr: *const ::time::Time, arg1: *const ::time::Time) -> ::libc::c_int;
  pub fn qt_core_c_QTime_setHMS_h_m_s(this_ptr: *mut ::time::Time, h: ::libc::c_int, m: ::libc::c_int, s: ::libc::c_int) -> bool;
  pub fn qt_core_c_QTime_setHMS_h_m_s_ms(this_ptr: *mut ::time::Time, h: ::libc::c_int, m: ::libc::c_int, s: ::libc::c_int, ms: ::libc::c_int) -> bool;
  pub fn qt_core_c_QTime_start(this_ptr: *mut ::time::Time);
  pub fn qt_core_c_QTime_toString_to_output_f(this_ptr: *const ::time::Time, f: *const ::qt::DateFormat, output: *mut ::string::String);
  pub fn qt_core_c_QTime_toString_to_output_format(this_ptr: *const ::time::Time, format: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QTime_toString_to_output_no_args(this_ptr: *const ::time::Time, output: *mut ::string::String);

  // Header: QTimeLine
  pub fn qt_core_c_QTimeLine_G_dynamic_cast_QTimeLine_ptr(ptr: *mut ::object::Object) -> *mut ::time_line::TimeLine;
  pub fn qt_core_c_QTimeLine_G_static_cast_QObject_ptr(ptr: *mut ::time_line::TimeLine) -> *mut ::object::Object;
  pub fn qt_core_c_QTimeLine_G_static_cast_QTimeLine_ptr(ptr: *mut ::object::Object) -> *mut ::time_line::TimeLine;
  pub fn qt_core_c_QTimeLine_currentFrame(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_currentTime(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_currentValue(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_double;
  pub fn qt_core_c_QTimeLine_curveShape(this_ptr: *const ::time_line::TimeLine) -> ::time_line::CurveShape;
  pub fn qt_core_c_QTimeLine_delete(this_ptr: *mut ::time_line::TimeLine);
  pub fn qt_core_c_QTimeLine_direction(this_ptr: *const ::time_line::TimeLine) -> ::time_line::Direction;
  pub fn qt_core_c_QTimeLine_duration(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_easingCurve_to_output(this_ptr: *const ::time_line::TimeLine, output: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QTimeLine_endFrame(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_frameForTime(this_ptr: *const ::time_line::TimeLine, msec: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_loopCount(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_metaObject(this_ptr: *const ::time_line::TimeLine) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QTimeLine_new_duration(duration: ::libc::c_int) -> *mut ::time_line::TimeLine;
  pub fn qt_core_c_QTimeLine_new_duration_parent(duration: ::libc::c_int, parent: *mut ::object::Object) -> *mut ::time_line::TimeLine;
  pub fn qt_core_c_QTimeLine_new_no_args() -> *mut ::time_line::TimeLine;
  pub fn qt_core_c_QTimeLine_resume(this_ptr: *mut ::time_line::TimeLine);
  pub fn qt_core_c_QTimeLine_setCurrentTime(this_ptr: *mut ::time_line::TimeLine, msec: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_setCurveShape(this_ptr: *mut ::time_line::TimeLine, shape: ::time_line::CurveShape);
  pub fn qt_core_c_QTimeLine_setDirection(this_ptr: *mut ::time_line::TimeLine, direction: ::time_line::Direction);
  pub fn qt_core_c_QTimeLine_setDuration(this_ptr: *mut ::time_line::TimeLine, duration: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_setEasingCurve(this_ptr: *mut ::time_line::TimeLine, curve: *const ::easing_curve::EasingCurve);
  pub fn qt_core_c_QTimeLine_setEndFrame(this_ptr: *mut ::time_line::TimeLine, frame: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_setFrameRange(this_ptr: *mut ::time_line::TimeLine, startFrame: ::libc::c_int, endFrame: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_setLoopCount(this_ptr: *mut ::time_line::TimeLine, count: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_setPaused(this_ptr: *mut ::time_line::TimeLine, paused: bool);
  pub fn qt_core_c_QTimeLine_setStartFrame(this_ptr: *mut ::time_line::TimeLine, frame: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_setUpdateInterval(this_ptr: *mut ::time_line::TimeLine, interval: ::libc::c_int);
  pub fn qt_core_c_QTimeLine_start(this_ptr: *mut ::time_line::TimeLine);
  pub fn qt_core_c_QTimeLine_startFrame(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_state(this_ptr: *const ::time_line::TimeLine) -> ::time_line::State;
  pub fn qt_core_c_QTimeLine_stop(this_ptr: *mut ::time_line::TimeLine);
  pub fn qt_core_c_QTimeLine_toggleDirection(this_ptr: *mut ::time_line::TimeLine);
  pub fn qt_core_c_QTimeLine_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTimeLine_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTimeLine_updateInterval(this_ptr: *const ::time_line::TimeLine) -> ::libc::c_int;
  pub fn qt_core_c_QTimeLine_valueForTime(this_ptr: *const ::time_line::TimeLine, msec: ::libc::c_int) -> ::libc::c_double;

  // Header: QTimeZone
  pub fn qt_core_c_QTimeZone_G_operator_shl_to_output(dbg: *const ::debug::Debug, tz: *const ::time_zone::TimeZone, output: *mut ::debug::Debug);
  pub fn qt_core_c_QTimeZone_G_operator_shr(ds: *mut ::data_stream::DataStream, tz: *mut ::time_zone::TimeZone) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QTimeZone_G_swap(value1: *mut ::time_zone::TimeZone, value2: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_OffsetData_abbreviation(this_ptr: *const ::time_zone::OffsetData) -> *const ::string::String;
  pub fn qt_core_c_QTimeZone_OffsetData_abbreviation_mut(this_ptr: *mut ::time_zone::OffsetData) -> *mut ::string::String;
  pub fn qt_core_c_QTimeZone_OffsetData_atUtc(this_ptr: *const ::time_zone::OffsetData) -> *const ::date_time::DateTime;
  pub fn qt_core_c_QTimeZone_OffsetData_atUtc_mut(this_ptr: *mut ::time_zone::OffsetData) -> *mut ::date_time::DateTime;
  pub fn qt_core_c_QTimeZone_OffsetData_daylightTimeOffset(this_ptr: *const ::time_zone::OffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QTimeZone_OffsetData_destructor(this_ptr: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QTimeZone_OffsetData_offsetFromUtc(this_ptr: *const ::time_zone::OffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QTimeZone_OffsetData_set_abbreviation(this_ptr: *mut ::time_zone::OffsetData, value: *const ::string::String);
  pub fn qt_core_c_QTimeZone_OffsetData_set_atUtc(this_ptr: *mut ::time_zone::OffsetData, value: *const ::date_time::DateTime);
  pub fn qt_core_c_QTimeZone_OffsetData_set_daylightTimeOffset(this_ptr: *mut ::time_zone::OffsetData, value: ::libc::c_int);
  pub fn qt_core_c_QTimeZone_OffsetData_set_offsetFromUtc(this_ptr: *mut ::time_zone::OffsetData, value: ::libc::c_int);
  pub fn qt_core_c_QTimeZone_OffsetData_set_standardTimeOffset(this_ptr: *mut ::time_zone::OffsetData, value: ::libc::c_int);
  pub fn qt_core_c_QTimeZone_OffsetData_standardTimeOffset(this_ptr: *const ::time_zone::OffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QTimeZone_abbreviation_to_output(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_availableTimeZoneIds_to_output_country(country: *const ::locale::Country, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QTimeZone_availableTimeZoneIds_to_output_no_args(output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QTimeZone_availableTimeZoneIds_to_output_offsetSeconds(offsetSeconds: ::libc::c_int, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QTimeZone_comment_to_output(this_ptr: *const ::time_zone::TimeZone, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_constructor_ianaId(ianaId: *const ::byte_array::ByteArray, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_constructor_no_args(output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_constructor_offsetSeconds(offsetSeconds: ::libc::c_int, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_constructor_other(other: *const ::time_zone::TimeZone, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_constructor_zoneId_offsetSeconds_name_abbreviation(zoneId: *const ::byte_array::ByteArray, offsetSeconds: ::libc::c_int, name: *const ::string::String, abbreviation: *const ::string::String, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_constructor_zoneId_offsetSeconds_name_abbreviation_country(zoneId: *const ::byte_array::ByteArray, offsetSeconds: ::libc::c_int, name: *const ::string::String, abbreviation: *const ::string::String, country: *const ::locale::Country, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_constructor_zoneId_offsetSeconds_name_abbreviation_country_comment(zoneId: *const ::byte_array::ByteArray, offsetSeconds: ::libc::c_int, name: *const ::string::String, abbreviation: *const ::string::String, country: *const ::locale::Country, comment: *const ::string::String, output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_daylightTimeOffset(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime) -> ::libc::c_int;
  pub fn qt_core_c_QTimeZone_destructor(this_ptr: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_displayName_to_output_atDateTime(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_displayName_to_output_atDateTime_nameType(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime, nameType: *const ::time_zone::NameType, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_displayName_to_output_atDateTime_nameType_locale(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime, nameType: *const ::time_zone::NameType, locale: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_displayName_to_output_timeType(this_ptr: *const ::time_zone::TimeZone, timeType: *const ::time_zone::TimeType, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_displayName_to_output_timeType_nameType(this_ptr: *const ::time_zone::TimeZone, timeType: *const ::time_zone::TimeType, nameType: *const ::time_zone::NameType, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_displayName_to_output_timeType_nameType_locale(this_ptr: *const ::time_zone::TimeZone, timeType: *const ::time_zone::TimeType, nameType: *const ::time_zone::NameType, locale: *const ::locale::Locale, output: *mut ::string::String);
  pub fn qt_core_c_QTimeZone_hasDaylightTime(this_ptr: *const ::time_zone::TimeZone) -> bool;
  pub fn qt_core_c_QTimeZone_hasTransitions(this_ptr: *const ::time_zone::TimeZone) -> bool;
  pub fn qt_core_c_QTimeZone_ianaIdToWindowsId_to_output(ianaId: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTimeZone_id_to_output(this_ptr: *const ::time_zone::TimeZone, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTimeZone_isDaylightTime(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime) -> bool;
  pub fn qt_core_c_QTimeZone_isTimeZoneIdAvailable(ianaId: *const ::byte_array::ByteArray) -> bool;
  pub fn qt_core_c_QTimeZone_isValid(this_ptr: *const ::time_zone::TimeZone) -> bool;
  pub fn qt_core_c_QTimeZone_nextTransition_to_output(this_ptr: *const ::time_zone::TimeZone, afterDateTime: *const ::date_time::DateTime, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QTimeZone_offsetData_to_output(this_ptr: *const ::time_zone::TimeZone, forDateTime: *const ::date_time::DateTime, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QTimeZone_offsetFromUtc(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime) -> ::libc::c_int;
  pub fn qt_core_c_QTimeZone_operator_assign(this_ptr: *mut ::time_zone::TimeZone, other: *const ::time_zone::TimeZone) -> *mut ::time_zone::TimeZone;
  pub fn qt_core_c_QTimeZone_operator_eq(this_ptr: *const ::time_zone::TimeZone, other: *const ::time_zone::TimeZone) -> bool;
  pub fn qt_core_c_QTimeZone_operator_neq(this_ptr: *const ::time_zone::TimeZone, other: *const ::time_zone::TimeZone) -> bool;
  pub fn qt_core_c_QTimeZone_previousTransition_to_output(this_ptr: *const ::time_zone::TimeZone, beforeDateTime: *const ::date_time::DateTime, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QTimeZone_standardTimeOffset(this_ptr: *const ::time_zone::TimeZone, atDateTime: *const ::date_time::DateTime) -> ::libc::c_int;
  pub fn qt_core_c_QTimeZone_swap(this_ptr: *mut ::time_zone::TimeZone, other: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_systemTimeZoneId_to_output(output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTimeZone_systemTimeZone_to_output(output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_transitions_to_output(this_ptr: *const ::time_zone::TimeZone, fromDateTime: *const ::date_time::DateTime, toDateTime: *const ::date_time::DateTime, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QTimeZone_utc_to_output(output: *mut ::time_zone::TimeZone);
  pub fn qt_core_c_QTimeZone_windowsIdToDefaultIanaId_to_output_windowsId(windowsId: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTimeZone_windowsIdToDefaultIanaId_to_output_windowsId_country(windowsId: *const ::byte_array::ByteArray, country: *const ::locale::Country, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QTimeZone_windowsIdToIanaIds_to_output_windowsId(windowsId: *const ::byte_array::ByteArray, output: *mut ::list::ListByteArray);
  pub fn qt_core_c_QTimeZone_windowsIdToIanaIds_to_output_windowsId_country(windowsId: *const ::byte_array::ByteArray, country: *const ::locale::Country, output: *mut ::list::ListByteArray);

  // Header: QTimer
  pub fn qt_core_c_QTimer_G_dynamic_cast_QTimer_ptr(ptr: *mut ::object::Object) -> *mut ::timer::Timer;
  pub fn qt_core_c_QTimer_G_static_cast_QObject_ptr(ptr: *mut ::timer::Timer) -> *mut ::object::Object;
  pub fn qt_core_c_QTimer_G_static_cast_QTimer_ptr(ptr: *mut ::object::Object) -> *mut ::timer::Timer;
  pub fn qt_core_c_QTimer_delete(this_ptr: *mut ::timer::Timer);
  pub fn qt_core_c_QTimer_interval(this_ptr: *const ::timer::Timer) -> ::libc::c_int;
  pub fn qt_core_c_QTimer_isActive(this_ptr: *const ::timer::Timer) -> bool;
  pub fn qt_core_c_QTimer_isSingleShot(this_ptr: *const ::timer::Timer) -> bool;
  pub fn qt_core_c_QTimer_metaObject(this_ptr: *const ::timer::Timer) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QTimer_new_no_args() -> *mut ::timer::Timer;
  pub fn qt_core_c_QTimer_new_parent(parent: *mut ::object::Object) -> *mut ::timer::Timer;
  pub fn qt_core_c_QTimer_remainingTime(this_ptr: *const ::timer::Timer) -> ::libc::c_int;
  pub fn qt_core_c_QTimer_setInterval(this_ptr: *mut ::timer::Timer, msec: ::libc::c_int);
  pub fn qt_core_c_QTimer_setSingleShot(this_ptr: *mut ::timer::Timer, singleShot: bool);
  pub fn qt_core_c_QTimer_setTimerType(this_ptr: *mut ::timer::Timer, atype: *const ::qt::TimerType);
  pub fn qt_core_c_QTimer_singleShot_msec_receiver_member(msec: ::libc::c_int, receiver: *const ::object::Object, member: *const ::libc::c_char);
  pub fn qt_core_c_QTimer_singleShot_msec_timerType_receiver_member(msec: ::libc::c_int, timerType: *const ::qt::TimerType, receiver: *const ::object::Object, member: *const ::libc::c_char);
  pub fn qt_core_c_QTimer_start_msec(this_ptr: *mut ::timer::Timer, msec: ::libc::c_int);
  pub fn qt_core_c_QTimer_start_no_args(this_ptr: *mut ::timer::Timer);
  pub fn qt_core_c_QTimer_stop(this_ptr: *mut ::timer::Timer);
  pub fn qt_core_c_QTimer_timerId(this_ptr: *const ::timer::Timer) -> ::libc::c_int;
  pub fn qt_core_c_QTimer_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTimer_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QTimerEvent
  pub fn qt_core_c_QTimerEvent_G_dynamic_cast_QTimerEvent_ptr(ptr: *mut ::event::Event) -> *mut ::timer_event::TimerEvent;
  pub fn qt_core_c_QTimerEvent_G_static_cast_QEvent_ptr(ptr: *mut ::timer_event::TimerEvent) -> *mut ::event::Event;
  pub fn qt_core_c_QTimerEvent_G_static_cast_QTimerEvent_ptr(ptr: *mut ::event::Event) -> *mut ::timer_event::TimerEvent;
  pub fn qt_core_c_QTimerEvent_delete(this_ptr: *mut ::timer_event::TimerEvent);
  pub fn qt_core_c_QTimerEvent_new(timerId: ::libc::c_int) -> *mut ::timer_event::TimerEvent;
  pub fn qt_core_c_QTimerEvent_timerId(this_ptr: *const ::timer_event::TimerEvent) -> ::libc::c_int;

  // Header: QTranslator
  pub fn qt_core_c_QTranslator_G_dynamic_cast_QTranslator_ptr(ptr: *mut ::object::Object) -> *mut ::translator::Translator;
  pub fn qt_core_c_QTranslator_G_static_cast_QObject_ptr(ptr: *mut ::translator::Translator) -> *mut ::object::Object;
  pub fn qt_core_c_QTranslator_G_static_cast_QTranslator_ptr(ptr: *mut ::object::Object) -> *mut ::translator::Translator;
  pub fn qt_core_c_QTranslator_delete(this_ptr: *mut ::translator::Translator);
  pub fn qt_core_c_QTranslator_isEmpty(this_ptr: *const ::translator::Translator) -> bool;
  pub fn qt_core_c_QTranslator_load_data_len(this_ptr: *mut ::translator::Translator, data: *const ::libc::c_uchar, len: ::libc::c_int) -> bool;
  pub fn qt_core_c_QTranslator_load_data_len_directory(this_ptr: *mut ::translator::Translator, data: *const ::libc::c_uchar, len: ::libc::c_int, directory: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_filename(this_ptr: *mut ::translator::Translator, filename: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_filename_directory(this_ptr: *mut ::translator::Translator, filename: *const ::string::String, directory: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_filename_directory_search_delimiters(this_ptr: *mut ::translator::Translator, filename: *const ::string::String, directory: *const ::string::String, search_delimiters: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_filename_directory_search_delimiters_suffix(this_ptr: *mut ::translator::Translator, filename: *const ::string::String, directory: *const ::string::String, search_delimiters: *const ::string::String, suffix: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_locale_filename(this_ptr: *mut ::translator::Translator, locale: *const ::locale::Locale, filename: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_locale_filename_prefix(this_ptr: *mut ::translator::Translator, locale: *const ::locale::Locale, filename: *const ::string::String, prefix: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_locale_filename_prefix_directory(this_ptr: *mut ::translator::Translator, locale: *const ::locale::Locale, filename: *const ::string::String, prefix: *const ::string::String, directory: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_load_locale_filename_prefix_directory_suffix(this_ptr: *mut ::translator::Translator, locale: *const ::locale::Locale, filename: *const ::string::String, prefix: *const ::string::String, directory: *const ::string::String, suffix: *const ::string::String) -> bool;
  pub fn qt_core_c_QTranslator_metaObject(this_ptr: *const ::translator::Translator) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QTranslator_new_no_args() -> *mut ::translator::Translator;
  pub fn qt_core_c_QTranslator_new_parent(parent: *mut ::object::Object) -> *mut ::translator::Translator;
  pub fn qt_core_c_QTranslator_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTranslator_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QTranslator_translate_to_output_context_sourceText(this_ptr: *const ::translator::Translator, context: *const ::libc::c_char, sourceText: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QTranslator_translate_to_output_context_sourceText_disambiguation(this_ptr: *const ::translator::Translator, context: *const ::libc::c_char, sourceText: *const ::libc::c_char, disambiguation: *const ::libc::c_char, output: *mut ::string::String);
  pub fn qt_core_c_QTranslator_translate_to_output_context_sourceText_disambiguation_n(this_ptr: *const ::translator::Translator, context: *const ::libc::c_char, sourceText: *const ::libc::c_char, disambiguation: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QUrl
  pub fn qt_core_c_QUrl_G_operator_shl(arg1: *mut ::data_stream::DataStream, arg2: *const ::url::Url) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QUrl_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::url::Url, output: *mut ::debug::Debug);
  pub fn qt_core_c_QUrl_G_operator_shr(arg1: *mut ::data_stream::DataStream, arg2: *mut ::url::Url) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QUrl_G_qHash_url(url: *const ::url::Url) -> ::libc::c_uint;
  pub fn qt_core_c_QUrl_G_qHash_url_seed(url: *const ::url::Url, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QUrl_G_swap(value1: *mut ::url::Url, value2: *mut ::url::Url);
  pub fn qt_core_c_QUrl_adjusted_to_output(this_ptr: *const ::url::Url, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_authority_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_authority_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_clear(this_ptr: *mut ::url::Url);
  pub fn qt_core_c_QUrl_constructor_copy(copy: *const ::url::Url, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_constructor_no_args(output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_constructor_url(url: *const ::string::String, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_constructor_url_mode(url: *const ::string::String, mode: ::url::ParsingMode, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_destructor(this_ptr: *mut ::url::Url);
  pub fn qt_core_c_QUrl_errorString_to_output(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fileName_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fileName_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fragment_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fragment_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fromAce_to_output(arg1: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fromEncoded_to_output_url(url: *const ::byte_array::ByteArray, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_fromEncoded_to_output_url_mode(url: *const ::byte_array::ByteArray, mode: ::url::ParsingMode, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_fromLocalFile_to_output(localfile: *const ::string::String, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_fromPercentEncoding_to_output(arg1: *const ::byte_array::ByteArray, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_fromStringList_to_output_uris(uris: *const ::string_list::StringList, output: *mut ::list::ListUrl);
  pub fn qt_core_c_QUrl_fromStringList_to_output_uris_mode(uris: *const ::string_list::StringList, mode: ::url::ParsingMode, output: *mut ::list::ListUrl);
  pub fn qt_core_c_QUrl_fromUserInput_to_output_userInput(userInput: *const ::string::String, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_fromUserInput_to_output_userInput_workingDirectory(userInput: *const ::string::String, workingDirectory: *const ::string::String, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_fromUserInput_to_output_userInput_workingDirectory_options(userInput: *const ::string::String, workingDirectory: *const ::string::String, options: ::libc::c_uint, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_hasFragment(this_ptr: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_hasQuery(this_ptr: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_host_to_output_arg1(this_ptr: *const ::url::Url, arg1: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_host_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_idnWhitelist_to_output(output: *mut ::string_list::StringList);
  pub fn qt_core_c_QUrl_isEmpty(this_ptr: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_isLocalFile(this_ptr: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_isParentOf(this_ptr: *const ::url::Url, url: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_isRelative(this_ptr: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_isValid(this_ptr: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_matches(this_ptr: *const ::url::Url, url: *const ::url::Url, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption) -> bool;
  pub fn qt_core_c_QUrl_operator_assign_copy(this_ptr: *mut ::url::Url, copy: *const ::url::Url) -> *mut ::url::Url;
  pub fn qt_core_c_QUrl_operator_assign_url(this_ptr: *mut ::url::Url, url: *const ::string::String) -> *mut ::url::Url;
  pub fn qt_core_c_QUrl_operator_eq(this_ptr: *const ::url::Url, url: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_operator_lt(this_ptr: *const ::url::Url, url: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_operator_neq(this_ptr: *const ::url::Url, url: *const ::url::Url) -> bool;
  pub fn qt_core_c_QUrl_password_to_output_arg1(this_ptr: *const ::url::Url, arg1: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_password_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_path_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_path_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_port_defaultPort(this_ptr: *const ::url::Url, defaultPort: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QUrl_port_no_args(this_ptr: *const ::url::Url) -> ::libc::c_int;
  pub fn qt_core_c_QUrl_query_to_output_arg1(this_ptr: *const ::url::Url, arg1: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_query_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_resolved_to_output(this_ptr: *const ::url::Url, relative: *const ::url::Url, output: *mut ::url::Url);
  pub fn qt_core_c_QUrl_scheme_to_output(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_setAuthority_authority(this_ptr: *mut ::url::Url, authority: *const ::string::String);
  pub fn qt_core_c_QUrl_setAuthority_authority_mode(this_ptr: *mut ::url::Url, authority: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setFragment_fragment(this_ptr: *mut ::url::Url, fragment: *const ::string::String);
  pub fn qt_core_c_QUrl_setFragment_fragment_mode(this_ptr: *mut ::url::Url, fragment: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setHost_host(this_ptr: *mut ::url::Url, host: *const ::string::String);
  pub fn qt_core_c_QUrl_setHost_host_mode(this_ptr: *mut ::url::Url, host: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setIdnWhitelist(arg1: *const ::string_list::StringList);
  pub fn qt_core_c_QUrl_setPassword_password(this_ptr: *mut ::url::Url, password: *const ::string::String);
  pub fn qt_core_c_QUrl_setPassword_password_mode(this_ptr: *mut ::url::Url, password: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setPath_path(this_ptr: *mut ::url::Url, path: *const ::string::String);
  pub fn qt_core_c_QUrl_setPath_path_mode(this_ptr: *mut ::url::Url, path: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setPort(this_ptr: *mut ::url::Url, port: ::libc::c_int);
  pub fn qt_core_c_QUrl_setQuery_QString(this_ptr: *mut ::url::Url, query: *const ::string::String);
  pub fn qt_core_c_QUrl_setQuery_QString_QUrl_ParsingMode(this_ptr: *mut ::url::Url, query: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setQuery_QUrlQuery(this_ptr: *mut ::url::Url, query: *const ::url_query::UrlQuery);
  pub fn qt_core_c_QUrl_setScheme(this_ptr: *mut ::url::Url, scheme: *const ::string::String);
  pub fn qt_core_c_QUrl_setUrl_url(this_ptr: *mut ::url::Url, url: *const ::string::String);
  pub fn qt_core_c_QUrl_setUrl_url_mode(this_ptr: *mut ::url::Url, url: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setUserInfo_userInfo(this_ptr: *mut ::url::Url, userInfo: *const ::string::String);
  pub fn qt_core_c_QUrl_setUserInfo_userInfo_mode(this_ptr: *mut ::url::Url, userInfo: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_setUserName_userName(this_ptr: *mut ::url::Url, userName: *const ::string::String);
  pub fn qt_core_c_QUrl_setUserName_userName_mode(this_ptr: *mut ::url::Url, userName: *const ::string::String, mode: ::url::ParsingMode);
  pub fn qt_core_c_QUrl_swap(this_ptr: *mut ::url::Url, other: *mut ::url::Url);
  pub fn qt_core_c_QUrl_toAce_to_output(arg1: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUrl_toDisplayString_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_toDisplayString_to_output_options(this_ptr: *const ::url::Url, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_toEncoded_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUrl_toEncoded_to_output_options(this_ptr: *const ::url::Url, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUrl_toLocalFile_to_output(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_toPercentEncoding_to_output_arg1(arg1: *const ::string::String, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUrl_toPercentEncoding_to_output_arg1_exclude(arg1: *const ::string::String, exclude: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUrl_toPercentEncoding_to_output_arg1_exclude_include(arg1: *const ::string::String, exclude: *const ::byte_array::ByteArray, include: *const ::byte_array::ByteArray, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUrl_toStringList_to_output_uris(uris: *const ::list::ListUrl, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QUrl_toStringList_to_output_uris_options(uris: *const ::list::ListUrl, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QUrl_toString_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_toString_to_output_options(this_ptr: *const ::url::Url, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_topLevelDomain_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_topLevelDomain_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_url_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_url_to_output_options(this_ptr: *const ::url::Url, options: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_userInfo_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_userInfo_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_userName_to_output_no_args(this_ptr: *const ::url::Url, output: *mut ::string::String);
  pub fn qt_core_c_QUrl_userName_to_output_options(this_ptr: *const ::url::Url, options: ::libc::c_uint, output: *mut ::string::String);

  // Header: QUrlQuery
  pub fn qt_core_c_QUrlQuery_G_qHash_key(key: *const ::url_query::UrlQuery) -> ::libc::c_uint;
  pub fn qt_core_c_QUrlQuery_G_qHash_key_seed(key: *const ::url_query::UrlQuery, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QUrlQuery_G_swap(value1: *mut ::url_query::UrlQuery, value2: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_addQueryItem(this_ptr: *mut ::url_query::UrlQuery, key: *const ::string::String, value: *const ::string::String);
  pub fn qt_core_c_QUrlQuery_clear(this_ptr: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_constructor_no_args(output: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_constructor_other(other: *const ::url_query::UrlQuery, output: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_constructor_queryString(queryString: *const ::string::String, output: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_constructor_url(url: *const ::url::Url, output: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_defaultQueryPairDelimiter_to_output(output: *mut ::char::Char);
  pub fn qt_core_c_QUrlQuery_defaultQueryValueDelimiter_to_output(output: *mut ::char::Char);
  pub fn qt_core_c_QUrlQuery_destructor(this_ptr: *mut ::url_query::UrlQuery);
  pub fn qt_core_c_QUrlQuery_hasQueryItem(this_ptr: *const ::url_query::UrlQuery, key: *const ::string::String) -> bool;
  pub fn qt_core_c_QUrlQuery_isEmpty(this_ptr: *const ::url_query::UrlQuery) -> bool;
  pub fn qt_core_c_QUrlQuery_operator_assign(this_ptr: *mut ::url_query::UrlQuery, other: *const ::url_query::UrlQuery) -> *mut ::url_query::UrlQuery;
  pub fn qt_core_c_QUrlQuery_operator_eq(this_ptr: *const ::url_query::UrlQuery, other: *const ::url_query::UrlQuery) -> bool;
  pub fn qt_core_c_QUrlQuery_operator_neq(this_ptr: *const ::url_query::UrlQuery, other: *const ::url_query::UrlQuery) -> bool;
  pub fn qt_core_c_QUrlQuery_queryPairDelimiter_to_output(this_ptr: *const ::url_query::UrlQuery, output: *mut ::char::Char);
  pub fn qt_core_c_QUrlQuery_queryValueDelimiter_to_output(this_ptr: *const ::url_query::UrlQuery, output: *mut ::char::Char);
  pub fn qt_core_c_QUrlQuery_removeAllQueryItems(this_ptr: *mut ::url_query::UrlQuery, key: *const ::string::String);
  pub fn qt_core_c_QUrlQuery_removeQueryItem(this_ptr: *mut ::url_query::UrlQuery, key: *const ::string::String);
  pub fn qt_core_c_QUrlQuery_setQuery(this_ptr: *mut ::url_query::UrlQuery, queryString: *const ::string::String);
  pub fn qt_core_c_QUrlQuery_setQueryDelimiters(this_ptr: *mut ::url_query::UrlQuery, valueDelimiter: *const ::char::Char, pairDelimiter: *const ::char::Char);
  pub fn qt_core_c_QUrlQuery_setQueryItems(this_ptr: *mut ::url_query::UrlQuery, query: *const ::list::ListPairPairStringString);
  pub fn qt_core_c_QUrlQuery_swap(this_ptr: *mut ::url_query::UrlQuery, other: *mut ::url_query::UrlQuery);

  // Header: QUrlTwoFlags
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_constructor_QFlags_QUrl_ComponentFormattingOption(f: ::libc::c_uint, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_constructor_QUrl_ComponentFormattingOption(f: ::url::ComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_constructor_QUrl_UrlFormattingOption(f: ::url::UrlFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_convert_to_QFlags_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption) -> ::libc::c_uint;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_convert_to_int(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption) -> ::libc::c_int;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_destructor(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_and_assign_int(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, mask: ::libc::c_int) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_and_assign_unsigned_int(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, mask: ::libc::c_uint) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_and_to_output_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::ComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_and_to_output_QUrl_UrlFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::UrlFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_and_to_output_int(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, mask: ::libc::c_int, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_and_to_output_unsigned_int(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, mask: ::libc::c_uint, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_not_to_output(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_or_assign_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_or_assign_QUrl_ComponentFormattingOption(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::ComponentFormattingOption) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_or_assign_QUrl_UrlFormattingOption(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::UrlFormattingOption) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_or_to_output_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_or_to_output_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::ComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_or_to_output_QUrl_UrlFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::UrlFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_xor_assign_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_xor_assign_QUrl_ComponentFormattingOption(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::ComponentFormattingOption) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_xor_assign_QUrl_UrlFormattingOption(this_ptr: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::UrlFormattingOption) -> *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_xor_to_output_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_xor_to_output_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::ComponentFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_bit_xor_to_output_QUrl_UrlFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::UrlFormattingOption, output: *mut ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption);
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_operator_not(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption) -> bool;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_testFlag_QUrl_ComponentFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::ComponentFormattingOption) -> bool;
  pub fn qt_core_c_QUrlTwoFlags_QUrl_UrlFormattingOption_QUrl_ComponentFormattingOption_testFlag_QUrl_UrlFormattingOption(this_ptr: *const ::url_two_flags::UrlTwoFlagsUrlUrlFormattingOptionUrlComponentFormattingOption, f: ::url::UrlFormattingOption) -> bool;

  // Header: QUuid
  pub fn qt_core_c_QUuid_G_operator_ge(lhs: *const ::uuid::Uuid, rhs: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_G_operator_le(lhs: *const ::uuid::Uuid, rhs: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_G_operator_shl(arg1: *mut ::data_stream::DataStream, arg2: *const ::uuid::Uuid) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QUuid_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::uuid::Uuid, output: *mut ::debug::Debug);
  pub fn qt_core_c_QUuid_G_operator_shr(arg1: *mut ::data_stream::DataStream, arg2: *mut ::uuid::Uuid) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QUuid_G_qHash_uuid(uuid: *const ::uuid::Uuid) -> ::libc::c_uint;
  pub fn qt_core_c_QUuid_G_qHash_uuid_seed(uuid: *const ::uuid::Uuid, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QUuid_constructor_QByteArray(arg1: *const ::byte_array::ByteArray, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_constructor_QString(arg1: *const ::string::String, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_constructor_char(arg1: *const ::libc::c_char, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_constructor_no_args(output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_constructor_unsigned_int_unsigned_short_unsigned_short_unsigned_char_unsigned_char_unsigned_char_unsigned_char_unsigned_char_unsigned_char_unsigned_char_unsigned_char(l: ::libc::c_uint, w1: ::libc::c_ushort, w2: ::libc::c_ushort, b1: ::libc::c_uchar, b2: ::libc::c_uchar, b3: ::libc::c_uchar, b4: ::libc::c_uchar, b5: ::libc::c_uchar, b6: ::libc::c_uchar, b7: ::libc::c_uchar, b8: ::libc::c_uchar, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_createUuidV3_to_output_QUuid_QByteArray(ns: *const ::uuid::Uuid, baseData: *const ::byte_array::ByteArray, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_createUuidV3_to_output_QUuid_QString(ns: *const ::uuid::Uuid, baseData: *const ::string::String, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_createUuidV5_to_output_QUuid_QByteArray(ns: *const ::uuid::Uuid, baseData: *const ::byte_array::ByteArray, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_createUuidV5_to_output_QUuid_QString(ns: *const ::uuid::Uuid, baseData: *const ::string::String, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_createUuid_to_output(output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_data1(this_ptr: *const ::uuid::Uuid) -> ::libc::c_uint;
  pub fn qt_core_c_QUuid_data2(this_ptr: *const ::uuid::Uuid) -> ::libc::c_ushort;
  pub fn qt_core_c_QUuid_data3(this_ptr: *const ::uuid::Uuid) -> ::libc::c_ushort;
  pub fn qt_core_c_QUuid_destructor(this_ptr: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_fromRfc4122_to_output(arg1: *const ::byte_array::ByteArray, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QUuid_isNull(this_ptr: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_operator_eq(this_ptr: *const ::uuid::Uuid, orig: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_operator_gt(this_ptr: *const ::uuid::Uuid, other: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_operator_lt(this_ptr: *const ::uuid::Uuid, other: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_operator_neq(this_ptr: *const ::uuid::Uuid, orig: *const ::uuid::Uuid) -> bool;
  pub fn qt_core_c_QUuid_set_data1(this_ptr: *mut ::uuid::Uuid, value: ::libc::c_uint);
  pub fn qt_core_c_QUuid_set_data2(this_ptr: *mut ::uuid::Uuid, value: ::libc::c_ushort);
  pub fn qt_core_c_QUuid_set_data3(this_ptr: *mut ::uuid::Uuid, value: ::libc::c_ushort);
  pub fn qt_core_c_QUuid_toByteArray_to_output(this_ptr: *const ::uuid::Uuid, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUuid_toRfc4122_to_output(this_ptr: *const ::uuid::Uuid, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QUuid_toString_to_output(this_ptr: *const ::uuid::Uuid, output: *mut ::string::String);

  // Header: QVariant
  pub fn qt_core_c_QVariant_G_operator_shl_QDataStream_QVariant(s: *mut ::data_stream::DataStream, p: *const ::variant::Variant) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QVariant_G_operator_shl_QDataStream_QVariant_Type(s: *mut ::data_stream::DataStream, p: *const ::variant::Type) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QVariant_G_operator_shl_to_output(arg1: *const ::debug::Debug, arg2: *const ::variant::Type, output: *mut ::debug::Debug);
  pub fn qt_core_c_QVariant_G_operator_shr_QDataStream_QVariant(s: *mut ::data_stream::DataStream, p: *mut ::variant::Variant) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QVariant_G_operator_shr_QDataStream_QVariant_Type(s: *mut ::data_stream::DataStream, p: *mut ::variant::Type) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QVariant_G_swap(value1: *mut ::variant::Variant, value2: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_canConvert(this_ptr: *const ::variant::Variant, targetTypeId: ::libc::c_int) -> bool;
  pub fn qt_core_c_QVariant_clear(this_ptr: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QBitArray(bitarray: *const ::bit_array::BitArray, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QByteArray(bytearray: *const ::byte_array::ByteArray, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QChar(qchar: *const ::char::Char, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QDataStream(s: *mut ::data_stream::DataStream, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QDate(date: *const ::date::Date, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QDateTime(datetime: *const ::date_time::DateTime, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QEasingCurve(easing: *const ::easing_curve::EasingCurve, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QHash_QString_QVariant(hash: *const ::hash::HashStringVariant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QJsonArray(jsonArray: *const ::json_array::JsonArray, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QJsonDocument(jsonDocument: *const ::json_document::JsonDocument, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QJsonObject(jsonObject: *const ::json_object::JsonObject, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QJsonValue(jsonValue: *const ::json_value::JsonValue, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QLatin1String(string: *const ::latin1_string::Latin1String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QLine(line: *const ::line::Line, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QLineF(line: *const ::line_f::LineF, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QList_QVariant(list: *const ::list::ListVariant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QLocale(locale: *const ::locale::Locale, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QMap_QString_QVariant(map: *const ::map::MapStringVariant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QModelIndex(modelIndex: *const ::model_index::ModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QPersistentModelIndex(modelIndex: *const ::persistent_model_index::PersistentModelIndex, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QPoint(pt: *const ::point::Point, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QPointF(pt: *const ::point_f::PointF, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QRect(rect: *const ::rect::Rect, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QRectF(rect: *const ::rect_f::RectF, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QRegExp(regExp: *const ::reg_exp::RegExp, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QRegularExpression(re: *const ::regular_expression::RegularExpression, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QSize(size: *const ::size::Size, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QSizeF(size: *const ::size_f::SizeF, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QString(string: *const ::string::String, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QStringList(stringlist: *const ::string_list::StringList, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QTime(time: *const ::time::Time, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QUrl(url: *const ::url::Url, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QUuid(uuid: *const ::uuid::Uuid, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QVariant(other: *const ::variant::Variant, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_QVariant_Type(type_: ::variant::Type, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_bool(b: bool, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_char(str: *const ::libc::c_char, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_double(d: ::libc::c_double, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_float(f: ::libc::c_float, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_int(i: ::libc::c_int, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_int_void(typeId: ::libc::c_int, copy: *const ::libc::c_void, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_int_void_unsigned_int(typeId: ::libc::c_int, copy: *const ::libc::c_void, flags: ::libc::c_uint, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_no_args(output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_qlonglong(ll: i64, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_qulonglong(ull: u64, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_constructor_unsigned_int(ui: ::libc::c_uint, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_destructor(this_ptr: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_isNull(this_ptr: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_isValid(this_ptr: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_load(this_ptr: *mut ::variant::Variant, ds: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QVariant_nameToType(name: *const ::libc::c_char) -> ::variant::Type;
  pub fn qt_core_c_QVariant_operator_assign(this_ptr: *mut ::variant::Variant, other: *const ::variant::Variant) -> *mut ::variant::Variant;
  pub fn qt_core_c_QVariant_operator_eq(this_ptr: *const ::variant::Variant, v: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_operator_ge(this_ptr: *const ::variant::Variant, v: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_operator_gt(this_ptr: *const ::variant::Variant, v: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_operator_le(this_ptr: *const ::variant::Variant, v: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_operator_lt(this_ptr: *const ::variant::Variant, v: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_operator_neq(this_ptr: *const ::variant::Variant, v: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_save(this_ptr: *const ::variant::Variant, ds: *mut ::data_stream::DataStream);
  pub fn qt_core_c_QVariant_swap(this_ptr: *mut ::variant::Variant, other: *mut ::variant::Variant);
  pub fn qt_core_c_QVariant_toBitArray_to_output(this_ptr: *const ::variant::Variant, output: *mut ::bit_array::BitArray);
  pub fn qt_core_c_QVariant_toBool(this_ptr: *const ::variant::Variant) -> bool;
  pub fn qt_core_c_QVariant_toByteArray_to_output(this_ptr: *const ::variant::Variant, output: *mut ::byte_array::ByteArray);
  pub fn qt_core_c_QVariant_toChar_to_output(this_ptr: *const ::variant::Variant, output: *mut ::char::Char);
  pub fn qt_core_c_QVariant_toDateTime_to_output(this_ptr: *const ::variant::Variant, output: *mut ::date_time::DateTime);
  pub fn qt_core_c_QVariant_toDate_to_output(this_ptr: *const ::variant::Variant, output: *mut ::date::Date);
  pub fn qt_core_c_QVariant_toDouble_no_args(this_ptr: *const ::variant::Variant) -> ::libc::c_double;
  pub fn qt_core_c_QVariant_toDouble_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QVariant_toEasingCurve_to_output(this_ptr: *const ::variant::Variant, output: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QVariant_toFloat_no_args(this_ptr: *const ::variant::Variant) -> ::libc::c_float;
  pub fn qt_core_c_QVariant_toFloat_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> ::libc::c_float;
  pub fn qt_core_c_QVariant_toHash_to_output(this_ptr: *const ::variant::Variant, output: *mut ::hash::HashStringVariant);
  pub fn qt_core_c_QVariant_toInt_no_args(this_ptr: *const ::variant::Variant) -> ::libc::c_int;
  pub fn qt_core_c_QVariant_toInt_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> ::libc::c_int;
  pub fn qt_core_c_QVariant_toJsonArray_to_output(this_ptr: *const ::variant::Variant, output: *mut ::json_array::JsonArray);
  pub fn qt_core_c_QVariant_toJsonDocument_to_output(this_ptr: *const ::variant::Variant, output: *mut ::json_document::JsonDocument);
  pub fn qt_core_c_QVariant_toJsonObject_to_output(this_ptr: *const ::variant::Variant, output: *mut ::json_object::JsonObject);
  pub fn qt_core_c_QVariant_toJsonValue_to_output(this_ptr: *const ::variant::Variant, output: *mut ::json_value::JsonValue);
  pub fn qt_core_c_QVariant_toLineF_to_output(this_ptr: *const ::variant::Variant, output: *mut ::line_f::LineF);
  pub fn qt_core_c_QVariant_toLine_to_output(this_ptr: *const ::variant::Variant, output: *mut ::line::Line);
  pub fn qt_core_c_QVariant_toList_to_output(this_ptr: *const ::variant::Variant, output: *mut ::list::ListVariant);
  pub fn qt_core_c_QVariant_toLocale_to_output(this_ptr: *const ::variant::Variant, output: *mut ::locale::Locale);
  pub fn qt_core_c_QVariant_toLongLong_no_args(this_ptr: *const ::variant::Variant) -> i64;
  pub fn qt_core_c_QVariant_toLongLong_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> i64;
  pub fn qt_core_c_QVariant_toMap_to_output(this_ptr: *const ::variant::Variant, output: *mut ::map::MapStringVariant);
  pub fn qt_core_c_QVariant_toModelIndex_to_output(this_ptr: *const ::variant::Variant, output: *mut ::model_index::ModelIndex);
  pub fn qt_core_c_QVariant_toPersistentModelIndex_to_output(this_ptr: *const ::variant::Variant, output: *mut ::persistent_model_index::PersistentModelIndex);
  pub fn qt_core_c_QVariant_toPointF_to_output(this_ptr: *const ::variant::Variant, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QVariant_toPoint_to_output(this_ptr: *const ::variant::Variant, output: *mut ::point::Point);
  pub fn qt_core_c_QVariant_toReal_no_args(this_ptr: *const ::variant::Variant) -> ::libc::c_double;
  pub fn qt_core_c_QVariant_toReal_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> ::libc::c_double;
  pub fn qt_core_c_QVariant_toRectF_to_output(this_ptr: *const ::variant::Variant, output: *mut ::rect_f::RectF);
  pub fn qt_core_c_QVariant_toRect_to_output(this_ptr: *const ::variant::Variant, output: *mut ::rect::Rect);
  pub fn qt_core_c_QVariant_toRegExp_to_output(this_ptr: *const ::variant::Variant, output: *mut ::reg_exp::RegExp);
  pub fn qt_core_c_QVariant_toRegularExpression_to_output(this_ptr: *const ::variant::Variant, output: *mut ::regular_expression::RegularExpression);
  pub fn qt_core_c_QVariant_toSizeF_to_output(this_ptr: *const ::variant::Variant, output: *mut ::size_f::SizeF);
  pub fn qt_core_c_QVariant_toSize_to_output(this_ptr: *const ::variant::Variant, output: *mut ::size::Size);
  pub fn qt_core_c_QVariant_toStringList_to_output(this_ptr: *const ::variant::Variant, output: *mut ::string_list::StringList);
  pub fn qt_core_c_QVariant_toString_to_output(this_ptr: *const ::variant::Variant, output: *mut ::string::String);
  pub fn qt_core_c_QVariant_toTime_to_output(this_ptr: *const ::variant::Variant, output: *mut ::time::Time);
  pub fn qt_core_c_QVariant_toUInt_no_args(this_ptr: *const ::variant::Variant) -> ::libc::c_uint;
  pub fn qt_core_c_QVariant_toUInt_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> ::libc::c_uint;
  pub fn qt_core_c_QVariant_toULongLong_no_args(this_ptr: *const ::variant::Variant) -> u64;
  pub fn qt_core_c_QVariant_toULongLong_ok(this_ptr: *const ::variant::Variant, ok: *mut bool) -> u64;
  pub fn qt_core_c_QVariant_toUrl_to_output(this_ptr: *const ::variant::Variant, output: *mut ::url::Url);
  pub fn qt_core_c_QVariant_toUuid_to_output(this_ptr: *const ::variant::Variant, output: *mut ::uuid::Uuid);
  pub fn qt_core_c_QVariant_type(this_ptr: *const ::variant::Variant) -> ::variant::Type;
  pub fn qt_core_c_QVariant_typeName(this_ptr: *const ::variant::Variant) -> *const ::libc::c_char;
  pub fn qt_core_c_QVariant_typeToName(typeId: ::libc::c_int) -> *const ::libc::c_char;
  pub fn qt_core_c_QVariant_userType(this_ptr: *const ::variant::Variant) -> ::libc::c_int;

  // Header: QVariantAnimation
  pub fn qt_core_c_QVariantAnimation_G_dynamic_cast_QVariantAnimation_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QVariantAnimation_G_dynamic_cast_QVariantAnimation_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QVariantAnimation_G_static_cast_QAbstractAnimation_ptr(ptr: *mut ::variant_animation::VariantAnimation) -> *mut ::abstract_animation::AbstractAnimation;
  pub fn qt_core_c_QVariantAnimation_G_static_cast_QObject_ptr(ptr: *mut ::variant_animation::VariantAnimation) -> *mut ::object::Object;
  pub fn qt_core_c_QVariantAnimation_G_static_cast_QVariantAnimation_ptr_QAbstractAnimation(ptr: *mut ::abstract_animation::AbstractAnimation) -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QVariantAnimation_G_static_cast_QVariantAnimation_ptr_QObject(ptr: *mut ::object::Object) -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QVariantAnimation_currentValue_to_output(this_ptr: *const ::variant_animation::VariantAnimation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_delete(this_ptr: *mut ::variant_animation::VariantAnimation);
  pub fn qt_core_c_QVariantAnimation_duration(this_ptr: *const ::variant_animation::VariantAnimation) -> ::libc::c_int;
  pub fn qt_core_c_QVariantAnimation_easingCurve_to_output(this_ptr: *const ::variant_animation::VariantAnimation, output: *mut ::easing_curve::EasingCurve);
  pub fn qt_core_c_QVariantAnimation_endValue_to_output(this_ptr: *const ::variant_animation::VariantAnimation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_keyValueAt_to_output(this_ptr: *const ::variant_animation::VariantAnimation, step: ::libc::c_double, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_keyValues_to_output(this_ptr: *const ::variant_animation::VariantAnimation, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVariantAnimation_metaObject(this_ptr: *const ::variant_animation::VariantAnimation) -> *const ::meta_object::MetaObject;
  pub fn qt_core_c_QVariantAnimation_new_no_args() -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QVariantAnimation_new_parent(parent: *mut ::object::Object) -> *mut ::variant_animation::VariantAnimation;
  pub fn qt_core_c_QVariantAnimation_setDuration(this_ptr: *mut ::variant_animation::VariantAnimation, msecs: ::libc::c_int);
  pub fn qt_core_c_QVariantAnimation_setEasingCurve(this_ptr: *mut ::variant_animation::VariantAnimation, easing: *const ::easing_curve::EasingCurve);
  pub fn qt_core_c_QVariantAnimation_setEndValue(this_ptr: *mut ::variant_animation::VariantAnimation, value: *const ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_setKeyValueAt(this_ptr: *mut ::variant_animation::VariantAnimation, step: ::libc::c_double, value: *const ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_setKeyValues(this_ptr: *mut ::variant_animation::VariantAnimation, values: *const ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVariantAnimation_setStartValue(this_ptr: *mut ::variant_animation::VariantAnimation, value: *const ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_startValue_to_output(this_ptr: *const ::variant_animation::VariantAnimation, output: *mut ::variant::Variant);
  pub fn qt_core_c_QVariantAnimation_trUtf8_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);
  pub fn qt_core_c_QVariantAnimation_tr_to_output(s: *const ::libc::c_char, c: *const ::libc::c_char, n: ::libc::c_int, output: *mut ::string::String);

  // Header: QVector
  pub fn qt_core_c_QVector_QPair_double_QVariant_append_l(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, l: *const ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_append_t(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_at(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_back(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant) -> *mut ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_back_const(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_capacity(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_clear(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_constData(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_constFirst(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_constLast(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_constructor_no_args(output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_constructor_size_t(size: ::libc::c_int, t: *const ::pair::PairCDoubleVariant, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_constructor_v(v: *const ::vector::VectorPairPairCDoubleVariant, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_contains(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_count_no_args(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_count_t(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_data(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant) -> *mut ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_data_const(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_destructor(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_empty(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_endsWith(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_fill_t(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_fill_t_size(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant, size: ::libc::c_int) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_first(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant) -> *mut ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_first_const(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_front(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant) -> *mut ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_front_const(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_indexOf_t(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_indexOf_t_from(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_insert_i_n_t(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, n: ::libc::c_int, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_insert_i_t(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_isEmpty(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_last(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant) -> *mut ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_lastIndexOf_t(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_lastIndexOf_t_from(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_last_const(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_length(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_mid_to_output_pos(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, pos: ::libc::c_int, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_mid_to_output_pos_len(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_move(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_add_assign_l(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, l: *const ::vector::VectorPairPairCDoubleVariant) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_add_assign_t(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_add_to_output(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, l: *const ::vector::VectorPairPairCDoubleVariant, output: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_assign(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, v: *const ::vector::VectorPairPairCDoubleVariant) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_eq(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, v: *const ::vector::VectorPairPairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_index(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int) -> *mut ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_index_const(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int) -> *const ::pair::PairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_neq(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, v: *const ::vector::VectorPairPairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_shl_l(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, l: *const ::vector::VectorPairPairCDoubleVariant) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_operator_shl_t(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> *mut ::vector::VectorPairPairCDoubleVariant;
  pub fn qt_core_c_QVector_QPair_double_QVariant_pop_back(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_pop_front(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_prepend(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_push_back(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_push_front(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_removeAll(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_removeAt(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QPair_double_QVariant_removeFirst(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_removeLast(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_removeOne(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_remove_i(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QPair_double_QVariant_remove_i_n(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QPair_double_QVariant_replace(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, t: *const ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_reserve(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QPair_double_QVariant_resize(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QPair_double_QVariant_size(this_ptr: *const ::vector::VectorPairPairCDoubleVariant) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPair_double_QVariant_squeeze(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_startsWith(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, t: *const ::pair::PairCDoubleVariant) -> bool;
  pub fn qt_core_c_QVector_QPair_double_QVariant_swap(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, other: *mut ::vector::VectorPairPairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_takeAt_to_output(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_takeFirst_to_output(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_takeLast_to_output(this_ptr: *mut ::vector::VectorPairPairCDoubleVariant, output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_value_to_output_i(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPair_double_QVariant_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorPairPairCDoubleVariant, i: ::libc::c_int, defaultValue: *const ::pair::PairCDoubleVariant, output: *mut ::pair::PairCDoubleVariant);
  pub fn qt_core_c_QVector_QPointF_append_l(this_ptr: *mut ::vector::VectorPointF, l: *const ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_append_t(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_at(this_ptr: *const ::vector::VectorPointF, i: ::libc::c_int) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_back(this_ptr: *mut ::vector::VectorPointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_back_const(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_capacity(this_ptr: *const ::vector::VectorPointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_clear(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_constData(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_constFirst(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_constLast(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_constructor_no_args(output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_constructor_size_t(size: ::libc::c_int, t: *const ::point_f::PointF, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_constructor_v(v: *const ::vector::VectorPointF, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_contains(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_count_no_args(this_ptr: *const ::vector::VectorPointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_count_t(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_data(this_ptr: *mut ::vector::VectorPointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_data_const(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_destructor(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_empty(this_ptr: *const ::vector::VectorPointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_endsWith(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_fill_t(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_fill_t_size(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF, size: ::libc::c_int) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_first(this_ptr: *mut ::vector::VectorPointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_first_const(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_front(this_ptr: *mut ::vector::VectorPointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_front_const(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_indexOf_t(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_indexOf_t_from(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_insert_i_n_t(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int, n: ::libc::c_int, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_insert_i_t(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_isEmpty(this_ptr: *const ::vector::VectorPointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_last(this_ptr: *mut ::vector::VectorPointF) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_lastIndexOf_t(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_lastIndexOf_t_from(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_last_const(this_ptr: *const ::vector::VectorPointF) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_length(this_ptr: *const ::vector::VectorPointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_mid_to_output_pos(this_ptr: *const ::vector::VectorPointF, pos: ::libc::c_int, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_mid_to_output_pos_len(this_ptr: *const ::vector::VectorPointF, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_move(this_ptr: *mut ::vector::VectorPointF, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QPointF_operator_add_assign_l(this_ptr: *mut ::vector::VectorPointF, l: *const ::vector::VectorPointF) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_operator_add_assign_t(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_operator_add_to_output(this_ptr: *const ::vector::VectorPointF, l: *const ::vector::VectorPointF, output: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_operator_assign(this_ptr: *mut ::vector::VectorPointF, v: *const ::vector::VectorPointF) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_operator_eq(this_ptr: *const ::vector::VectorPointF, v: *const ::vector::VectorPointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_operator_index(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int) -> *mut ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_operator_index_const(this_ptr: *const ::vector::VectorPointF, i: ::libc::c_int) -> *const ::point_f::PointF;
  pub fn qt_core_c_QVector_QPointF_operator_neq(this_ptr: *const ::vector::VectorPointF, v: *const ::vector::VectorPointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_operator_shl_l(this_ptr: *mut ::vector::VectorPointF, l: *const ::vector::VectorPointF) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_operator_shl_t(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF) -> *mut ::vector::VectorPointF;
  pub fn qt_core_c_QVector_QPointF_pop_back(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_pop_front(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_prepend(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_push_back(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_push_front(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_removeAll(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_removeAt(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QPointF_removeFirst(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_removeLast(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_removeOne(this_ptr: *mut ::vector::VectorPointF, t: *const ::point_f::PointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_remove_i(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QPointF_remove_i_n(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QPointF_replace(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int, t: *const ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_reserve(this_ptr: *mut ::vector::VectorPointF, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QPointF_resize(this_ptr: *mut ::vector::VectorPointF, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QPointF_size(this_ptr: *const ::vector::VectorPointF) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QPointF_squeeze(this_ptr: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_startsWith(this_ptr: *const ::vector::VectorPointF, t: *const ::point_f::PointF) -> bool;
  pub fn qt_core_c_QVector_QPointF_swap(this_ptr: *mut ::vector::VectorPointF, other: *mut ::vector::VectorPointF);
  pub fn qt_core_c_QVector_QPointF_takeAt_to_output(this_ptr: *mut ::vector::VectorPointF, i: ::libc::c_int, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_takeFirst_to_output(this_ptr: *mut ::vector::VectorPointF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_takeLast_to_output(this_ptr: *mut ::vector::VectorPointF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_value_to_output_i(this_ptr: *const ::vector::VectorPointF, i: ::libc::c_int, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QVector_QPointF_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorPointF, i: ::libc::c_int, defaultValue: *const ::point_f::PointF, output: *mut ::point_f::PointF);
  pub fn qt_core_c_QVector_QStaticPlugin_append_l(this_ptr: *mut ::vector::VectorStaticPlugin, l: *const ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_append_t(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_at(this_ptr: *const ::vector::VectorStaticPlugin, i: ::libc::c_int) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_back(this_ptr: *mut ::vector::VectorStaticPlugin) -> *mut ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_back_const(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_capacity(this_ptr: *const ::vector::VectorStaticPlugin) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStaticPlugin_clear(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_constData(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_constFirst(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_constLast(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_constructor_no_args(output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_constructor_size_t(size: ::libc::c_int, t: *const ::static_plugin::StaticPlugin, output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_constructor_v(v: *const ::vector::VectorStaticPlugin, output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_count(this_ptr: *const ::vector::VectorStaticPlugin) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStaticPlugin_data(this_ptr: *mut ::vector::VectorStaticPlugin) -> *mut ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_data_const(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_destructor(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_empty(this_ptr: *const ::vector::VectorStaticPlugin) -> bool;
  pub fn qt_core_c_QVector_QStaticPlugin_fill_t(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_fill_t_size(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin, size: ::libc::c_int) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_first(this_ptr: *mut ::vector::VectorStaticPlugin) -> *mut ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_first_const(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_front(this_ptr: *mut ::vector::VectorStaticPlugin) -> *mut ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_front_const(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_insert_i_n_t(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int, n: ::libc::c_int, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_insert_i_t(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_isEmpty(this_ptr: *const ::vector::VectorStaticPlugin) -> bool;
  pub fn qt_core_c_QVector_QStaticPlugin_last(this_ptr: *mut ::vector::VectorStaticPlugin) -> *mut ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_last_const(this_ptr: *const ::vector::VectorStaticPlugin) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_length(this_ptr: *const ::vector::VectorStaticPlugin) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStaticPlugin_mid_to_output_pos(this_ptr: *const ::vector::VectorStaticPlugin, pos: ::libc::c_int, output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_mid_to_output_pos_len(this_ptr: *const ::vector::VectorStaticPlugin, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_move(this_ptr: *mut ::vector::VectorStaticPlugin, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QStaticPlugin_operator_add_assign_l(this_ptr: *mut ::vector::VectorStaticPlugin, l: *const ::vector::VectorStaticPlugin) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_operator_add_assign_t(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_operator_add_to_output(this_ptr: *const ::vector::VectorStaticPlugin, l: *const ::vector::VectorStaticPlugin, output: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_operator_assign(this_ptr: *mut ::vector::VectorStaticPlugin, v: *const ::vector::VectorStaticPlugin) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_operator_index(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int) -> *mut ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_operator_index_const(this_ptr: *const ::vector::VectorStaticPlugin, i: ::libc::c_int) -> *const ::static_plugin::StaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_operator_shl_l(this_ptr: *mut ::vector::VectorStaticPlugin, l: *const ::vector::VectorStaticPlugin) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_operator_shl_t(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin) -> *mut ::vector::VectorStaticPlugin;
  pub fn qt_core_c_QVector_QStaticPlugin_pop_back(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_pop_front(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_prepend(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_push_back(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_push_front(this_ptr: *mut ::vector::VectorStaticPlugin, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_removeAt(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QStaticPlugin_removeFirst(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_removeLast(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_remove_i(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QStaticPlugin_remove_i_n(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QStaticPlugin_replace(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int, t: *const ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_reserve(this_ptr: *mut ::vector::VectorStaticPlugin, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QStaticPlugin_resize(this_ptr: *mut ::vector::VectorStaticPlugin, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QStaticPlugin_size(this_ptr: *const ::vector::VectorStaticPlugin) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStaticPlugin_squeeze(this_ptr: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_swap(this_ptr: *mut ::vector::VectorStaticPlugin, other: *mut ::vector::VectorStaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_takeAt_to_output(this_ptr: *mut ::vector::VectorStaticPlugin, i: ::libc::c_int, output: *mut ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_takeFirst_to_output(this_ptr: *mut ::vector::VectorStaticPlugin, output: *mut ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_takeLast_to_output(this_ptr: *mut ::vector::VectorStaticPlugin, output: *mut ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_value_to_output_i(this_ptr: *const ::vector::VectorStaticPlugin, i: ::libc::c_int, output: *mut ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStaticPlugin_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorStaticPlugin, i: ::libc::c_int, defaultValue: *const ::static_plugin::StaticPlugin, output: *mut ::static_plugin::StaticPlugin);
  pub fn qt_core_c_QVector_QStringRef_append_l(this_ptr: *mut ::vector::VectorStringRef, l: *const ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_append_t(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_at(this_ptr: *const ::vector::VectorStringRef, i: ::libc::c_int) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_back(this_ptr: *mut ::vector::VectorStringRef) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_back_const(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_capacity(this_ptr: *const ::vector::VectorStringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_clear(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_constData(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_constFirst(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_constLast(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_constructor_no_args(output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_constructor_size_t(size: ::libc::c_int, t: *const ::string_ref::StringRef, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_constructor_v(v: *const ::vector::VectorStringRef, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_contains(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_count_no_args(this_ptr: *const ::vector::VectorStringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_count_t(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_data(this_ptr: *mut ::vector::VectorStringRef) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_data_const(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_destructor(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_empty(this_ptr: *const ::vector::VectorStringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_endsWith(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_fill_t(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_fill_t_size(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef, size: ::libc::c_int) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_first(this_ptr: *mut ::vector::VectorStringRef) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_first_const(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_front(this_ptr: *mut ::vector::VectorStringRef) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_front_const(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_indexOf_t(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_indexOf_t_from(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_insert_i_n_t(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int, n: ::libc::c_int, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_insert_i_t(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_isEmpty(this_ptr: *const ::vector::VectorStringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_last(this_ptr: *mut ::vector::VectorStringRef) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_lastIndexOf_t(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_lastIndexOf_t_from(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_last_const(this_ptr: *const ::vector::VectorStringRef) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_length(this_ptr: *const ::vector::VectorStringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_mid_to_output_pos(this_ptr: *const ::vector::VectorStringRef, pos: ::libc::c_int, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_mid_to_output_pos_len(this_ptr: *const ::vector::VectorStringRef, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_move(this_ptr: *mut ::vector::VectorStringRef, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QStringRef_operator_add_assign_l(this_ptr: *mut ::vector::VectorStringRef, l: *const ::vector::VectorStringRef) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_operator_add_assign_t(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_operator_add_to_output(this_ptr: *const ::vector::VectorStringRef, l: *const ::vector::VectorStringRef, output: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_operator_assign(this_ptr: *mut ::vector::VectorStringRef, v: *const ::vector::VectorStringRef) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_operator_eq(this_ptr: *const ::vector::VectorStringRef, v: *const ::vector::VectorStringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_operator_index(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int) -> *mut ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_operator_index_const(this_ptr: *const ::vector::VectorStringRef, i: ::libc::c_int) -> *const ::string_ref::StringRef;
  pub fn qt_core_c_QVector_QStringRef_operator_neq(this_ptr: *const ::vector::VectorStringRef, v: *const ::vector::VectorStringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_operator_shl_l(this_ptr: *mut ::vector::VectorStringRef, l: *const ::vector::VectorStringRef) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_operator_shl_t(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> *mut ::vector::VectorStringRef;
  pub fn qt_core_c_QVector_QStringRef_pop_back(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_pop_front(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_prepend(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_push_back(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_push_front(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_removeAll(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_removeAt(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QStringRef_removeFirst(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_removeLast(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_removeOne(this_ptr: *mut ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_remove_i(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QStringRef_remove_i_n(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QStringRef_replace(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int, t: *const ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_reserve(this_ptr: *mut ::vector::VectorStringRef, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QStringRef_resize(this_ptr: *mut ::vector::VectorStringRef, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QStringRef_size(this_ptr: *const ::vector::VectorStringRef) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QStringRef_squeeze(this_ptr: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_startsWith(this_ptr: *const ::vector::VectorStringRef, t: *const ::string_ref::StringRef) -> bool;
  pub fn qt_core_c_QVector_QStringRef_swap(this_ptr: *mut ::vector::VectorStringRef, other: *mut ::vector::VectorStringRef);
  pub fn qt_core_c_QVector_QStringRef_takeAt_to_output(this_ptr: *mut ::vector::VectorStringRef, i: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_takeFirst_to_output(this_ptr: *mut ::vector::VectorStringRef, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_takeLast_to_output(this_ptr: *mut ::vector::VectorStringRef, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_value_to_output_i(this_ptr: *const ::vector::VectorStringRef, i: ::libc::c_int, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QStringRef_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorStringRef, i: ::libc::c_int, defaultValue: *const ::string_ref::StringRef, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_append_l(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, l: *const ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_append_t(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_at(this_ptr: *const ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_back(this_ptr: *mut ::vector::VectorTimeZoneOffsetData) -> *mut ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_back_const(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_capacity(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_clear(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constData(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constFirst(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constLast(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constructor_no_args(output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constructor_size_t(size: ::libc::c_int, t: *const ::time_zone::OffsetData, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_constructor_v(v: *const ::vector::VectorTimeZoneOffsetData, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_count(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_data(this_ptr: *mut ::vector::VectorTimeZoneOffsetData) -> *mut ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_data_const(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_destructor(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_empty(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> bool;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_fill_t(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_fill_t_size(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData, size: ::libc::c_int) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_first(this_ptr: *mut ::vector::VectorTimeZoneOffsetData) -> *mut ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_first_const(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_front(this_ptr: *mut ::vector::VectorTimeZoneOffsetData) -> *mut ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_front_const(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_insert_i_n_t(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, n: ::libc::c_int, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_insert_i_t(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_isEmpty(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> bool;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_last(this_ptr: *mut ::vector::VectorTimeZoneOffsetData) -> *mut ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_last_const(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_length(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_mid_to_output_pos(this_ptr: *const ::vector::VectorTimeZoneOffsetData, pos: ::libc::c_int, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_mid_to_output_pos_len(this_ptr: *const ::vector::VectorTimeZoneOffsetData, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_move(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_add_assign_l(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, l: *const ::vector::VectorTimeZoneOffsetData) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_add_assign_t(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_add_to_output(this_ptr: *const ::vector::VectorTimeZoneOffsetData, l: *const ::vector::VectorTimeZoneOffsetData, output: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_assign(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, v: *const ::vector::VectorTimeZoneOffsetData) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_index(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int) -> *mut ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_index_const(this_ptr: *const ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int) -> *const ::time_zone::OffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_shl_l(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, l: *const ::vector::VectorTimeZoneOffsetData) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_operator_shl_t(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData) -> *mut ::vector::VectorTimeZoneOffsetData;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_pop_back(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_pop_front(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_prepend(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_push_back(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_push_front(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_removeAt(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_removeFirst(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_removeLast(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_remove_i(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_remove_i_n(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_replace(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, t: *const ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_reserve(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_resize(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_size(this_ptr: *const ::vector::VectorTimeZoneOffsetData) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_squeeze(this_ptr: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_swap(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, other: *mut ::vector::VectorTimeZoneOffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_takeAt_to_output(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_takeFirst_to_output(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_takeLast_to_output(this_ptr: *mut ::vector::VectorTimeZoneOffsetData, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_value_to_output_i(this_ptr: *const ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QTimeZone_OffsetData_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorTimeZoneOffsetData, i: ::libc::c_int, defaultValue: *const ::time_zone::OffsetData, output: *mut ::time_zone::OffsetData);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_append_l(this_ptr: *mut ::vector::VectorXmlStreamAttribute, l: *const ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_append_t(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_at(this_ptr: *const ::vector::VectorXmlStreamAttribute, i: ::libc::c_int) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_back(this_ptr: *mut ::vector::VectorXmlStreamAttribute) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_back_const(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_capacity(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_clear(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constData(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constFirst(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constLast(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constructor_no_args(output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constructor_size_t(size: ::libc::c_int, t: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_constructor_v(v: *const ::vector::VectorXmlStreamAttribute, output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_contains(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_count_no_args(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_count_t(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_data(this_ptr: *mut ::vector::VectorXmlStreamAttribute) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_data_const(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_destructor(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_empty(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_endsWith(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_fill_t(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_fill_t_size(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute, size: ::libc::c_int) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_first(this_ptr: *mut ::vector::VectorXmlStreamAttribute) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_first_const(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_front(this_ptr: *mut ::vector::VectorXmlStreamAttribute) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_front_const(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_indexOf_t(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_indexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_insert_i_n_t(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, n: ::libc::c_int, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_insert_i_t(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_isEmpty(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_last(this_ptr: *mut ::vector::VectorXmlStreamAttribute) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_lastIndexOf_t(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_lastIndexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_last_const(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_length(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_mid_to_output_pos(this_ptr: *const ::vector::VectorXmlStreamAttribute, pos: ::libc::c_int, output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_mid_to_output_pos_len(this_ptr: *const ::vector::VectorXmlStreamAttribute, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_move(this_ptr: *mut ::vector::VectorXmlStreamAttribute, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_add_assign_l(this_ptr: *mut ::vector::VectorXmlStreamAttribute, l: *const ::vector::VectorXmlStreamAttribute) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_add_assign_t(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_add_to_output(this_ptr: *const ::vector::VectorXmlStreamAttribute, l: *const ::vector::VectorXmlStreamAttribute, output: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_assign(this_ptr: *mut ::vector::VectorXmlStreamAttribute, v: *const ::vector::VectorXmlStreamAttribute) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_eq(this_ptr: *const ::vector::VectorXmlStreamAttribute, v: *const ::vector::VectorXmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_index(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_index_const(this_ptr: *const ::vector::VectorXmlStreamAttribute, i: ::libc::c_int) -> *const ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_neq(this_ptr: *const ::vector::VectorXmlStreamAttribute, v: *const ::vector::VectorXmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_shl_l(this_ptr: *mut ::vector::VectorXmlStreamAttribute, l: *const ::vector::VectorXmlStreamAttribute) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_operator_shl_t(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_pop_back(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_pop_front(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_prepend(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_push_back(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_push_front(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_removeAll(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_removeAt(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_removeFirst(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_removeLast(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_removeOne(this_ptr: *mut ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_remove_i(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_remove_i_n(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_replace(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, t: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_reserve(this_ptr: *mut ::vector::VectorXmlStreamAttribute, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_resize(this_ptr: *mut ::vector::VectorXmlStreamAttribute, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_size(this_ptr: *const ::vector::VectorXmlStreamAttribute) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_squeeze(this_ptr: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_startsWith(this_ptr: *const ::vector::VectorXmlStreamAttribute, t: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamAttribute_swap(this_ptr: *mut ::vector::VectorXmlStreamAttribute, other: *mut ::vector::VectorXmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_takeAt_to_output(this_ptr: *mut ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_takeFirst_to_output(this_ptr: *mut ::vector::VectorXmlStreamAttribute, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_takeLast_to_output(this_ptr: *mut ::vector::VectorXmlStreamAttribute, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_value_to_output_i(this_ptr: *const ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamAttribute_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorXmlStreamAttribute, i: ::libc::c_int, defaultValue: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_append_l(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, l: *const ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_append_t(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_at(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_back(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_back_const(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_capacity(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_clear(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constData(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constFirst(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constLast(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constructor_no_args(output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constructor_size_t(size: ::libc::c_int, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_constructor_v(v: *const ::vector::VectorXmlStreamEntityDeclaration, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_contains(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_count_no_args(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_count_t(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_data(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_data_const(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_destructor(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_empty(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_endsWith(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_fill_t(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_fill_t_size(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, size: ::libc::c_int) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_first(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_first_const(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_front(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_front_const(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_indexOf_t(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_indexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_insert_i_n_t(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, n: ::libc::c_int, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_insert_i_t(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_isEmpty(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_last(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_lastIndexOf_t(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_lastIndexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_last_const(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_length(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_mid_to_output_pos(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, pos: ::libc::c_int, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_mid_to_output_pos_len(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_move(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_add_assign_l(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, l: *const ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_add_assign_t(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_add_to_output(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, l: *const ::vector::VectorXmlStreamEntityDeclaration, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_assign(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, v: *const ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_eq(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, v: *const ::vector::VectorXmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_index(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_index_const(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int) -> *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_neq(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, v: *const ::vector::VectorXmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_shl_l(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, l: *const ::vector::VectorXmlStreamEntityDeclaration) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_operator_shl_t(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> *mut ::vector::VectorXmlStreamEntityDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_pop_back(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_pop_front(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_prepend(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_push_back(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_push_front(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_removeAll(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_removeAt(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_removeFirst(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_removeLast(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_removeOne(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_remove_i(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_remove_i_n(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_replace(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_reserve(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_resize(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_size(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_squeeze(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_startsWith(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, t: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_swap(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, other: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_takeAt_to_output(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_takeFirst_to_output(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_takeLast_to_output(this_ptr: *mut ::vector::VectorXmlStreamEntityDeclaration, output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_value_to_output_i(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamEntityDeclaration_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorXmlStreamEntityDeclaration, i: ::libc::c_int, defaultValue: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_append_l(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, l: *const ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_append_t(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_at(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_back(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_back_const(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_capacity(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_clear(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constData(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constFirst(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constLast(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constructor_no_args(output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constructor_size_t(size: ::libc::c_int, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_constructor_v(v: *const ::vector::VectorXmlStreamNamespaceDeclaration, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_contains(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_count_no_args(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_count_t(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_data(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_data_const(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_destructor(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_empty(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_endsWith(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_fill_t(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_fill_t_size(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, size: ::libc::c_int) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_first(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_first_const(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_front(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_front_const(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_indexOf_t(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_indexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_insert_i_n_t(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, n: ::libc::c_int, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_insert_i_t(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_isEmpty(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_last(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_lastIndexOf_t(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_lastIndexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_last_const(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_length(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_mid_to_output_pos(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, pos: ::libc::c_int, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_mid_to_output_pos_len(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_move(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_add_assign_l(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, l: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_add_assign_t(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_add_to_output(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, l: *const ::vector::VectorXmlStreamNamespaceDeclaration, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_assign(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, v: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_eq(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, v: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_index(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_index_const(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int) -> *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_neq(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, v: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_shl_l(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, l: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_operator_shl_t(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> *mut ::vector::VectorXmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_pop_back(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_pop_front(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_prepend(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_push_back(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_push_front(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_removeAll(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_removeAt(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_removeFirst(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_removeLast(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_removeOne(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_remove_i(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_remove_i_n(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_replace(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_reserve(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_resize(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_size(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_squeeze(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_startsWith(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, t: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_swap(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, other: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_takeAt_to_output(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_takeFirst_to_output(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_takeLast_to_output(this_ptr: *mut ::vector::VectorXmlStreamNamespaceDeclaration, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_value_to_output_i(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNamespaceDeclaration_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorXmlStreamNamespaceDeclaration, i: ::libc::c_int, defaultValue: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_append_l(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, l: *const ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_append_t(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_at(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_back(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_back_const(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_capacity(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_clear(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constData(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constFirst(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constLast(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constructor_no_args(output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constructor_size_t(size: ::libc::c_int, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_constructor_v(v: *const ::vector::VectorXmlStreamNotationDeclaration, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_contains(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_count_no_args(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_count_t(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_data(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_data_const(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_destructor(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_empty(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_endsWith(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_fill_t(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_fill_t_size(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, size: ::libc::c_int) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_first(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_first_const(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_front(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_front_const(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_indexOf_t(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_indexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_insert_i_n_t(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, n: ::libc::c_int, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_insert_i_t(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_isEmpty(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_last(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_lastIndexOf_t(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_lastIndexOf_t_from(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_last_const(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_length(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_mid_to_output_pos(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, pos: ::libc::c_int, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_mid_to_output_pos_len(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_move(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_add_assign_l(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, l: *const ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_add_assign_t(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_add_to_output(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, l: *const ::vector::VectorXmlStreamNotationDeclaration, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_assign(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, v: *const ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_eq(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, v: *const ::vector::VectorXmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_index(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_index_const(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int) -> *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_neq(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, v: *const ::vector::VectorXmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_shl_l(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, l: *const ::vector::VectorXmlStreamNotationDeclaration) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_operator_shl_t(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> *mut ::vector::VectorXmlStreamNotationDeclaration;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_pop_back(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_pop_front(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_prepend(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_push_back(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_push_front(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_removeAll(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_removeAt(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_removeFirst(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_removeLast(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_removeOne(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_remove_i(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_remove_i_n(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_replace(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_reserve(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_resize(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, size: ::libc::c_int);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_size(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration) -> ::libc::c_int;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_squeeze(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_startsWith(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, t: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_swap(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, other: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_takeAt_to_output(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_takeFirst_to_output(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_takeLast_to_output(this_ptr: *mut ::vector::VectorXmlStreamNotationDeclaration, output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_value_to_output_i(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_QXmlStreamNotationDeclaration_value_to_output_i_defaultValue(this_ptr: *const ::vector::VectorXmlStreamNotationDeclaration, i: ::libc::c_int, defaultValue: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QVector_int_append_l(this_ptr: *mut ::vector::VectorCInt, l: *const ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_append_t(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_at(this_ptr: *const ::vector::VectorCInt, i: ::libc::c_int) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_back(this_ptr: *mut ::vector::VectorCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QVector_int_back_const(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_capacity(this_ptr: *const ::vector::VectorCInt) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_clear(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_constData(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_constFirst(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_constLast(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_constructor_no_args(output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_constructor_size_t(size: ::libc::c_int, t: *const ::libc::c_int, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_constructor_v(v: *const ::vector::VectorCInt, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_contains(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QVector_int_count_no_args(this_ptr: *const ::vector::VectorCInt) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_count_t(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_data(this_ptr: *mut ::vector::VectorCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QVector_int_data_const(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_destructor(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_empty(this_ptr: *const ::vector::VectorCInt) -> bool;
  pub fn qt_core_c_QVector_int_endsWith(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QVector_int_fill_t(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_fill_t_size(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int, size: ::libc::c_int) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_first(this_ptr: *mut ::vector::VectorCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QVector_int_first_const(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_fromList_to_output(list: *const ::list::ListCInt, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_front(this_ptr: *mut ::vector::VectorCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QVector_int_front_const(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_indexOf_t(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_indexOf_t_from(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_insert_i_n_t(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int, n: ::libc::c_int, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_insert_i_t(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_isEmpty(this_ptr: *const ::vector::VectorCInt) -> bool;
  pub fn qt_core_c_QVector_int_last(this_ptr: *mut ::vector::VectorCInt) -> *mut ::libc::c_int;
  pub fn qt_core_c_QVector_int_lastIndexOf_t(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_lastIndexOf_t_from(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_last_const(this_ptr: *const ::vector::VectorCInt) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_length(this_ptr: *const ::vector::VectorCInt) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_mid_to_output_pos(this_ptr: *const ::vector::VectorCInt, pos: ::libc::c_int, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_mid_to_output_pos_len(this_ptr: *const ::vector::VectorCInt, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_move(this_ptr: *mut ::vector::VectorCInt, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_int_operator_add_assign_l(this_ptr: *mut ::vector::VectorCInt, l: *const ::vector::VectorCInt) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_operator_add_assign_t(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_operator_add_to_output(this_ptr: *const ::vector::VectorCInt, l: *const ::vector::VectorCInt, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_operator_assign(this_ptr: *mut ::vector::VectorCInt, v: *const ::vector::VectorCInt) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_operator_eq(this_ptr: *const ::vector::VectorCInt, v: *const ::vector::VectorCInt) -> bool;
  pub fn qt_core_c_QVector_int_operator_index(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int) -> *mut ::libc::c_int;
  pub fn qt_core_c_QVector_int_operator_index_const(this_ptr: *const ::vector::VectorCInt, i: ::libc::c_int) -> *const ::libc::c_int;
  pub fn qt_core_c_QVector_int_operator_neq(this_ptr: *const ::vector::VectorCInt, v: *const ::vector::VectorCInt) -> bool;
  pub fn qt_core_c_QVector_int_operator_shl_l(this_ptr: *mut ::vector::VectorCInt, l: *const ::vector::VectorCInt) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_operator_shl_t(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int) -> *mut ::vector::VectorCInt;
  pub fn qt_core_c_QVector_int_pop_back(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_pop_front(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_prepend(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_push_back(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_push_front(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_removeAll(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_removeAt(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int);
  pub fn qt_core_c_QVector_int_removeFirst(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_removeLast(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_removeOne(this_ptr: *mut ::vector::VectorCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QVector_int_remove_i(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int);
  pub fn qt_core_c_QVector_int_remove_i_n(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_int_replace(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int, t: *const ::libc::c_int);
  pub fn qt_core_c_QVector_int_reserve(this_ptr: *mut ::vector::VectorCInt, size: ::libc::c_int);
  pub fn qt_core_c_QVector_int_resize(this_ptr: *mut ::vector::VectorCInt, size: ::libc::c_int);
  pub fn qt_core_c_QVector_int_size(this_ptr: *const ::vector::VectorCInt) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_squeeze(this_ptr: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_startsWith(this_ptr: *const ::vector::VectorCInt, t: *const ::libc::c_int) -> bool;
  pub fn qt_core_c_QVector_int_swap(this_ptr: *mut ::vector::VectorCInt, other: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVector_int_takeAt(this_ptr: *mut ::vector::VectorCInt, i: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_takeFirst(this_ptr: *mut ::vector::VectorCInt) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_takeLast(this_ptr: *mut ::vector::VectorCInt) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_toList_to_output(this_ptr: *const ::vector::VectorCInt, output: *mut ::list::ListCInt);
  pub fn qt_core_c_QVector_int_value_i(this_ptr: *const ::vector::VectorCInt, i: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_int_value_i_defaultValue(this_ptr: *const ::vector::VectorCInt, i: ::libc::c_int, defaultValue: *const ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_append_l(this_ptr: *mut ::vector::VectorCUint, l: *const ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_append_t(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_at(this_ptr: *const ::vector::VectorCUint, i: ::libc::c_int) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_back(this_ptr: *mut ::vector::VectorCUint) -> *mut ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_back_const(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_capacity(this_ptr: *const ::vector::VectorCUint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_clear(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_constData(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_constFirst(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_constLast(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_constructor_no_args(output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_constructor_size(size: ::libc::c_int, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_constructor_size_t(size: ::libc::c_int, t: *const ::libc::c_uint, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_constructor_v(v: *const ::vector::VectorCUint, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_contains(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_count_no_args(this_ptr: *const ::vector::VectorCUint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_count_t(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_data(this_ptr: *mut ::vector::VectorCUint) -> *mut ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_data_const(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_destructor(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_empty(this_ptr: *const ::vector::VectorCUint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_endsWith(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_fill_t(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_fill_t_size(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint, size: ::libc::c_int) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_first(this_ptr: *mut ::vector::VectorCUint) -> *mut ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_first_const(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_front(this_ptr: *mut ::vector::VectorCUint) -> *mut ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_front_const(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_indexOf_t(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_indexOf_t_from(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_insert_i_n_t(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int, n: ::libc::c_int, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_insert_i_t(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_isEmpty(this_ptr: *const ::vector::VectorCUint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_last(this_ptr: *mut ::vector::VectorCUint) -> *mut ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_lastIndexOf_t(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_lastIndexOf_t_from(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint, from: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_last_const(this_ptr: *const ::vector::VectorCUint) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_length(this_ptr: *const ::vector::VectorCUint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_mid_to_output_pos(this_ptr: *const ::vector::VectorCUint, pos: ::libc::c_int, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_mid_to_output_pos_len(this_ptr: *const ::vector::VectorCUint, pos: ::libc::c_int, len: ::libc::c_int, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_move(this_ptr: *mut ::vector::VectorCUint, from: ::libc::c_int, to: ::libc::c_int);
  pub fn qt_core_c_QVector_unsigned_int_operator_add_assign_l(this_ptr: *mut ::vector::VectorCUint, l: *const ::vector::VectorCUint) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_operator_add_assign_t(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_operator_add_to_output(this_ptr: *const ::vector::VectorCUint, l: *const ::vector::VectorCUint, output: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_operator_assign(this_ptr: *mut ::vector::VectorCUint, v: *const ::vector::VectorCUint) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_operator_eq(this_ptr: *const ::vector::VectorCUint, v: *const ::vector::VectorCUint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_operator_index(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int) -> *mut ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_operator_index_const(this_ptr: *const ::vector::VectorCUint, i: ::libc::c_int) -> *const ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_operator_neq(this_ptr: *const ::vector::VectorCUint, v: *const ::vector::VectorCUint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_operator_shl_l(this_ptr: *mut ::vector::VectorCUint, l: *const ::vector::VectorCUint) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_operator_shl_t(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint) -> *mut ::vector::VectorCUint;
  pub fn qt_core_c_QVector_unsigned_int_pop_back(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_pop_front(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_prepend(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_push_back(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_push_front(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_removeAll(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_removeAt(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int);
  pub fn qt_core_c_QVector_unsigned_int_removeFirst(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_removeLast(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_removeOne(this_ptr: *mut ::vector::VectorCUint, t: *const ::libc::c_uint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_remove_i(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int);
  pub fn qt_core_c_QVector_unsigned_int_remove_i_n(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int, n: ::libc::c_int);
  pub fn qt_core_c_QVector_unsigned_int_replace(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int, t: *const ::libc::c_uint);
  pub fn qt_core_c_QVector_unsigned_int_reserve(this_ptr: *mut ::vector::VectorCUint, size: ::libc::c_int);
  pub fn qt_core_c_QVector_unsigned_int_resize(this_ptr: *mut ::vector::VectorCUint, size: ::libc::c_int);
  pub fn qt_core_c_QVector_unsigned_int_size(this_ptr: *const ::vector::VectorCUint) -> ::libc::c_int;
  pub fn qt_core_c_QVector_unsigned_int_squeeze(this_ptr: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_startsWith(this_ptr: *const ::vector::VectorCUint, t: *const ::libc::c_uint) -> bool;
  pub fn qt_core_c_QVector_unsigned_int_swap(this_ptr: *mut ::vector::VectorCUint, other: *mut ::vector::VectorCUint);
  pub fn qt_core_c_QVector_unsigned_int_takeAt(this_ptr: *mut ::vector::VectorCUint, i: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_takeFirst(this_ptr: *mut ::vector::VectorCUint) -> ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_takeLast(this_ptr: *mut ::vector::VectorCUint) -> ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_value_i(this_ptr: *const ::vector::VectorCUint, i: ::libc::c_int) -> ::libc::c_uint;
  pub fn qt_core_c_QVector_unsigned_int_value_i_defaultValue(this_ptr: *const ::vector::VectorCUint, i: ::libc::c_int, defaultValue: *const ::libc::c_uint) -> ::libc::c_uint;

  // Header: QVersionNumber
  pub fn qt_core_c_QVersionNumber_G_operator_eq(lhs: *const ::version_number::VersionNumber, rhs: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_G_operator_ge(lhs: *const ::version_number::VersionNumber, rhs: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_G_operator_gt(lhs: *const ::version_number::VersionNumber, rhs: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_G_operator_le(lhs: *const ::version_number::VersionNumber, rhs: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_G_operator_lt(lhs: *const ::version_number::VersionNumber, rhs: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_G_operator_neq(lhs: *const ::version_number::VersionNumber, rhs: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_G_operator_shl(out: *mut ::data_stream::DataStream, version: *const ::version_number::VersionNumber) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QVersionNumber_G_operator_shl_to_output(arg1: *const ::debug::Debug, version: *const ::version_number::VersionNumber, output: *mut ::debug::Debug);
  pub fn qt_core_c_QVersionNumber_G_operator_shr(in_: *mut ::data_stream::DataStream, version: *mut ::version_number::VersionNumber) -> *mut ::data_stream::DataStream;
  pub fn qt_core_c_QVersionNumber_G_qHash_key(key: *const ::version_number::VersionNumber) -> ::libc::c_uint;
  pub fn qt_core_c_QVersionNumber_G_qHash_key_seed(key: *const ::version_number::VersionNumber, seed: ::libc::c_uint) -> ::libc::c_uint;
  pub fn qt_core_c_QVersionNumber_commonPrefix_to_output(v1: *const ::version_number::VersionNumber, v2: *const ::version_number::VersionNumber, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_compare(v1: *const ::version_number::VersionNumber, v2: *const ::version_number::VersionNumber) -> ::libc::c_int;
  pub fn qt_core_c_QVersionNumber_constructor_maj(maj: ::libc::c_int, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_constructor_maj_min(maj: ::libc::c_int, min: ::libc::c_int, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_constructor_maj_min_mic(maj: ::libc::c_int, min: ::libc::c_int, mic: ::libc::c_int, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_constructor_no_args(output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_constructor_seg(seg: *const ::vector::VectorCInt, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_destructor(this_ptr: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_fromString_to_output_string(string: *const ::string::String, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_fromString_to_output_string_suffixIndex(string: *const ::string::String, suffixIndex: *mut ::libc::c_int, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_isNormalized(this_ptr: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_isNull(this_ptr: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_isPrefixOf(this_ptr: *const ::version_number::VersionNumber, other: *const ::version_number::VersionNumber) -> bool;
  pub fn qt_core_c_QVersionNumber_majorVersion(this_ptr: *const ::version_number::VersionNumber) -> ::libc::c_int;
  pub fn qt_core_c_QVersionNumber_microVersion(this_ptr: *const ::version_number::VersionNumber) -> ::libc::c_int;
  pub fn qt_core_c_QVersionNumber_minorVersion(this_ptr: *const ::version_number::VersionNumber) -> ::libc::c_int;
  pub fn qt_core_c_QVersionNumber_normalized_to_output(this_ptr: *const ::version_number::VersionNumber, output: *mut ::version_number::VersionNumber);
  pub fn qt_core_c_QVersionNumber_segmentAt(this_ptr: *const ::version_number::VersionNumber, index: ::libc::c_int) -> ::libc::c_int;
  pub fn qt_core_c_QVersionNumber_segmentCount(this_ptr: *const ::version_number::VersionNumber) -> ::libc::c_int;
  pub fn qt_core_c_QVersionNumber_segments_to_output(this_ptr: *const ::version_number::VersionNumber, output: *mut ::vector::VectorCInt);
  pub fn qt_core_c_QVersionNumber_toString_to_output(this_ptr: *const ::version_number::VersionNumber, output: *mut ::string::String);

  // Header: QWaitCondition
  pub fn qt_core_c_QWaitCondition_constructor(output: *mut ::wait_condition::WaitCondition);
  pub fn qt_core_c_QWaitCondition_destructor(this_ptr: *mut ::wait_condition::WaitCondition);
  pub fn qt_core_c_QWaitCondition_notify_all(this_ptr: *mut ::wait_condition::WaitCondition);
  pub fn qt_core_c_QWaitCondition_notify_one(this_ptr: *mut ::wait_condition::WaitCondition);
  pub fn qt_core_c_QWaitCondition_wait_lockedMutex(this_ptr: *mut ::wait_condition::WaitCondition, lockedMutex: *mut ::mutex::Mutex) -> bool;
  pub fn qt_core_c_QWaitCondition_wait_lockedMutex_time(this_ptr: *mut ::wait_condition::WaitCondition, lockedMutex: *mut ::mutex::Mutex, time: ::libc::c_ulong) -> bool;
  pub fn qt_core_c_QWaitCondition_wait_lockedReadWriteLock(this_ptr: *mut ::wait_condition::WaitCondition, lockedReadWriteLock: *mut ::read_write_lock::ReadWriteLock) -> bool;
  pub fn qt_core_c_QWaitCondition_wait_lockedReadWriteLock_time(this_ptr: *mut ::wait_condition::WaitCondition, lockedReadWriteLock: *mut ::read_write_lock::ReadWriteLock, time: ::libc::c_ulong) -> bool;
  pub fn qt_core_c_QWaitCondition_wakeAll(this_ptr: *mut ::wait_condition::WaitCondition);
  pub fn qt_core_c_QWaitCondition_wakeOne(this_ptr: *mut ::wait_condition::WaitCondition);

  // Header: QWriteLocker
  pub fn qt_core_c_QWriteLocker_constructor(readWriteLock: *mut ::read_write_lock::ReadWriteLock, output: *mut ::write_locker::WriteLocker);
  pub fn qt_core_c_QWriteLocker_destructor(this_ptr: *mut ::write_locker::WriteLocker);
  pub fn qt_core_c_QWriteLocker_readWriteLock(this_ptr: *const ::write_locker::WriteLocker) -> *mut ::read_write_lock::ReadWriteLock;
  pub fn qt_core_c_QWriteLocker_relock(this_ptr: *mut ::write_locker::WriteLocker);
  pub fn qt_core_c_QWriteLocker_unlock(this_ptr: *mut ::write_locker::WriteLocker);

  // Header: QXmlStreamAttribute
  pub fn qt_core_c_QXmlStreamAttribute_G_swap(value1: *mut ::xml_stream_string_ref::XmlStreamStringRef, value2: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamAttribute_constructor_arg1(arg1: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QXmlStreamAttribute_constructor_namespaceUri_name_value(namespaceUri: *const ::string::String, name: *const ::string::String, value: *const ::string::String, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QXmlStreamAttribute_constructor_no_args(output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QXmlStreamAttribute_constructor_qualifiedName_value(qualifiedName: *const ::string::String, value: *const ::string::String, output: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QXmlStreamAttribute_destructor(this_ptr: *mut ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QXmlStreamAttribute_isDefault(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QXmlStreamAttribute_name_to_output(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttribute_namespaceUri_to_output(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttribute_operator_assign(this_ptr: *mut ::xml_stream_attribute::XmlStreamAttribute, arg1: *const ::xml_stream_attribute::XmlStreamAttribute) -> *mut ::xml_stream_attribute::XmlStreamAttribute;
  pub fn qt_core_c_QXmlStreamAttribute_operator_eq(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, other: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QXmlStreamAttribute_operator_neq(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, other: *const ::xml_stream_attribute::XmlStreamAttribute) -> bool;
  pub fn qt_core_c_QXmlStreamAttribute_prefix_to_output(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttribute_qualifiedName_to_output(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttribute_value_to_output(this_ptr: *const ::xml_stream_attribute::XmlStreamAttribute, output: *mut ::string_ref::StringRef);

  // Header: QXmlStreamAttributes
  pub fn qt_core_c_QXmlStreamAttributes_G_static_cast_QVector_QXmlStreamAttribute_ptr(ptr: *mut ::xml_stream_attributes::XmlStreamAttributes) -> *mut ::vector::VectorXmlStreamAttribute;
  pub fn qt_core_c_QXmlStreamAttributes_G_static_cast_QXmlStreamAttributes_ptr(ptr: *mut ::vector::VectorXmlStreamAttribute) -> *mut ::xml_stream_attributes::XmlStreamAttributes;
  pub fn qt_core_c_QXmlStreamAttributes_append_namespaceUri_name_value(this_ptr: *mut ::xml_stream_attributes::XmlStreamAttributes, namespaceUri: *const ::string::String, name: *const ::string::String, value: *const ::string::String);
  pub fn qt_core_c_QXmlStreamAttributes_append_qualifiedName_value(this_ptr: *mut ::xml_stream_attributes::XmlStreamAttributes, qualifiedName: *const ::string::String, value: *const ::string::String);
  pub fn qt_core_c_QXmlStreamAttributes_constructor(output: *mut ::xml_stream_attributes::XmlStreamAttributes);
  pub fn qt_core_c_QXmlStreamAttributes_destructor(this_ptr: *mut ::xml_stream_attributes::XmlStreamAttributes);
  pub fn qt_core_c_QXmlStreamAttributes_hasAttribute_QLatin1String(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, qualifiedName: *const ::latin1_string::Latin1String) -> bool;
  pub fn qt_core_c_QXmlStreamAttributes_hasAttribute_QString(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, qualifiedName: *const ::string::String) -> bool;
  pub fn qt_core_c_QXmlStreamAttributes_hasAttribute_QString_QString(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, namespaceUri: *const ::string::String, name: *const ::string::String) -> bool;
  pub fn qt_core_c_QXmlStreamAttributes_value_to_output_QLatin1String(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, qualifiedName: *const ::latin1_string::Latin1String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttributes_value_to_output_QLatin1String_QLatin1String(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, namespaceUri: *const ::latin1_string::Latin1String, name: *const ::latin1_string::Latin1String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttributes_value_to_output_QString(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, qualifiedName: *const ::string::String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttributes_value_to_output_QString_QLatin1String(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, namespaceUri: *const ::string::String, name: *const ::latin1_string::Latin1String, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamAttributes_value_to_output_QString_QString(this_ptr: *const ::xml_stream_attributes::XmlStreamAttributes, namespaceUri: *const ::string::String, name: *const ::string::String, output: *mut ::string_ref::StringRef);

  // Header: QXmlStreamEntityDeclaration
  pub fn qt_core_c_QXmlStreamEntityDeclaration_constructor_arg1(arg1: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_constructor_no_args(output: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_destructor(this_ptr: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_name_to_output(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_notationName_to_output(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_operator_assign(this_ptr: *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, arg1: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> *mut ::xml_stream_entity_declaration::XmlStreamEntityDeclaration;
  pub fn qt_core_c_QXmlStreamEntityDeclaration_operator_eq(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, other: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QXmlStreamEntityDeclaration_operator_neq(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, other: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration) -> bool;
  pub fn qt_core_c_QXmlStreamEntityDeclaration_publicId_to_output(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_systemId_to_output(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamEntityDeclaration_value_to_output(this_ptr: *const ::xml_stream_entity_declaration::XmlStreamEntityDeclaration, output: *mut ::string_ref::StringRef);

  // Header: QXmlStreamEntityResolver
  pub fn qt_core_c_QXmlStreamEntityResolver_delete(this_ptr: *mut ::xml_stream_entity_resolver::XmlStreamEntityResolver);
  pub fn qt_core_c_QXmlStreamEntityResolver_resolveEntity_to_output(this_ptr: *mut ::xml_stream_entity_resolver::XmlStreamEntityResolver, publicId: *const ::string::String, systemId: *const ::string::String, output: *mut ::string::String);
  pub fn qt_core_c_QXmlStreamEntityResolver_resolveUndeclaredEntity_to_output(this_ptr: *mut ::xml_stream_entity_resolver::XmlStreamEntityResolver, name: *const ::string::String, output: *mut ::string::String);

  // Header: QXmlStreamNamespaceDeclaration
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_constructor_arg1(arg1: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_constructor_no_args(output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_constructor_prefix_namespaceUri(prefix: *const ::string::String, namespaceUri: *const ::string::String, output: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_destructor(this_ptr: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_namespaceUri_to_output(this_ptr: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_operator_assign(this_ptr: *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, arg1: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> *mut ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration;
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_operator_eq(this_ptr: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, other: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_operator_neq(this_ptr: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, other: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration) -> bool;
  pub fn qt_core_c_QXmlStreamNamespaceDeclaration_prefix_to_output(this_ptr: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration, output: *mut ::string_ref::StringRef);

  // Header: QXmlStreamNotationDeclaration
  pub fn qt_core_c_QXmlStreamNotationDeclaration_constructor_arg1(arg1: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QXmlStreamNotationDeclaration_constructor_no_args(output: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QXmlStreamNotationDeclaration_destructor(this_ptr: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration);
  pub fn qt_core_c_QXmlStreamNotationDeclaration_name_to_output(this_ptr: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamNotationDeclaration_operator_assign(this_ptr: *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, arg1: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> *mut ::xml_stream_notation_declaration::XmlStreamNotationDeclaration;
  pub fn qt_core_c_QXmlStreamNotationDeclaration_operator_eq(this_ptr: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, other: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QXmlStreamNotationDeclaration_operator_neq(this_ptr: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, other: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration) -> bool;
  pub fn qt_core_c_QXmlStreamNotationDeclaration_publicId_to_output(this_ptr: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamNotationDeclaration_systemId_to_output(this_ptr: *const ::xml_stream_notation_declaration::XmlStreamNotationDeclaration, output: *mut ::string_ref::StringRef);

  // Header: QXmlStreamReader
  pub fn qt_core_c_QXmlStreamReader_addData_QByteArray(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, data: *const ::byte_array::ByteArray);
  pub fn qt_core_c_QXmlStreamReader_addData_QString(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, data: *const ::string::String);
  pub fn qt_core_c_QXmlStreamReader_addData_char(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, data: *const ::libc::c_char);
  pub fn qt_core_c_QXmlStreamReader_addExtraNamespaceDeclaration(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, extraNamespaceDeclaraction: *const ::xml_stream_namespace_declaration::XmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamReader_addExtraNamespaceDeclarations(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, extraNamespaceDeclaractions: *const ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamReader_atEnd(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_attributes_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::xml_stream_attributes::XmlStreamAttributes);
  pub fn qt_core_c_QXmlStreamReader_characterOffset(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> i64;
  pub fn qt_core_c_QXmlStreamReader_clear(this_ptr: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_columnNumber(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> i64;
  pub fn qt_core_c_QXmlStreamReader_constructor_QByteArray(data: *const ::byte_array::ByteArray, output: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_constructor_QIODevice(device: *mut ::io_device::IODevice, output: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_constructor_QString(data: *const ::string::String, output: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_constructor_char(data: *const ::libc::c_char, output: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_constructor_no_args(output: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_destructor(this_ptr: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_device(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QXmlStreamReader_documentEncoding_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_documentVersion_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_dtdName_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_dtdPublicId_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_dtdSystemId_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_entityDeclarations_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::vector::VectorXmlStreamEntityDeclaration);
  pub fn qt_core_c_QXmlStreamReader_entityResolver(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> *mut ::xml_stream_entity_resolver::XmlStreamEntityResolver;
  pub fn qt_core_c_QXmlStreamReader_error(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> ::xml_stream_reader::Error;
  pub fn qt_core_c_QXmlStreamReader_errorString_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string::String);
  pub fn qt_core_c_QXmlStreamReader_hasError(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isCDATA(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isCharacters(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isComment(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isDTD(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isEndDocument(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isEndElement(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isEntityReference(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isProcessingInstruction(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isStandaloneDocument(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isStartDocument(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isStartElement(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_isWhitespace(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_lineNumber(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> i64;
  pub fn qt_core_c_QXmlStreamReader_name_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_namespaceDeclarations_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::vector::VectorXmlStreamNamespaceDeclaration);
  pub fn qt_core_c_QXmlStreamReader_namespaceProcessing(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_namespaceUri_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_notationDeclarations_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::vector::VectorXmlStreamNotationDeclaration);
  pub fn qt_core_c_QXmlStreamReader_prefix_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_processingInstructionData_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_processingInstructionTarget_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_qualifiedName_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_raiseError_message(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, message: *const ::string::String);
  pub fn qt_core_c_QXmlStreamReader_raiseError_no_args(this_ptr: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_readElementText_to_output_behaviour(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, behaviour: ::xml_stream_reader::ReadElementTextBehaviour, output: *mut ::string::String);
  pub fn qt_core_c_QXmlStreamReader_readElementText_to_output_no_args(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, output: *mut ::string::String);
  pub fn qt_core_c_QXmlStreamReader_readNext(this_ptr: *mut ::xml_stream_reader::XmlStreamReader) -> ::xml_stream_reader::TokenType;
  pub fn qt_core_c_QXmlStreamReader_readNextStartElement(this_ptr: *mut ::xml_stream_reader::XmlStreamReader) -> bool;
  pub fn qt_core_c_QXmlStreamReader_setDevice(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, device: *mut ::io_device::IODevice);
  pub fn qt_core_c_QXmlStreamReader_setEntityResolver(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, resolver: *mut ::xml_stream_entity_resolver::XmlStreamEntityResolver);
  pub fn qt_core_c_QXmlStreamReader_setNamespaceProcessing(this_ptr: *mut ::xml_stream_reader::XmlStreamReader, arg1: bool);
  pub fn qt_core_c_QXmlStreamReader_skipCurrentElement(this_ptr: *mut ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamReader_text_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamReader_tokenString_to_output(this_ptr: *const ::xml_stream_reader::XmlStreamReader, output: *mut ::string::String);
  pub fn qt_core_c_QXmlStreamReader_tokenType(this_ptr: *const ::xml_stream_reader::XmlStreamReader) -> ::xml_stream_reader::TokenType;

  // Header: QXmlStreamStringRef
  pub fn qt_core_c_QXmlStreamStringRef_clear(this_ptr: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamStringRef_constructor_QString(aString: *const ::string::String, output: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamStringRef_constructor_QStringRef(aString: *const ::string_ref::StringRef, output: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamStringRef_constructor_QXmlStreamStringRef(other: *const ::xml_stream_string_ref::XmlStreamStringRef, output: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamStringRef_constructor_no_args(output: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamStringRef_convert_to_QStringRef_to_output(this_ptr: *const ::xml_stream_string_ref::XmlStreamStringRef, output: *mut ::string_ref::StringRef);
  pub fn qt_core_c_QXmlStreamStringRef_destructor(this_ptr: *mut ::xml_stream_string_ref::XmlStreamStringRef);
  pub fn qt_core_c_QXmlStreamStringRef_operator_assign(this_ptr: *mut ::xml_stream_string_ref::XmlStreamStringRef, other: *const ::xml_stream_string_ref::XmlStreamStringRef) -> *mut ::xml_stream_string_ref::XmlStreamStringRef;
  pub fn qt_core_c_QXmlStreamStringRef_position(this_ptr: *const ::xml_stream_string_ref::XmlStreamStringRef) -> ::libc::c_int;
  pub fn qt_core_c_QXmlStreamStringRef_size(this_ptr: *const ::xml_stream_string_ref::XmlStreamStringRef) -> ::libc::c_int;
  pub fn qt_core_c_QXmlStreamStringRef_string(this_ptr: *const ::xml_stream_string_ref::XmlStreamStringRef) -> *const ::string::String;
  pub fn qt_core_c_QXmlStreamStringRef_swap(this_ptr: *mut ::xml_stream_string_ref::XmlStreamStringRef, other: *mut ::xml_stream_string_ref::XmlStreamStringRef);

  // Header: QXmlStreamWriter
  pub fn qt_core_c_QXmlStreamWriter_autoFormatting(this_ptr: *const ::xml_stream_writer::XmlStreamWriter) -> bool;
  pub fn qt_core_c_QXmlStreamWriter_autoFormattingIndent(this_ptr: *const ::xml_stream_writer::XmlStreamWriter) -> ::libc::c_int;
  pub fn qt_core_c_QXmlStreamWriter_codec(this_ptr: *const ::xml_stream_writer::XmlStreamWriter) -> *mut ::text_codec::TextCodec;
  pub fn qt_core_c_QXmlStreamWriter_constructor_array(array: *mut ::byte_array::ByteArray, output: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_constructor_device(device: *mut ::io_device::IODevice, output: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_constructor_no_args(output: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_constructor_string(string: *mut ::string::String, output: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_destructor(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_device(this_ptr: *const ::xml_stream_writer::XmlStreamWriter) -> *mut ::io_device::IODevice;
  pub fn qt_core_c_QXmlStreamWriter_hasError(this_ptr: *const ::xml_stream_writer::XmlStreamWriter) -> bool;
  pub fn qt_core_c_QXmlStreamWriter_setAutoFormatting(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, arg1: bool);
  pub fn qt_core_c_QXmlStreamWriter_setAutoFormattingIndent(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, spacesOrTabs: ::libc::c_int);
  pub fn qt_core_c_QXmlStreamWriter_setCodec_codec(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, codec: *mut ::text_codec::TextCodec);
  pub fn qt_core_c_QXmlStreamWriter_setCodec_codecName(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, codecName: *const ::libc::c_char);
  pub fn qt_core_c_QXmlStreamWriter_setDevice(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, device: *mut ::io_device::IODevice);
  pub fn qt_core_c_QXmlStreamWriter_writeAttribute_attribute(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, attribute: *const ::xml_stream_attribute::XmlStreamAttribute);
  pub fn qt_core_c_QXmlStreamWriter_writeAttribute_namespaceUri_name_value(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String, name: *const ::string::String, value: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeAttribute_qualifiedName_value(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, qualifiedName: *const ::string::String, value: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeAttributes(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, attributes: *const ::xml_stream_attributes::XmlStreamAttributes);
  pub fn qt_core_c_QXmlStreamWriter_writeCDATA(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, text: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeCharacters(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, text: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeComment(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, text: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeCurrentToken(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, reader: *const ::xml_stream_reader::XmlStreamReader);
  pub fn qt_core_c_QXmlStreamWriter_writeDTD(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, dtd: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeDefaultNamespace(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeEmptyElement_namespaceUri_name(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String, name: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeEmptyElement_qualifiedName(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, qualifiedName: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeEndDocument(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_writeEndElement(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_writeEntityReference(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, name: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeNamespace_namespaceUri(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeNamespace_namespaceUri_prefix(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String, prefix: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeProcessingInstruction_target(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, target: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeProcessingInstruction_target_data(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, target: *const ::string::String, data: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeStartDocument_no_args(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter);
  pub fn qt_core_c_QXmlStreamWriter_writeStartDocument_version(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, version: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeStartDocument_version_standalone(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, version: *const ::string::String, standalone: bool);
  pub fn qt_core_c_QXmlStreamWriter_writeStartElement_namespaceUri_name(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String, name: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeStartElement_qualifiedName(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, qualifiedName: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeTextElement_namespaceUri_name_text(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, namespaceUri: *const ::string::String, name: *const ::string::String, text: *const ::string::String);
  pub fn qt_core_c_QXmlStreamWriter_writeTextElement_qualifiedName_text(this_ptr: *mut ::xml_stream_writer::XmlStreamWriter, qualifiedName: *const ::string::String, text: *const ::string::String);

  // Header: QtAlgorithms
  pub fn qt_core_c_QtAlgorithms_G_qCountLeadingZeroBits_quint16(v: u16) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountLeadingZeroBits_quint32(v: u32) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountLeadingZeroBits_quint64(v: u64) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountLeadingZeroBits_quint8(v: u8) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountLeadingZeroBits_unsigned_long(v: ::libc::c_ulong) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountTrailingZeroBits_quint16(v: u16) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountTrailingZeroBits_quint32(v: u32) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountTrailingZeroBits_quint64(v: u64) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountTrailingZeroBits_quint8(v: u8) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qCountTrailingZeroBits_unsigned_long(v: ::libc::c_ulong) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qPopulationCount_quint16(v: u16) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qPopulationCount_quint32(v: u32) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qPopulationCount_quint64(v: u64) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qPopulationCount_quint8(v: u8) -> ::libc::c_uint;
  pub fn qt_core_c_QtAlgorithms_G_qPopulationCount_unsigned_long(v: ::libc::c_ulong) -> ::libc::c_uint;

  // Header: QtMath
  pub fn qt_core_c_QtMath_G_qAcos(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qAsin(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qAtan(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qAtan2(y: ::libc::c_double, x: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qCeil(v: ::libc::c_double) -> ::libc::c_int;
  pub fn qt_core_c_QtMath_G_qCos(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qDegreesToRadians_double(degrees: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qDegreesToRadians_float(degrees: ::libc::c_float) -> ::libc::c_float;
  pub fn qt_core_c_QtMath_G_qExp(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qFabs(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qFastCos(x: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qFastSin(x: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qFloor(v: ::libc::c_double) -> ::libc::c_int;
  pub fn qt_core_c_QtMath_G_qLn(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qNextPowerOfTwo_qint32(v: i32) -> u32;
  pub fn qt_core_c_QtMath_G_qNextPowerOfTwo_qint64(v: i64) -> u64;
  pub fn qt_core_c_QtMath_G_qNextPowerOfTwo_quint32(v: u32) -> u32;
  pub fn qt_core_c_QtMath_G_qNextPowerOfTwo_quint64(v: u64) -> u64;
  pub fn qt_core_c_QtMath_G_qPow(x: ::libc::c_double, y: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qRadiansToDegrees_double(radians: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qRadiansToDegrees_float(radians: ::libc::c_float) -> ::libc::c_float;
  pub fn qt_core_c_QtMath_G_qSin(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qSqrt(v: ::libc::c_double) -> ::libc::c_double;
  pub fn qt_core_c_QtMath_G_qTan(v: ::libc::c_double) -> ::libc::c_double;

  // Header: QtNumeric
  pub fn qt_core_c_QtNumeric_G_qFloatDistance_double_double(a: ::libc::c_double, b: ::libc::c_double) -> u64;
  pub fn qt_core_c_QtNumeric_G_qFloatDistance_float_float(a: ::libc::c_float, b: ::libc::c_float) -> u32;
  pub fn qt_core_c_QtNumeric_G_qInf() -> ::libc::c_double;
  pub fn qt_core_c_QtNumeric_G_qIsFinite_d(d: ::libc::c_double) -> bool;
  pub fn qt_core_c_QtNumeric_G_qIsFinite_f(f: ::libc::c_float) -> bool;
  pub fn qt_core_c_QtNumeric_G_qIsInf_d(d: ::libc::c_double) -> bool;
  pub fn qt_core_c_QtNumeric_G_qIsInf_f(f: ::libc::c_float) -> bool;
  pub fn qt_core_c_QtNumeric_G_qIsNaN_d(d: ::libc::c_double) -> bool;
  pub fn qt_core_c_QtNumeric_G_qIsNaN_f(f: ::libc::c_float) -> bool;
  pub fn qt_core_c_QtNumeric_G_qQNaN() -> ::libc::c_double;
  pub fn qt_core_c_QtNumeric_G_qSNaN() -> ::libc::c_double;

  // Header: slots
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_Direction_custom_slot(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationDirectionRef, arg0: *const ::abstract_animation::Direction);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_Direction_delete(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationDirectionRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_Direction_new() -> *mut ::slots::raw::RawSlotAbstractAnimationDirectionRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_Direction_set(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationDirectionRef, func: extern "C" fn(*mut ::libc::c_void, *const ::abstract_animation::Direction), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_QAbstractAnimation_State_custom_slot(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRefAbstractAnimationStateRef, arg0: *const ::abstract_animation::State, arg1: *const ::abstract_animation::State);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_QAbstractAnimation_State_delete(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRefAbstractAnimationStateRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_QAbstractAnimation_State_new() -> *mut ::slots::raw::RawSlotAbstractAnimationStateRefAbstractAnimationStateRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_QAbstractAnimation_State_set(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRefAbstractAnimationStateRef, func: extern "C" fn(*mut ::libc::c_void, *const ::abstract_animation::State, *const ::abstract_animation::State), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_custom_slot(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRef, arg0: *const ::abstract_animation::State);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_delete(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_new() -> *mut ::slots::raw::RawSlotAbstractAnimationStateRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_State_set(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRef, func: extern "C" fn(*mut ::libc::c_void, *const ::abstract_animation::State), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_ptr_custom_slot(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationMutPtr, arg0: *mut ::abstract_animation::AbstractAnimation);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_ptr_delete(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationMutPtr);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_ptr_new() -> *mut ::slots::raw::RawSlotAbstractAnimationMutPtr;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractAnimation_ptr_set(this_ptr: *mut ::slots::raw::RawSlotAbstractAnimationMutPtr, func: extern "C" fn(*mut ::libc::c_void, *mut ::abstract_animation::AbstractAnimation), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractItemModel_ptr_custom_slot(this_ptr: *mut ::slots::raw::RawSlotAbstractItemModelMutPtr, arg0: *mut ::abstract_item_model::AbstractItemModel);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractItemModel_ptr_delete(this_ptr: *mut ::slots::raw::RawSlotAbstractItemModelMutPtr);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractItemModel_ptr_new() -> *mut ::slots::raw::RawSlotAbstractItemModelMutPtr;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QAbstractItemModel_ptr_set(this_ptr: *mut ::slots::raw::RawSlotAbstractItemModelMutPtr, func: extern "C" fn(*mut ::libc::c_void, *mut ::abstract_item_model::AbstractItemModel), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QObject_ptr_custom_slot(this_ptr: *mut ::slots::raw::RawSlotObjectMutPtr, arg0: *mut ::object::Object);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QObject_ptr_delete(this_ptr: *mut ::slots::raw::RawSlotObjectMutPtr);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QObject_ptr_new() -> *mut ::slots::raw::RawSlotObjectMutPtr;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QObject_ptr_set(this_ptr: *mut ::slots::raw::RawSlotObjectMutPtr, func: extern "C" fn(*mut ::libc::c_void, *mut ::object::Object), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessError_custom_slot(this_ptr: *mut ::slots::raw::RawSlotProcessProcessErrorRef, arg0: *const ::process::ProcessError);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessError_delete(this_ptr: *mut ::slots::raw::RawSlotProcessProcessErrorRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessError_new() -> *mut ::slots::raw::RawSlotProcessProcessErrorRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessError_set(this_ptr: *mut ::slots::raw::RawSlotProcessProcessErrorRef, func: extern "C" fn(*mut ::libc::c_void, *const ::process::ProcessError), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessState_custom_slot(this_ptr: *mut ::slots::raw::RawSlotProcessProcessStateRef, arg0: *const ::process::ProcessState);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessState_delete(this_ptr: *mut ::slots::raw::RawSlotProcessProcessStateRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessState_new() -> *mut ::slots::raw::RawSlotProcessProcessStateRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QProcess_ProcessState_set(this_ptr: *mut ::slots::raw::RawSlotProcessProcessStateRef, func: extern "C" fn(*mut ::libc::c_void, *const ::process::ProcessState), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QTimeLine_State_custom_slot(this_ptr: *mut ::slots::raw::RawSlotTimeLineStateRef, arg0: *const ::time_line::State);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QTimeLine_State_delete(this_ptr: *mut ::slots::raw::RawSlotTimeLineStateRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_QTimeLine_State_new() -> *mut ::slots::raw::RawSlotTimeLineStateRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_QTimeLine_State_set(this_ptr: *mut ::slots::raw::RawSlotTimeLineStateRef, func: extern "C" fn(*mut ::libc::c_void, *const ::time_line::State), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_custom_slot(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRef, arg0: *const ::qt::Orientation);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_delete(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_custom_slot(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRefCInt, arg0: *const ::qt::Orientation, arg1: ::libc::c_int);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_delete(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRefCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_int_custom_slot(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRefCIntCInt, arg0: *const ::qt::Orientation, arg1: ::libc::c_int, arg2: ::libc::c_int);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_int_delete(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRefCIntCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_int_new() -> *mut ::slots::raw::RawSlotQtOrientationRefCIntCInt;
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_int_set(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRefCIntCInt, func: extern "C" fn(*mut ::libc::c_void, *const ::qt::Orientation, ::libc::c_int, ::libc::c_int), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_new() -> *mut ::slots::raw::RawSlotQtOrientationRefCInt;
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_int_set(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRefCInt, func: extern "C" fn(*mut ::libc::c_void, *const ::qt::Orientation, ::libc::c_int), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_new() -> *mut ::slots::raw::RawSlotQtOrientationRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_Qt_Orientation_set(this_ptr: *mut ::slots::raw::RawSlotQtOrientationRef, func: extern "C" fn(*mut ::libc::c_void, *const ::qt::Orientation), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_bool_custom_slot(this_ptr: *mut ::slots::raw::RawSlotBool, arg0: bool);
  pub fn qt_core_c_qt_core_c_SlotWrapper_bool_delete(this_ptr: *mut ::slots::raw::RawSlotBool);
  pub fn qt_core_c_qt_core_c_SlotWrapper_bool_new() -> *mut ::slots::raw::RawSlotBool;
  pub fn qt_core_c_qt_core_c_SlotWrapper_bool_set(this_ptr: *mut ::slots::raw::RawSlotBool, func: extern "C" fn(*mut ::libc::c_void, bool), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_const_QItemSelection_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotItemSelectionRefItemSelectionRef, arg0: *const ::item_selection::ItemSelection, arg1: *const ::item_selection::ItemSelection);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_const_QItemSelection_ref_delete(this_ptr: *mut ::slots::raw::RawSlotItemSelectionRefItemSelectionRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_const_QItemSelection_ref_new() -> *mut ::slots::raw::RawSlotItemSelectionRefItemSelectionRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_const_QItemSelection_ref_set(this_ptr: *mut ::slots::raw::RawSlotItemSelectionRefItemSelectionRef, func: extern "C" fn(*mut ::libc::c_void, *const ::item_selection::ItemSelection, *const ::item_selection::ItemSelection), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotItemSelectionRef, arg0: *const ::item_selection::ItemSelection);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_delete(this_ptr: *mut ::slots::raw::RawSlotItemSelectionRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_new() -> *mut ::slots::raw::RawSlotItemSelectionRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QItemSelection_ref_set(this_ptr: *mut ::slots::raw::RawSlotItemSelectionRef, func: extern "C" fn(*mut ::libc::c_void, *const ::item_selection::ItemSelection), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_QAbstractItemModel_LayoutChangeHint_custom_slot(this_ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRefAbstractItemModelLayoutChangeHintRef, arg0: *const ::list::ListPersistentModelIndex, arg1: *const ::abstract_item_model::LayoutChangeHint);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_QAbstractItemModel_LayoutChangeHint_delete(this_ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRefAbstractItemModelLayoutChangeHintRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_QAbstractItemModel_LayoutChangeHint_new() -> *mut ::slots::raw::RawSlotListListPersistentModelIndexRefAbstractItemModelLayoutChangeHintRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_QAbstractItemModel_LayoutChangeHint_set(this_ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRefAbstractItemModelLayoutChangeHintRef, func: extern "C" fn(*mut ::libc::c_void, *const ::list::ListPersistentModelIndex, *const ::abstract_item_model::LayoutChangeHint), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRef, arg0: *const ::list::ListPersistentModelIndex);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_delete(this_ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_new() -> *mut ::slots::raw::RawSlotListListPersistentModelIndexRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_set(this_ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRef, func: extern "C" fn(*mut ::libc::c_void, *const ::list::ListPersistentModelIndex), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_const_QVector_int_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRefVectorVectorCIntRef, arg0: *const ::model_index::ModelIndex, arg1: *const ::model_index::ModelIndex, arg2: *const ::vector::VectorCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_const_QVector_int_ref_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRefVectorVectorCIntRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_const_QVector_int_ref_new() -> *mut ::slots::raw::RawSlotModelIndexRefModelIndexRefVectorVectorCIntRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_const_QVector_int_ref_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRefVectorVectorCIntRef, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex, *const ::model_index::ModelIndex, *const ::vector::VectorCInt), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRef, arg0: *const ::model_index::ModelIndex, arg1: *const ::model_index::ModelIndex);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_new() -> *mut ::slots::raw::RawSlotModelIndexRefModelIndexRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRef, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex, *const ::model_index::ModelIndex), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRef, arg0: *const ::model_index::ModelIndex);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCInt, arg0: *const ::model_index::ModelIndex, arg1: ::libc::c_int);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRef, arg0: *const ::model_index::ModelIndex, arg1: ::libc::c_int, arg2: ::libc::c_int, arg3: *const ::model_index::ModelIndex);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_int_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRefCInt, arg0: *const ::model_index::ModelIndex, arg1: ::libc::c_int, arg2: ::libc::c_int, arg3: *const ::model_index::ModelIndex, arg4: ::libc::c_int);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_int_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRefCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_int_new() -> *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRefCInt;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_int_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRefCInt, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex, ::libc::c_int, ::libc::c_int, *const ::model_index::ModelIndex, ::libc::c_int), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_new() -> *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRef, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex, ::libc::c_int, ::libc::c_int, *const ::model_index::ModelIndex), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_custom_slot(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCInt, arg0: *const ::model_index::ModelIndex, arg1: ::libc::c_int, arg2: ::libc::c_int);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_delete(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_new() -> *mut ::slots::raw::RawSlotModelIndexRefCIntCInt;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCInt, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex, ::libc::c_int, ::libc::c_int), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_new() -> *mut ::slots::raw::RawSlotModelIndexRefCInt;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRefCInt, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex, ::libc::c_int), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_new() -> *mut ::slots::raw::RawSlotModelIndexRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QModelIndex_ref_set(this_ptr: *mut ::slots::raw::RawSlotModelIndexRef, func: extern "C" fn(*mut ::libc::c_void, *const ::model_index::ModelIndex), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QString_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotStringRef, arg0: *const ::string::String);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QString_ref_delete(this_ptr: *mut ::slots::raw::RawSlotStringRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QString_ref_new() -> *mut ::slots::raw::RawSlotStringRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QString_ref_set(this_ptr: *mut ::slots::raw::RawSlotStringRef, func: extern "C" fn(*mut ::libc::c_void, *const ::string::String), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QVariant_ref_custom_slot(this_ptr: *mut ::slots::raw::RawSlotVariantRef, arg0: *const ::variant::Variant);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QVariant_ref_delete(this_ptr: *mut ::slots::raw::RawSlotVariantRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QVariant_ref_new() -> *mut ::slots::raw::RawSlotVariantRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_const_QVariant_ref_set(this_ptr: *mut ::slots::raw::RawSlotVariantRef, func: extern "C" fn(*mut ::libc::c_void, *const ::variant::Variant), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_double_custom_slot(this_ptr: *mut ::slots::raw::RawSlotCDouble, arg0: ::libc::c_double);
  pub fn qt_core_c_qt_core_c_SlotWrapper_double_delete(this_ptr: *mut ::slots::raw::RawSlotCDouble);
  pub fn qt_core_c_qt_core_c_SlotWrapper_double_new() -> *mut ::slots::raw::RawSlotCDouble;
  pub fn qt_core_c_qt_core_c_SlotWrapper_double_set(this_ptr: *mut ::slots::raw::RawSlotCDouble, func: extern "C" fn(*mut ::libc::c_void, ::libc::c_double), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_QProcess_ExitStatus_custom_slot(this_ptr: *mut ::slots::raw::RawSlotCIntProcessExitStatusRef, arg0: ::libc::c_int, arg1: *const ::process::ExitStatus);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_QProcess_ExitStatus_delete(this_ptr: *mut ::slots::raw::RawSlotCIntProcessExitStatusRef);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_QProcess_ExitStatus_new() -> *mut ::slots::raw::RawSlotCIntProcessExitStatusRef;
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_QProcess_ExitStatus_set(this_ptr: *mut ::slots::raw::RawSlotCIntProcessExitStatusRef, func: extern "C" fn(*mut ::libc::c_void, ::libc::c_int, *const ::process::ExitStatus), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_custom_slot(this_ptr: *mut ::slots::raw::RawSlotCInt, arg0: ::libc::c_int);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_delete(this_ptr: *mut ::slots::raw::RawSlotCInt);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_new() -> *mut ::slots::raw::RawSlotCInt;
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_qint64_custom_slot(this_ptr: *mut ::slots::raw::RawSlotCIntI64, arg0: ::libc::c_int, arg1: i64);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_qint64_delete(this_ptr: *mut ::slots::raw::RawSlotCIntI64);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_qint64_new() -> *mut ::slots::raw::RawSlotCIntI64;
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_qint64_set(this_ptr: *mut ::slots::raw::RawSlotCIntI64, func: extern "C" fn(*mut ::libc::c_void, ::libc::c_int, i64), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_int_set(this_ptr: *mut ::slots::raw::RawSlotCInt, func: extern "C" fn(*mut ::libc::c_void, ::libc::c_int), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_no_args_custom_slot(this_ptr: *mut ::slots::raw::RawSlotNoArgs);
  pub fn qt_core_c_qt_core_c_SlotWrapper_no_args_delete(this_ptr: *mut ::slots::raw::RawSlotNoArgs);
  pub fn qt_core_c_qt_core_c_SlotWrapper_no_args_new() -> *mut ::slots::raw::RawSlotNoArgs;
  pub fn qt_core_c_qt_core_c_SlotWrapper_no_args_set(this_ptr: *mut ::slots::raw::RawSlotNoArgs, func: extern "C" fn(*mut ::libc::c_void), data: *mut ::libc::c_void);
  pub fn qt_core_c_qt_core_c_SlotWrapper_qint64_custom_slot(this_ptr: *mut ::slots::raw::RawSlotI64, arg0: i64);
  pub fn qt_core_c_qt_core_c_SlotWrapper_qint64_delete(this_ptr: *mut ::slots::raw::RawSlotI64);
  pub fn qt_core_c_qt_core_c_SlotWrapper_qint64_new() -> *mut ::slots::raw::RawSlotI64;
  pub fn qt_core_c_qt_core_c_SlotWrapper_qint64_set(this_ptr: *mut ::slots::raw::RawSlotI64, func: extern "C" fn(*mut ::libc::c_void, i64), data: *mut ::libc::c_void);
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QAbstractAnimation_Direction(ptr: *mut ::slots::raw::RawSlotAbstractAnimationDirectionRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QAbstractAnimation_State(ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QAbstractAnimation_State_QAbstractAnimation_State(ptr: *mut ::slots::raw::RawSlotAbstractAnimationStateRefAbstractAnimationStateRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QAbstractAnimation_ptr(ptr: *mut ::slots::raw::RawSlotAbstractAnimationMutPtr) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QAbstractItemModel_ptr(ptr: *mut ::slots::raw::RawSlotAbstractItemModelMutPtr) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QObject_ptr(ptr: *mut ::slots::raw::RawSlotObjectMutPtr) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QProcess_ProcessError(ptr: *mut ::slots::raw::RawSlotProcessProcessErrorRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QProcess_ProcessState(ptr: *mut ::slots::raw::RawSlotProcessProcessStateRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_QTimeLine_State(ptr: *mut ::slots::raw::RawSlotTimeLineStateRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_Qt_Orientation(ptr: *mut ::slots::raw::RawSlotQtOrientationRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_Qt_Orientation_int(ptr: *mut ::slots::raw::RawSlotQtOrientationRefCInt) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_Qt_Orientation_int_int(ptr: *mut ::slots::raw::RawSlotQtOrientationRefCIntCInt) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_bool(ptr: *mut ::slots::raw::RawSlotBool) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QItemSelection_ref(ptr: *mut ::slots::raw::RawSlotItemSelectionRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QItemSelection_ref_const_QItemSelection_ref(ptr: *mut ::slots::raw::RawSlotItemSelectionRefItemSelectionRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref(ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QList_QPersistentModelIndex_ref_QAbstractItemModel_LayoutChangeHint(ptr: *mut ::slots::raw::RawSlotListListPersistentModelIndexRefAbstractItemModelLayoutChangeHintRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref(ptr: *mut ::slots::raw::RawSlotModelIndexRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref(ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref_const_QModelIndex_ref_const_QVector_int_ref(ptr: *mut ::slots::raw::RawSlotModelIndexRefModelIndexRefVectorVectorCIntRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref_int(ptr: *mut ::slots::raw::RawSlotModelIndexRefCInt) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int(ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCInt) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref(ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QModelIndex_ref_int_int_const_QModelIndex_ref_int(ptr: *mut ::slots::raw::RawSlotModelIndexRefCIntCIntModelIndexRefCInt) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QString_ref(ptr: *mut ::slots::raw::RawSlotStringRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_const_QVariant_ref(ptr: *mut ::slots::raw::RawSlotVariantRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_double(ptr: *mut ::slots::raw::RawSlotCDouble) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_int(ptr: *mut ::slots::raw::RawSlotCInt) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_int_QProcess_ExitStatus(ptr: *mut ::slots::raw::RawSlotCIntProcessExitStatusRef) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_int_qint64(ptr: *mut ::slots::raw::RawSlotCIntI64) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_no_args(ptr: *mut ::slots::raw::RawSlotNoArgs) -> *mut ::object::Object;
  pub fn qt_core_c_slots_G_static_cast_QObject_ptr_qt_core_c_SlotWrapper_qint64(ptr: *mut ::slots::raw::RawSlotI64) -> *mut ::object::Object;

}
